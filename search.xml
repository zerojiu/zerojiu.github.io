<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>去一个叫西塘的地方</title>
    <url>/capriccio/go-to-xitang/</url>
    <content><![CDATA[<p>昨天去了西塘，西塘位于浙江、上海、江苏的交界处，好像是一个历史悠久的古镇了。<span id="more"></span></p>
<p>整个西塘都被开发成了旅游景点，和我印象中的徘徊在城市喧嚣之外的历史古镇区别很大。经济的发展已经深深地嵌入了中国的历史遗迹，一些本该怀恋、值得去记忆的名胜不知道在这个世上还存在几个。在那些少数名族的山寨里还有么？我甚至都不知道少数名字还存在哪些古寨了，即使有古寨，还有那些纯朴的寨民在么？还是被铜臭味充斥，从诗意的天堂坠入了堕落的地狱呢？</p>
<p>不过，西塘貌似还好，除了进门前先买票。进门所见便是一汪不知深几许的池水，其后是几条小桥，小桥上都有凉亭，穿过了几个凉亭便算是真正的进入西塘了。导游在耳边唧唧喳喳的介绍着这些小桥以及凉亭的来历，已经介绍我们将如何来参观这座古镇。</p>
<p>我不喜欢有导游的存在，我喜欢一个人进入一块我所向往的美丽景色，自己一个人或者找个朋友一起去慢慢的探索，去发现美的存在。即使有些典故之类不知道，那些关于建筑或者古物的介绍在每个景点都有了，我只要废一点精力去看就是了。</p>
<p>可是今天的西塘是不允许我们这样的，到处都是人群，走几步都能看见一个导游在介绍这是哪，下一个景点又是哪。外国友人也并不少见，由于从来没有和外国人照过相，我还特地找了个外国人合了影，留作纪念。四个小时的观光过程，前一个半小时和导游在以前，后两半小时，自己活动。这也是我比较喜欢的，去寻找自己喜欢的，不如说去邂逅自己的美景更好。</p>
<p>这儿好像是以河为街，每户人家依街而住，连着河两面的便是桥了，江南古镇不缺的就是桥，因为有水，桥就显得极其重要。去过的地方不多，不过从书籍以及电视上得到的结果也是这样。</p>
<p>桥是江南小镇的象征。没有桥的江南便失了底蕴，就像没有冰雕的哈尔滨一样，失去了那地区性的灵魂。在我的老家，我只见过两座桥，两条桥分别连通两条河的两岸，也帮助了行人完成自己行走的历程。桥是助人为乐的，一座桥，可以连通两个陌生的城市，也可以连接两个陌生的心灵。要是哪天，我也可以撑着油纸伞，我要在那江南古镇的小桥上邂逅一个精灵般的女子。要是哪天，我也可以指点江上，我要接通大陆与台湾的桥。</p>
<p>说到西塘，爱吃的人就有福了。这儿有各种各道的美食点心。走在各个小吃摊子旁，简直进入了吃的天堂了。好多东西以前都不知道是什么，吃过了都忘了名字了，因为太多不知道了。</p>
<p>我想在那儿多待会儿，只是行程的安排就是四个小时啦。由不得我来决定，不然我一定去看看这儿的夜景，去看看那个“本店只出售浪漫，不包办爱情”的酒吧，看看夜晚里那个唱歌的人以及这儿的浪漫与诗意。比较现代的东西在这儿显得那么的突出了，比较陈旧的就更加令人想起往事。我在一家出售旧商品的店里看见一款老实电视机上写着“时光是记忆的橡皮”。呵，记忆都么美好啊。这儿就算是对过去记忆的显式体现了吧。只是记忆的橡皮会慢慢变细，有一天我们会不会忘记？</p>
<p>所谓游山玩水，我现在就是在玩水吧，只是是在现实的世界中玩过去的水。不知道这水在百年前是如何光景，百年后只能说是一个安慰吧。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Capriccio</category>
      </categories>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title>小草与大树</title>
    <url>/poetry/grass-and-tree/</url>
    <content><![CDATA[<blockquote><p>我抬头看大树<br>
小草抬头看我<br>
我是小草的梦<br>
大树是我的梦</p>
<footer><strong>LC</strong><cite>小草与大树</cite></footer></blockquote>
<span id="more"></span>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Poetry</category>
      </categories>
  </entry>
  <entry>
    <title>视频会议中的音视频处理技术（Media Foundation）</title>
    <url>/develop/audio-video-process/</url>
    <content><![CDATA[<p>在视频会议中，最基础的的部分应该就是音视频数据的处理了。对于音视频数据的处理，主要是在客户端，涉及到音视频采集、编解码、视频渲染等相关技术。<span id="more"></span>本文接下来的篇幅，会逐点细述这几个相关的技术点。本文所涉及的技术主要是Windows平台下，其他平台请Google。另外，本文的重点在于视频方面，音频暂不详述，同时本文并没有详细的代码，只重点阐述如何实现。</p>
<h2 id="%E5%AA%92%E4%BD%93%E6%B5%81" tabindex="-1">媒体流</h2>
<p>对于视频会议来说，客户端的处理内容主要是媒体流：</p>
<ul>
<li>音频输入流</li>
<li>音频输出流</li>
<li>视频输入流</li>
<li>视频输出流</li>
</ul>
<p>音频输入流的来源主要有麦克风采集和系统，视频输入流的来源主要是摄像头采集和屏幕录制。而对于音视频的输出，主要是通过扬声器、耳机、显示器等设备。</p>
<h2 id="%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86" tabindex="-1">视频采集</h2>
<p>视频采集的主要作用是为视频输入流产生视频数据。一般的笔记本都会自带摄像头，通过<code>Windows Media Foundation</code>提供的API函数<code>MFEnumDeviceSources</code>，我们能够遍历可使用的摄像头。该函数的具体使用方法见<a class="link"   href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd388503" >链接<i class="fas fa-external-link-alt"></i></a>。</p>
<p>每个摄像头都会支持很多格式——不同的分辨率、帧率。一般情况下，我们都会想要一个合适的视频格式。这个格式摄像头有可能不支持，所以在实现摄像头采集时，需要根据我们想要的格式，选择一个最佳匹配。可以按照以下两种匹配原则：</p>
<ul>
<li>寻找各个属性都最接近的格式</li>
<li>寻找各个属性都相同的格式（帧率大于所需帧率也满足情况）</li>
</ul>
<p>摄像头支持的视频格式可以通过<code>Presentation Descriptors</code>来获取，有关<code>Presentation Descriptors</code>的具体使用方法见<a class="link"   href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms698961" >链接<i class="fas fa-external-link-alt"></i></a></p>
<p>摄像头数据的输出采取异步操作，需要实现<code>IMFSourceReaderCallback</code>接口，并且在<code>OnReadSample</code>函数里输出采集到的视频数据。异步操作的设置需要将<code>MFCreateSourceReaderFromMediaSource</code>的IMFAttributes参数的属性<code>MF_SOURCE_READER_ASYNC_CALLBACK</code>设置为<code>IMFSourceReaderCallback</code>接口的具体实现。</p>
<p>视频采集的具体实现可以参照github上的<a class="link"   href="https://github.com/roxlu/video_capture" >video_capture项目<i class="fas fa-external-link-alt"></i></a>。该项目实现了Windows/Linux/Mac三个平台下的摄像头采集操作。如果不想了解实现细节，可以直接使用这个开源项目。</p>
<h2 id="%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81" tabindex="-1">视频编码</h2>
<p>视频编码支持不少的格式：H263、H264、H265、VP8、VP9，这里重点是目前使用的较为普遍的H264格式。</p>
<p>在Windows下，H264编解码有不少实现，开源的有OpenH264、x264，FFMpeg软编软解使用的应该是x264，硬编硬解应该是对应的显卡商提供的库。Media Foundation较为全面的集成了软编、软解、硬编、硬解、硬件加速编解码。</p>
<p>我在多台PC上测试，发现一个现象：Media Foundation支持H264的软编解、硬编、硬件加速解码，却不支持硬解解码。暂且没有找到为什么不支持，不过对于上述几个编解码的支持，已经够我们在Windows平台下开发高性能的视频会议程序了。</p>
<p>如果需要使用软件编解码，推荐使用OpenH264，因为其实跨平台的，并且在Win7下的支持也做的很好。Media Foundation只能在Windows下使用，并且对于实时数据来说，其仅在Win8以上，才做到了较好的支持。如果Win7就像用Media Foundation，有可能还需要在深入的研究下MSDN的文档——非实时场景挺好用，实时场景稍微欠缺。</p>
<p>我们使用Media Foundation，是因为其硬件编解码能力。使用Media Foundation硬编功能主要按照以下步骤：</p>
<p>1、初始化<code>COM组件</code>和<code>Media Foundation组件</code>；</p>
<p>2、调用MFTEnumEx枚举硬件编码<code>IMFTransform</code>，调用ActivateObject激活对应硬件编码器。这里需要注意：</p>
<ul>
<li>硬件编码器采用异步模型，需要设置属性<code>MF_TRANSFORM_ASYNC_UNLOCK</code>为TRUE来解锁硬件编码器；</li>
<li>硬件编码器的输入视频格式为<code>MFVideoFormat_NV12</code>，很多摄像头输出的是YUV、RGB24，需要进行转码，可使用<code>libyuv</code>开源库；</li>
<li>记住调用<code>CoTaskMemFree</code>进行内存释放。</li>
</ul>
<p>3、设置CodecApi，CodecApi主要用来控制编码器的细节属性；</p>
<ul>
<li>通过<code>QueryInterface</code>函数可以获取编码器的CodecApi接口实例；</li>
<li>为了高质量，需要设置<code>CODECAPI_AVEncCommonRateControlMode</code>为<code>eAVEncCommonRateControlMode_Quality</code>；</li>
<li>为了设置低时延，需要设置<code>CODECAPI_AVLowLatencyMode</code>属性为<code>VARIANT_TRUE</code>；</li>
</ul>
<p>4、设置输入输出MediaType</p>
<ul>
<li>这个比较好设置，按照输入和输出参数设置就行了，但是输入格式必须要设置为<code>MFVideoFormat_NV12</code>（<em>应该是必须吧，使用时还是需要对照MSDN来设置</em>）</li>
</ul>
<p>5、初始化事件生成器，由于硬件编码是异步的，因此我们需要获取异步事件，必须要先初始化异步事件生成器。</p>
<p>6、发送初始化消息给MFT，包括下面两个消息：</p>
<ul>
<li><code>MFT_MESSAGE_NOTIFY_BEGIN_STREAMING</code></li>
<li><code>MFT_MESSAGE_NOTIFY_START_OF_STREAM</code></li>
</ul>
<blockquote>
<p>上面是正式硬件编码的准备工作，下面便是编解码的处理过程。</p>
</blockquote>
<p>7、将输入NV12格式视频数据填充到ISample中</p>
<p>8、通过事件产生器，获取异步事件，根据事件类型向编码器输入数据和输出数据，事件类型如下：</p>
<ul>
<li><code>METransformNeedInput</code>：需要输入视频数据</li>
<li><code>METransformHaveOutput</code>：需要输出视频数据</li>
</ul>
<p>9、对应需要输入视频数据时，需要调用<code>ProcessInput</code>方法来处理输入视频数据，对应需要输出视频数据时，需要调用<code>ProcessOutput</code>方法来处理输出视频数据。</p>
<ul>
<li>上述调用时一一对应的，出现一次NeedInput调用一次ProcessInput，出现一次HaveOutput调用一次ProcessOutput</li>
<li>有时候会不需要输入数据，这个时候要等待NeedInput事件，在等待过程中，也需要及时的处理数据输出</li>
<li>也有可能一次需要多个输入数据，这就需要用数组将数据保存起来，分别输入。</li>
</ul>
<p>10、我们前面设置了输出流Media Type，可是在真正的流输出的时候，Media Type有可能改变，也就是ProcessOutput返回错误<code>MF_E_TRANSFORM_STREAM_CHANGE</code>。</p>
<ul>
<li>这个时候，我们需要正确的处理流变化——调用<code>GetOutputAvailableType</code>，并重新设置流格式</li>
<li>并不会因为流格式变化而造成丢帧</li>
</ul>
<p>11、硬件编码结束的时候，需要发送下列消息给MFT，防止出现丢帧：</p>
<ul>
<li><code>MFT_MESSAGE_NOTIFY_END_OF_STREAM</code></li>
<li><code>MFT_MESSAGE_COMMAND_DRAIN</code></li>
</ul>
<p>上面两个消息发送完之后，硬件编码器会将存储在编码器内部尚未输出的帧，全部输出，保证了输入帧数和输出帧数一致。</p>
<p>12、调用<code>IMFShutdown</code>接口的shutdown函数来关闭硬件编码器。</p>
<p>实现上述十二个流程，便能实现一个基本的硬件编码器，需要注意，记得释放内存，否则会导致资源泄露——内存爆了。</p>
<blockquote>
<p>对于<code>MFT_OUTPUT_DATA_BUFFER</code>接口来说，需要释放两个资源：<code>pEvents</code>和<code>pSample</code>。</p>
</blockquote>
<h2 id="%E8%A7%86%E9%A2%91%E8%A7%A3%E7%A0%81" tabindex="-1">视频解码</h2>
<p>对于视频解码，目前实现了Media Foundation硬件解码和硬件加速解码，我的机器仅支持H264的硬件加速解码，并不支持硬件解码，所以硬件解码未做测试。硬件解码和硬件加速解码是不一定的，虽然都使用了GPU的性能，但是硬件加速只是将部分解码工作放在GPU那里执行。</p>
<p>硬件加速解码可以认为是软件解码器和硬件解码器的结合，其编码模式遵从软件解码器的编码模式。所以如果想要Media Foundation的软件解码也可以参照下面的步骤。</p>
<p>1、初始化硬件加速解码器，我们需要判断该解码器是否支持<code>MF_SA_D3D_AWARE</code>属性，支持这个属性表明该解码器支持硬件加速；</p>
<ul>
<li>对于支持硬件加速的解码器，可以将<code>CODECAPI_AVDecVideoAcceleration_H264</code>属性设置为TRUE来启动硬件加速</li>
<li>同时设置<code>CODECAPI_AVLowLatencyMode</code>来启动低时延模式</li>
</ul>
<p>2、创建D3D设备管理器，并发送给MFT</p>
<ul>
<li>通过<code>MFT_MESSAGE_SET_D3D_MANAGER</code>消息发送给硬件加速编码器</li>
</ul>
<p>3、设置输入输出类型，这里需要设置的属性并不多，具体可以参考MSDN上</p>
<p>4、软件编码是采用同步模式，所以不需要异步事件发生器。对于输入数据调用ProcessInput，进而直接得到ProcessOutput输出数据</p>
<ul>
<li>如果不设置低时延模式，ProcessOutput会一直返回NeedMoreInput，直到等到足够的输入。对于，非实时场景无所谓，对于实时场景影响很大。</li>
</ul>
<p>5、ProcessOutput输出时，也有可能会出现流格式变化</p>
<ul>
<li>这个时候，需要遍历可用的输入流，找到合适的输出格式，并重新设置。</li>
</ul>
<p>上述步骤描述较为简单，和视频编码步骤一致的都省略了，没有细述的请参考视频编码一节。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Win32</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++程序库详解</title>
    <url>/develop/c-cplusplus-library/</url>
    <content><![CDATA[<blockquote><p>今天了不起的软件常常比明天的完美软件更可取。</p>
<footer><strong>Andrew Hunt/David Thomas</strong><cite>程序员修炼之道</cite></footer></blockquote>
<p>在计算机科学中，库（library）是用于开发软件的子程序集合。库和可执行文件的区别是，库不是独立程序，他们是向其他程序提供服务的代码。<span id="more"></span></p>
<p>库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。</p>
<h2 id="%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93" tabindex="-1">动态库和静态库</h2>
<p>库链接是指把一个或多个库包括到程序中，有两种链接形式：静态链接和动态链接，相应的，前者链接的库叫做静态库，后者的叫做动态库。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/compiler.png"
                          alt="动态库和静态库编译过程" 
                 >
<h3 id="%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5" tabindex="-1">静态链接</h3>
<p><em>静态链接是由链接器在链接时将库的内容加入到可执行程序中的做法。</em></p>
<p>当程序与静态库连接时，库中目标文件所含的所有将被程序使用的函数的机器码被复制到最终的可执行文件中。这就会导致最终生成的可执行代码量相对变多，占用的磁盘空间和内存空间也会变多。</p>
<p>在Windows中静态库是以<code>.lib</code>为后缀的文件，在Linux中静态库是以<code>.a</code>为后缀的文件。</p>
<h3 id="%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5" tabindex="-1">动态链接</h3>
<p><em>动态链接，在可执行文件装载时或运行时，由操作系统的装载程序加载库。</em></p>
<p>与共享库连接的可执行文件只包含它需要的函数的引用表，而不是所有的函数代码，只有在程序执行时, 那些需要的函数代码才被拷贝到内存中。这样就使可执行文件比较小, 节省磁盘空间。不过由于运行时要去链接库会花费一定的时间，执行速度相对会慢一些。</p>
<p>在Windows中动态库（dynamic link library）是<code>.dll</code>为后缀的文件，在Linux中动态库（共享库shared library）是以<code>.so</code>为后缀的文件。</p>
<h3 id="%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E5%AF%B9%E6%AF%94" tabindex="-1">动态库和静态库对比</h3>
<p>静态链接的<strong>最大缺点</strong>是生成的可执行文件太大，另一个问题是静态库对程序的更新、部署和发布页会带来麻烦。如果静态库更新了，所以使用它的应用程序都需要重新编译、发布给用户（对于玩家来说，可能是一个很小的改动，却导致整个程序重新下载，全量更新）。</p>
<p>动态链接的<strong>最大缺点</strong>是可执行程序依赖分别存储的库文件才能正确执行。如果库文件被删除、移动、重命名或者被替换为不兼容的版本，那么可执行程序就可能工作不正常。</p>
<p>动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。动态库在程序运行是才被载入，也解决了静态库对程序的更新、部署和发布页会带来麻烦。应用程序只需要更新动态库即可实现程序的更新。</p>
<h2 id="windows%E4%B8%8B%E4%BD%BF%E7%94%A8vc%2B%2B%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E5%BA%93" tabindex="-1">Windows下使用VC++创建动态库</h2>
<p>Windows下创建动态库有两种方式：使用_declspec(dllexport)和_declspec(dllimport)关键字、指定.def文件。</p>
<h3 id="%E5%A3%B0%E6%98%8E_declspec(dllexport)%E5%92%8C_declspec(dllimport)%E5%85%B3%E9%94%AE%E5%AD%97" tabindex="-1">声明_declspec(dllexport)和_declspec(dllimport)关键字</h3>
<p>声明函数为_declspec(dllexport)，说明该函数为dll导出函数；声明函数为_declspec(dllimport)说明该函数从dll中导出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>使用eXeScope加载该dll，查看导出表可以看出如下信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011127</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
<h3 id="%E6%8C%87%E5%AE%9A.def%E6%96%87%E4%BB%B6" tabindex="-1">指定.def文件</h3>
<p>.def指定函数，并告知编译器不要以修饰后的函数名作为导出函数名，而以指定的函数名导出函数。</p>
<p>1、需要创建一个Module-Definition File（.def）文件，添加导出函数名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">test</span><br></pre></td></tr></table></figure>
<p>注意：如果是将.txt文件改成.def文件，则需要在Visual Studio里设置：Project Property Pages→Configuration Properties→Linker→Input→Module Definition File中添加该文件</p>
<p>2、添加test函数代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>使用eXeScope加载该dll，查看导出表可以看出如下信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011127</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
<p>如果只添加.def文件，而不添加导出函数名，那么导出函数表存在，但是函数表内是空的。</p>
<h3 id="%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%EF%BC%9F" tabindex="-1">如何选择？</h3>
<p>如果导出函数调用方式采用__cdecl，可以不用.def文件；如果要采用__stdcall调用方式，又不想函数名被修饰，那么久采用.def文件。有关调用方式的讲解见后文。</p>
<h2 id="%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8dll%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" tabindex="-1">如何调用DLL动态链接库</h2>
<p>在Windows平台下有两种调用方式：显式调用和隐式调用。以下面的例子来阐述该问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* test.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%98%BE%E5%BC%8F%E8%B0%83%E7%94%A8" tabindex="-1">显式调用</h3>
<p>显式调用通过LoadLibrary来载入动态链接库，再通过GetProcAddress函数来获取导出函数地址。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*TESTFUNC)</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">    TESTFUNC pTestFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HINSTANCE hInstance = ::<span class="built_in">LoadLibrary</span>(<span class="string">L&quot;dlltest.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pTestFunc = (TESTFUNC)<span class="built_in">GetProcAddress</span>(hInstance, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pTestFunc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pTestFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E9%9A%90%E5%BC%8F%E8%B0%83%E7%94%A8" tabindex="-1">隐式调用</h3>
<p>隐式调用通过#pragma comment(lib, “xx.lib”)的方式，将xx.lib这直接加入到工程中来链接，然后通过#include相关头文件就可以直接使用导出函数。</p>
<p>1、设置Include Directories和Library Directories</p>
<p>如果使用Visual Studio，则在Project Property Pages→Configuration Properties→VC++ Directories中设置这两个选项，这两个选项分别用来包括&quot;test.h&quot;所在目录和&quot;test.lib&quot;所在目录。</p>
<p>2、设置库依赖</p>
<p>如果使用Visual Studio，则在Project Property Pages→Configuration Properties→Linker→Input→Additional Dependencies中添加“test.lib”库。或者是直接使用pragma：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;test.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure>
<p>3、调用代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;test.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E6%9C%89%E5%85%B3%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5" tabindex="-1">有关动态库的一些概念</h2>
<h3 id="extern-c-%E5%92%8C-name-mangling" tabindex="-1">extern C 和 Name-Mangling</h3>
<p>Name Mangling就是一种规范编译器和链接器之间用于通信的符号表表示方法的协议，其目的在于按照程序的语言规范，使符号具备足够多的语义信息以保证链接过程准确无误的进行。</p>
<p>然而，C<ins>标准并没有规定Name-Mangling的方案，这就导致了不同编译器使用了不同的方案，进而编译出来的obj文件并非通用。C标准规定了C语言Name-Mangling的规范，任何一个支持C语言的编译器，编译出来的obj文件可以共享。我们来看C和C</ins>编译后的结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们分别用C++编译器和C编译器来编译这段代码，使用eXeScope加载该dll，查看导出表可以看出如下信息：</p>
<p>1、C++:</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011078</td>
<td style="text-align:center">?test@YAXXXZ</td>
</tr>
</tbody>
</table>
<p>2、C</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011127</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
<p>对于不同的C++编译器，其所得到的函数导出名称很可能不一样，在显示调用这些导出函数时就可能遇到问题，而C编译不会出现这样的问题。</p>
<p>使用extern C声明包裹代码，可以在C++编译器里以C编译器的方式编译代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这段代码在C编译器和C++编译器中编译的结果都是C风格导出函数。</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011127</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
<h3 id="%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A" tabindex="-1">调用约定</h3>
<p>C和C++的默认调用方式为__cdecl，在导出函数的时候，使用__cdecl和__stdcall调用方式，导出的函数名字也是不一样的。见下例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="type">void</span> __cdecl/<span class="function">__stdcall <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dll test\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>我们分别将test函数的调用约定声明为__cdecl和__stdcall，其结果如下：</p>
<p>1、__cdecl</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011127</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
<p>2、__stdcall</p>
<table>
<thead>
<tr>
<th style="text-align:center">序列</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00000001</td>
<td style="text-align:center">10011097</td>
<td style="text-align:center">_test@0</td>
</tr>
</tbody>
</table>
<p>建议使用__cdecl调用方式，这样在显式调用导出函数时只需要GetProcess(hinstance, “test”)即可。</p>
<h3 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%94%A8c%E8%AF%AD%E8%A8%80%E5%B0%81%E8%A3%85%E5%8A%A8%E6%80%81%E5%BA%93" tabindex="-1">为什么需要用C语言封装动态库</h3>
<p>在我们平时开发动态库时，即使我们的源码是C++语言，但是在导出的时候通常也会封装成C语言风格，这是为什么呢？</p>
<p>DLL是对应C语言的动态链接技术，如果我们的库只给C<ins>语言使用，不会涉及到多语言调用，那么用C</ins>封装动态库也是可以的。但是如果我们的库需要给VB、C#等语言调用时，C++语言封装的动态库需要通过各种手段才能正常使用，而用C语言封装的动态库只需要显示调用即可。</p>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<p>1、<a class="link"   href="https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB" >函式庫<i class="fas fa-external-link-alt"></i></a><br>
2、<a class="link"   href="http://www.cnblogs.com/skynet/p/3372855.html" >C++静态库与动态库<i class="fas fa-external-link-alt"></i></a></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CMake构建Qt5工程指南</title>
    <url>/develop/cmake-create-qt5-project/</url>
    <content><![CDATA[<blockquote>
<p>下辈子，我要成为太阳。</p>
</blockquote>
<p>由于项目需求，需要使用一个GUI界面来操作音视频，选择使用Qt来实现这个简单的界面。由于项目需要跨平台，采用CMake来构建工程，所以Qt工程的构建也需要采用CMake。<span id="more"></span></p>
<h2 id="qt%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F" tabindex="-1">Qt文件的处理程序</h2>
<p>Qt会对某些文件进行特殊处理，我们使用CMake来生成Qt工程，必须要显式的处理这些文件。</p>
<ul>
<li>带有<code>Q_OBJECT</code>宏的头文件，需要被<code>moc</code>程序处理</li>
<li><code>.ui</code>界面设计文件，需要被<code>uic</code>程序处理</li>
<li><code>.qrc</code>资源文件，需要被<code>rcc</code>程序处理</li>
</ul>
<p>接下来，我们会看到，在CMake文件中，如何对上述三种文件进行针对性处理。</p>
<h2 id="%E7%94%9F%E6%88%90ui%E5%A4%B4%E6%96%87%E4%BB%B6" tabindex="-1">生成ui头文件</h2>
<p>GUI界面使用Qt Designer进行简单的设计，将设计的test.ui文件保存到工程目录中的<code>//form</code>下。</p>
<p>如果我们这儿不使用CMake，而直接使用Visual Studio，我们可以将ui文件添加到Visual Studio工程中，然后直接右键test.ui文件编译。Visual Studio会调用Qt的uic工具编译test.ui文件，进而生成ui_test.h头文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Uicing ..\..\..\form\test.ui...</span><br><span class="line">Generate ui_test.h</span><br></pre></td></tr></table></figure>
<p>考虑到跨平台，我们需要使用CMake来完成上述操作。CMake提供了<code>QT5_WRAP_UI</code>命令，该命令用来生成ui文件对应的头文件。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">FILE(GLOB FORMS &quot;form/*.ui&quot;)</span><br><span class="line">QT5_WRAP_UI(FORMS_UIC $&#123;FORMS&#125;)</span><br></pre></td></tr></table></figure>
<p><code>QT5_WRAP_UI</code>等价于下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uic –o ui_test.h test.ui</span><br></pre></td></tr></table></figure>
<h2 id="%E7%94%9F%E6%88%90moc%E3%80%81qrc%E5%A4%B4%E6%96%87%E4%BB%B6" tabindex="-1">生成moc、qrc头文件</h2>
<p>和生成ui头文件类似，CMake提供了<code>QT5_WRAP_UI</code>和<code>QT5_ADD_RESOURCES</code>两个命令来生成对应的头文件。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">FILE(GLOB MOCS &quot;inc/test.h&quot;)</span><br><span class="line">QT5_WRAP_CPP(HEADERS_MOC $&#123;MOCS&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">FILE(GLOB RES &quot;qrc/*.qrc&quot;)</span><br><span class="line">QT5_ADD_RESOURCES(RES_RCC $&#123;RES&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="%E5%B0%86%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD" tabindex="-1">将生成的文件添加到项目中</h2>
<p>这些生成的文件都被保存在<code>CMAKE_CURRENT_BINARY_DIR</code>文件中，为了使用这些文件，需要：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">INCLUDE_DIRECTORIES($&#123;CMAKE_CURRENT_BINARY_DIR&#125;)</span><br></pre></td></tr></table></figure>
<p>然后将这些文件添加到项目中：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ADD_EXECUTABLE(gui $&#123;FILES&#125; $&#123;HEADERS_MOC&#125; $&#123;FORMS_UIC&#125; $&#123;RES_RCC&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="%E4%BD%BF%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84qt%E6%A8%A1%E5%9D%97" tabindex="-1">使用更多的Qt模块</h2>
<p>如果想要在项目中使用其他的Qt模块，也必须要在CMake中显式的指明。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">SET(QT_USE_QTOPENGL TRUE)</span><br></pre></td></tr></table></figure>
<p>常用的模块包括下列：</p>
<ul>
<li>QT_USE_QTNETWORK</li>
<li>QT_USE_QTOPENGL</li>
<li>QT_USE_QTSQL</li>
<li>QT_USE_QTXML</li>
<li>QT_USE_QTSVG</li>
<li>QT_USE_QTTEST</li>
<li>QT_USE_QTDBUS</li>
<li>QT_USE_QTSCRIPT</li>
<li>QT_USE_QTWEBKIT</li>
<li>QT_USE_QTXMLPATTERNS</li>
<li>QT_USE_PHONON</li>
</ul>
<h2 id="%E9%A1%B9%E7%9B%AE%E9%93%BE%E6%8E%A5" tabindex="-1">项目链接</h2>
<p>github项目<a class="link"   href="https://github.com/JerkWisdom/pro-cmake" >pro-cmake<i class="fas fa-external-link-alt"></i></a>给出了使用cmake来构建项目的通用模板。其中gui文件夹中，给出了使用cmake来生成Qt5工程的示例。</p>
<h2 id="%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95" tabindex="-1">其他方法</h2>
<p>对于uic、moc、rcc操作，cmake还提供了<code>AUTOMOC</code>、<code>AUTOUIC</code>、<code>AUTORCC</code>三个操作，详情可以看参考文献<a class="link"   href="https://cmake.org/cmake/help/v3.0/manual/cmake-qt.7.html" >cmake-qt<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" tabindex="-1">参考链接</h2>
<ul>
<li><a class="link"   href="http://doc.qt.io/qt-5/cmake-manual.html" >Qt Documentation: Qt 5.7 CMake Manual<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://blog.csdn.net/jingwenlai_scut/article/details/5821928" >用CMake 构建Qt 项目<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://cmake.org/cmake/help/v3.0/manual/cmake-qt.7.html" >cmake-qt<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>视频像素格式YUV和RGB</title>
    <url>/develop/codec-yuv-rgb/</url>
    <content><![CDATA[<blockquote>
<p>失控</p>
</blockquote>
<p>黑白图像的每个像素只需要一个幅值表示其亮度即可，而彩色图像的每个像素至少需要三个值来表示其亮度和色度。所谓色彩空间就是表示彩色图像的亮度与色度的方法。常见的色彩空间包含RGB和YUV色彩空间，每个色彩空间通过不同的像素格式来存储图像。<span id="more"></span></p>
<h2 id="%E5%AE%9A%E4%B9%89" tabindex="-1">定义</h2>
<p>像素格式描述了像素数据存储所用的格式，定义了像素在内存中的编码方式。YUV和RGB为两种经常使用的像素格式。</p>
<p>RGB和YUV都是像素颜色编码方法，用于表示颜色，两者可以相互转化。<a class="link"   href="http://www.fourcc.org/" >FOURCC<i class="fas fa-external-link-alt"></i></a>网站给出了RGB和YUV两种格式的详细技术指南。</p>
<blockquote>
<p>FourCC：Four-Character Codes，代表四字符代码。它是一个32位uint_32的标示符，通过串联四个ASCII字符创建而成的，是一种独立标示视频数据流格式的四字符代码。每种YUV格式都指定了一个FOURCC码，它是视频播放软件通过查询FOURCC代码，并且寻找与FourCC代码相关联的视频解码器来播放特定的视频流。</p>
</blockquote>
<h2 id="yuv" tabindex="-1">YUV</h2>
<h3 id="yuv%E6%A6%82%E5%BF%B5" tabindex="-1">YUV概念</h3>
<p><code>YUV</code>(亦称YCrCb)是指将亮度参量Y和色度参量U/V分开表示的像素格式，主要用于优化彩色视频信号的传输，使其向后兼容老式黑白电视。UV像素格式来源于RGB像素格式，通过公式运算，YUV三分量可以还原出RGB，YUV的三个分量具体含义如下：</p>
<ul>
<li><code>Y</code>表示亮度(灰度值)，通过将RGB信号的特定部分叠加到一起来创建。</li>
<li><code>U/Cr</code>表示色调，反映了RGB输入信号红色部分与RGB信号亮度值之间的差异。</li>
<li><code>V/Cb</code>表示饱和度，反映的是RGB输入信号蓝色部分与RGB信号亮度值之同的差异。</li>
</ul>
<p>YUV将亮度信息<code>Y</code>与色彩信息<code>U/V</code>分离，没有<code>U/V</code>信息一样可以显示完整的图像，只不过是黑白的，这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/yuv-y-u-v.gif"
                        alt=""
                 ></p>
<h3 id="yuv%E9%87%87%E6%A0%B7" tabindex="-1">YUV采样</h3>
<p>YUV码流的存储格式与其采样方式密切相关，主流的采样方式有三种：YUV4:4:4，YUV4:2:2，YUV4:2:0。</p>
<p>以黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量，我们来看看这三种采样方式：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/yuv-sample.jpg"
                        alt=""
                 ></p>
<p>其中：</p>
<ul>
<li>YUV 4:4:4采样，每一个Y对应一组UV分量。</li>
<li>YUV 4:2:2采样，每两个Y共用一组UV分量。</li>
<li>YUV 4:2:0采样，每四个Y共用一组UV分量。</li>
</ul>
<p>我们以八个临近像素为单位来分析下这三种主流的采样格式，假设四个像素的YUV分量分别如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>0</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>U</mi><mn>1</mn></msub><msub><mi>V</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>2</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>3</mn></msub><msub><mi>U</mi><mn>3</mn></msub><msub><mi>V</mi><mn>3</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>4</mn></msub><msub><mi>U</mi><mn>4</mn></msub><msub><mi>V</mi><mn>4</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><msub><mi>U</mi><mn>5</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>6</mn></msub><msub><mi>U</mi><mn>6</mn></msub><msub><mi>V</mi><mn>6</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>7</mn></msub><msub><mi>U</mi><mn>7</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
[{Y}_{0}{U}_{0}{V}_{0}][{Y}_{1}{U}_{1}{V}_{1}][{Y}_{2}{U}_{2}{V}_{2}][{Y}_{3}{U}_{3}{V}_{3}] \\
[{Y}_{4}{U}_{4}{V}_{4}][{Y}_{5}{U}_{5}{V}_{5}][{Y}_{6}{U}_{6}{V}_{6}][{Y}_{7}{U}_{7}{V}_{7}]
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>1、YUV 4:4:4</p>
<p><code>YUV 4:4:4</code>三个信道的抽样率相同，因此在生成的图像里，每个像素的三个分量信息完整(每个分量通常8比特)，经过8比特量化之后，未经压缩的每个像素占用3个字节。采样后八个像素的YUV分量如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>0</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>U</mi><mn>1</mn></msub><msub><mi>V</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>2</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>3</mn></msub><msub><mi>U</mi><mn>3</mn></msub><msub><mi>V</mi><mn>3</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>4</mn></msub><msub><mi>U</mi><mn>4</mn></msub><msub><mi>V</mi><mn>4</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><msub><mi>U</mi><mn>5</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>6</mn></msub><msub><mi>U</mi><mn>6</mn></msub><msub><mi>V</mi><mn>6</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>7</mn></msub><msub><mi>U</mi><mn>7</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
[{Y}_{0}{U}_{0}{V}_{0}][{Y}_{1}{U}_{1}{V}_{1}][{Y}_{2}{U}_{2}{V}_{2}][{Y}_{3}{U}_{3}{V}_{3}] \\
[{Y}_{4}{U}_{4}{V}_{4}][{Y}_{5}{U}_{5}{V}_{5}][{Y}_{6}{U}_{6}{V}_{6}][{Y}_{7}{U}_{7}{V}_{7}]
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>采样后，八个像素总共占用8Y+8U+8V=8×3=24个字节。</p>
<p>2、YUV 4:2:2</p>
<p><code>YUV 4:2:2</code>每个色差信道的抽样率是亮度信道的一半。对非压缩的8bit量化的图像来说，每个由两个水平方向相邻的像素组成的宏像素需要占用4字节内存。采样后八个像素的YUV分量如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>0</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>2</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>3</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>3</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>4</mn></msub><msub><mi>U</mi><mn>4</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><msub><mi>U</mi><mn>4</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>6</mn></msub><msub><mi>U</mi><mn>6</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>7</mn></msub><msub><mi>U</mi><mn>6</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
[{Y}_{0}{U}_{0}{V}_{1}][{Y}_{1}{U}_{0}{V}_{1}][{Y}_{2}{U}_{2}{V}_{3}][{Y}_{3}{U}_{2}{V}_{3}] \\
[{Y}_{4}{U}_{4}{V}_{5}][{Y}_{5}{U}_{4}{V}_{5}][{Y}_{6}{U}_{6}{V}_{7}][{Y}_{7}{U}_{6}{V}_{7}]
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>采样后，八个像素总共占用8Y+8×0.5U+8×0.5V=8×3*2/3=16个字节。</p>
<p>3、YUV 4:2:0</p>
<p><code>YUV 4:2:0</code>并不是说没有V分量，而是指对于每一个行，只有一个U或者V分量。相邻的扫描行存储不同的色度分量，如果一行是4:2:0的话，下一行就是4:0:2，再下一行是4:2:0…以此类推。采样后八个像素的YUV分量如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>0</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>2</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>3</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>4</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><msub><mi>U</mi><mn>0</mn></msub><msub><mi>V</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>6</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>7</mn></msub><msub><mi>U</mi><mn>2</mn></msub><msub><mi>V</mi><mn>7</mn></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
[{Y}_{0}{U}_{0}{V}_{5}][{Y}_{1}{U}_{0}{V}_{5}][{Y}_{2}{U}_{2}{V}_{7}][{Y}_{3}{U}_{2}{V}_{7}] \\
[{Y}_{4}{U}_{0}{V}_{5}][{Y}_{5}{U}_{0}{V}_{5}][{Y}_{6}{U}_{2}{V}_{7}][{Y}_{7}{U}_{2}{V}_{7}]
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>采样后，八个像素总共占用8Y+2U+2Y=8×3*2/4=12个字节。</p>
<h3 id="yuv%E6%A0%BC%E5%BC%8F" tabindex="-1">YUV格式</h3>
<p>YUV存储格式有两大类：<code>打包(packed)格式</code>和<code>平面(planar)格式</code>。</p>
<ul>
<li>Planar YUV Formats：使用三个数组分开存放YUV三个分量，每个数组分别存储所有像素点的Y、U、V分量。</li>
<li>Packed YUV Formats：YUV分量存放在同一个数组中，通常是几个相邻的像素组成一个宏像素(macro-pixel)，每个像素点的Y、U、V是连续交错存储的。</li>
</ul>
<p>根据上面的两种存储格式，可以形成很多种YUV存储方式。有关Packed YUV Formats和Planar YUV Formats列表可以参考<a class="link"   href="http://www.fourcc.org/yuv.php" >FOURCC YUV pixel formats<i class="fas fa-external-link-alt"></i></a>。</p>
<p>下面我们简要介绍下YUV422的几种存储格式：</p>
<p>1、UYVY Packed YUV Format</p>
<p><code>UYVY</code>是YUV 4:2:2采样方式的一种存储格式，其FOURCC码为<code>0x59565955</code>。水平方向上每两个像素作为一个宏像素，第一个像素采集YUV三个分量，第二个像素只采集Y分量。其存储格式如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>U</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>U</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>3</mn></msub><mo stretchy="false">]</mo><msub><mi>U</mi><mn>4</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mn>4</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">
[{U}_{0}][{Y}_{0}][{V}_{0}][{Y}_{1}][{U}_{2}][{Y}_{2}][{V}_{2}][{Y}_{3}]{U}_{4}][{Y}_{5}][{V}_{4}][{Y}_{5}]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></eqn></section><p>按照UYVY格式，每个宏像素32位，每个像素16位。</p>
<p>2、YV16 Planar YUV Formats</p>
<p><code>YV16</code>是YUV 4:2:2采样方式的一种存储格式，其FOURCC码为<code>0x36315659</code>。其存储为三个二维数组：</p>
<ul>
<li>Y数组</li>
</ul>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{gather*}
[{Y}_{0,0}][{Y}_{0,1}]...[{Y}_{0,m-1}]\\
... \\
[{Y}_{n-1,0}][{Y}_{n-1,1}]...[{Y}_{n-1,m-1}]
\end{gather*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">...</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><ul>
<li>U数组</li>
</ul>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{gather*}
[{U}_{0,0}][{U}_{0,2}]...[{U}_{0,(m-1)/2}]\\
... \\
[{U}_{n-1,0}][{U}_{n-1,2}]...[{U}_{n-1,(m-1)/2}]
\end{gather*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">...</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>3、YUV422 Sem-Planar YUV Format</p>
<p>这种格式混合了Packed和Planar两种格式，其存储为两个二维数组：</p>
<ul>
<li>Y数组</li>
</ul>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{gather}
[{Y}_{0,0}][{Y}_{0,1}]...[{Y}_{0,m-1}]\\
... \\
[{Y}_{n-1,0}][{Y}_{n-1,1}]...[{Y}_{n-1,m-1}]
\end{gather}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">...</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span><span style="top:-3em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></eqn></section><ul>
<li>UV数组</li>
</ul>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mn>0</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mn>0</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">[</mo><msub><mi>U</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{gather*}
[{U}_{0,0}][{V}_{0,0}][{U}_{0,2}][{V}_{0,2}]...[{U}_{0,(m-1)/2}][{V}_{0,(m-1)/2}]\\
... \\
[{U}_{n-1,0}][{V}_{n-1,0}][{U}_{n-1,2}][{V}_{n-1,2}]...[{U}_{n-1,(m-1)/2}][{V}_{n-1,(m-1)/2}]
\end{gather*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">...</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord">...</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section><h2 id="rgb" tabindex="-1">RGB</h2>
<p>RGB色彩空间通过三原色（R、G、B）来表示图像。常见的RGB格式包含RGB24、ARGB32等。</p>
<h3 id="rgb24" tabindex="-1">RGB24</h3>
<p>RGB24是24位的颜色值，高八位为R、中间八位为G、低八位是B。</p>
<h3 id="argb32" tabindex="-1">ARGB32</h3>
<p>ARGB32是32位的颜色值。高八位为A，次八位为R，再次八位为G，最后八位为B。</p>
<h2 id="yuv%2Frgb-in-action" tabindex="-1">YUV/RGB in Action</h2>
<p><a class="link"   href="http://www.fourcc.org/fccyvrgb.php" >FOURCC YUV to RGB Conversion<i class="fas fa-external-link-alt"></i></a>给出了YUV和RGB相互转换公式。同时，Windows开发人员也需要详细阅读[Video Rendering with 8-Bit YUV Formats](<a class="link"   href="https://msdn.microsoft.com/zh-cn/library/aa904813%EF%BC%9A" >https://msdn.microsoft.com/zh-cn/library/aa904813：<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>本文讲述了在 Microsoft Windows 操作系统中呈现视频时推荐使用的 8 位 YUV 格式。本文讲述了可用于在 YUV 格式和 RGB 格式之间进行转换的技术，还提供了用于对 YUV 格式进行上采样的技术。本文适用于在 Windows 中使用 YUV 视频解码或呈现的所有人员。</p>
</blockquote>
<p>有关RGB/YUV视频像素数据的处理方法可以参考<a class="link"   href="http://blog.csdn.net/leixiaohua1020/article/details/50534150" >雷霄骅-视音频数据处理入门：RGB、YUV像素数据处理<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2>
<ul>
<li>1、<a class="link"   href="http://www.fourcc.org/" >FOURCC: Video Codecs and Pixel Format<i class="fas fa-external-link-alt"></i></a></li>
<li>2、<a class="link"   href="https://msdn.microsoft.com/zh-cn/library/aa904813" >Video Rendering with 8-Bit YUV Formats[原文]<i class="fas fa-external-link-alt"></i></a></li>
<li>3、<a class="link"   href="https://msdn.microsoft.com/zh-cn/library/ms867704.aspx" >使用8位YUV格式的视频呈现[译文]<i class="fas fa-external-link-alt"></i></a></li>
<li>4、<a class="link"   href="http://blog.csdn.net/leixiaohua1020/article/details/50534150" >视音频数据处理入门：RGB、YUV像素数据处理[雷霄骅]<i class="fas fa-external-link-alt"></i></a></li>
<li>5、<a class="link"   href="https://wikipedia.freehacker.cn" >FreeHacker’s Wikipedia<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Image</tag>
        <tag>Codec</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩</title>
    <url>/develop/color/</url>
    <content><![CDATA[<blockquote>
<p>赤橙黄绿青蓝紫，谁持彩练当空舞？</p>
</blockquote>
<p><strong>颜色</strong>或<strong>色彩</strong>是通过<a class="link"   href="https://zh.wikipedia.org/wiki/%E7%9C%BC" >眼<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://zh.wikipedia.org/wiki/%E8%84%91" >脑<i class="fas fa-external-link-alt"></i></a>和我们的生活经验所产生的一种对<a class="link"   href="https://zh.wikipedia.org/wiki/%E5%85%89" >光<i class="fas fa-external-link-alt"></i></a>的视觉效应。<span id="more"></span></p>
<h2 id="%E8%89%B2%E5%BD%A9%E5%AE%9A%E4%B9%89" tabindex="-1">色彩定义</h2>
<p>本文开头那句是维基百科对<a class="link"   href="https://en.wikipedia.org/wiki/Color" >色彩<i class="fas fa-external-link-alt"></i></a>的定义，直白来说就是：光给人的感觉。具体分为三个部分：</p>
<ul>
<li>光的属性：波粒二象性；</li>
<li>眼的成像：视网膜生理特性；</li>
<li>人的感觉：主观经验性。</li>
</ul>
<p>光的属性决定了色彩的物理特性，眼的成像决定了色彩的生理特性，人的感觉反映了色彩的心理特性。</p>
<h3 id="%E5%85%89%E7%9A%84%E5%B1%9E%E6%80%A7" tabindex="-1">光的属性</h3>
<p>目前科学界得出的结论是：光具有波动性，也具有粒子性。可见光是由光的波动性决定，人眼可以感受到的波长范围一般是落在390到700nm，具体每个颜色对应的光频率和波长如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><a class="link"   href="https://zh.wikipedia.org/wiki/%E9%A1%8F%E8%89%B2" >颜色<i class="fas fa-external-link-alt"></i></a></th>
<th style="text-align:center"><a class="link"   href="https://zh.wikipedia.org/wiki/%E9%A0%BB%E7%8E%87" >频率<i class="fas fa-external-link-alt"></i></a></th>
<th style="text-align:center"><a class="link"   href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E9%95%B7" >波长<i class="fas fa-external-link-alt"></i></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>紫色</strong></td>
<td style="text-align:center">668–789THz</td>
<td style="text-align:center">380–450nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>蓝色</strong></td>
<td style="text-align:center">631–668THz</td>
<td style="text-align:center">450–475nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>青色</strong></td>
<td style="text-align:center">606–630THz</td>
<td style="text-align:center">476–495nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>绿色</strong></td>
<td style="text-align:center">526–606THz</td>
<td style="text-align:center">495–570nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>黄色</strong></td>
<td style="text-align:center">508–526THz</td>
<td style="text-align:center">570–590nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>橙色</strong></td>
<td style="text-align:center">484–508THz</td>
<td style="text-align:center">590–620nm</td>
</tr>
<tr>
<td style="text-align:center"><strong>红色</strong></td>
<td style="text-align:center">400–484THz</td>
<td style="text-align:center">620–750nm</td>
</tr>
</tbody>
</table>
<p>可见光光谱在电磁谱中仅仅占据370nm的宽度，可见光光谱在电磁谱中的位置如下：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/spectrum.png"
                        
                 >
<p>到此，可以进一步的解决几个关键问题：</p>
<p>1、光谱中只有七种颜色，何来白色、黑色、灰色？</p>
<p>要回答这个问题，就要理解单色和混色。只包含一个波长的光源，被称为单色光源，然而大多数光源的光谱不是单色的，它们的光是由不同强度和波长的光混合组成的。可以将光谱中三原色的光：红色、蓝色和绿色按一定比例混合得到白光。光谱中所有可见光的混合也是白光。黑色、灰色也类似。</p>
<p>2、为什么有些物体是白色的，有些物体是黑色的？</p>
<p>这是由于该物体的物理特性决定的，一个反射所有波长的光的表面是白色的，而一个吸收所有波长的光的表面是黑色的，一个反射光色所处波长的表示是蓝色的。</p>
<h3 id="%E7%9C%BC%E7%9A%84%E6%88%90%E5%83%8F" tabindex="-1">眼的成像</h3>
<p>眼的成像由视网膜的生理特性决定，对视网膜有兴趣的可以参考维基百科<a class="link"   href="https://en.wikipedia.org/wiki/Retina" >Retina<i class="fas fa-external-link-alt"></i></a>。这里仅仅给出一个从相同色彩得出不同成像的例子。如下图：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/vision-liar.jpeg"
                        
                 >
<p>任意使用一个取色软件，你会发现A和B方格同为RGB(787878)。视网膜无法真实的反映光的原始特性。</p>
<h3 id="%E4%BA%BA%E7%9A%84%E6%84%9F%E8%A7%89" tabindex="-1">人的感觉</h3>
<p>如果此时你Google以下“色彩 感觉”，你会发现大多都是色彩对人的感觉的影响。但事实上人处于不同的心理时期，对同样的色彩会得到不同的体验。譬如，心情愉悦时，我们会觉得某个色情比较明亮，然而同样的色彩在我们不开心时，却显得十分昏暗。这是因为经过视网膜成像后的色彩，仍然需要经过大脑的处理。而对于颜色，大脑的主观心理特性远胜于客观事实特性。这也导致了所谓的色彩心理学。</p>
<h2 id="%E8%89%B2%E5%BD%A9%E5%B1%9E%E6%80%A7" tabindex="-1">色彩属性</h2>
<p>不论任何色彩，都具有三个基本的性质，一般称为<code>色彩三要素</code>或<code>色彩三属性</code>：色相（Hue）、彩度（Chroma）、明度（Value）。</p>
<h3 id="%E8%89%B2%E7%9B%B8" tabindex="-1">色相</h3>
<p>色相（Hue），又被称为色调，是用来区分色彩的首要特征，即依据不同波长的光来界定色彩的名字，如红、橙、黄、绿、蓝、紫。当我们描述色彩时，最常用<code>色相</code>来沟通，产生共鸣。改变色相比同等程度改变饱和度或亮度感受到的色彩变化要更大，所以被称为颜色最重要的特征。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-hue.jpg"
                        
                 >
<p>色相的确切定义为颜色等效光谱峰值的位置。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-spectrum-hue.png"
                        
                 >
<h3 id="%E5%BD%A9%E5%BA%A6" tabindex="-1">彩度</h3>
<p>彩度（Chroma），又被称为饱和度（Saturation）、色彩浓度，用来表示色彩的纯粹度或饱和度。彩度的高低，是以色彩中某种纯色的比例来分辨比较的，所以某一色彩加入到其他色彩时，彩度就会降低。要比较不同色彩间的彩度时，必须以指定某种纯色当依据才能比较。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-chroma.jpg"
                        
                 >
<p>彩度确切的定义是颜色等效光谱分布集中于波峰（色相）的程度，越集中其含颜色越少，饱和度越高。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-spectrum-chroma.png"
                        
                 >
<h3 id="%E6%98%8E%E5%BA%A6" tabindex="-1">明度</h3>
<p>明度（Value），英文中又称为Brightness、Lightness、Luma，用来表示色彩明暗的程度。比如，纯黄色比纯绿色来得明亮，纯黄色是明亮度高的色彩，而纯绿色是明亮度略低的色彩。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-value.jpg"
                        
                 >
<p>可以在同一色相色彩，以加入白色来提高明度；加入黑色来降低明度的方式，产生一系列的色彩变化，如浅红、淡红、亮红、暗红，即使红色不同的明度变化。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-value-red.jpg"
                        
                 >
<p>明度的确切定义是颜色等效光谱各色相心理强度之和。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-spectrum-value.png"
                        
                 >
<h2 id="%E8%89%B2%E5%BD%A9%E4%BD%93%E7%B3%BB" tabindex="-1">色彩体系</h2>
<p>色彩体系就是按人的视觉特点，使用规定的标号系统，把色彩按一定规则排列。这里我们仅仅分析色彩模型和色貌模型。</p>
<h3 id="%E8%89%B2%E5%BD%A9%E6%A8%A1%E5%9E%8B" tabindex="-1">色彩模型</h3>
<p><strong>色彩模型</strong>是描述使用一组值（通常使用三个、四个值或者<em>颜色成分</em>）表示<a class="link"   href="https://zh.wikipedia.org/wiki/%E9%A2%9C%E8%89%B2" >颜色<i class="fas fa-external-link-alt"></i></a>方法的抽象数学模型。例如<a class="link"   href="https://zh.wikipedia.org/wiki/%E4%B8%89%E5%8E%9F%E8%89%B2%E5%85%89%E6%A8%A1%E5%BC%8F" >三原色光模式<i class="fas fa-external-link-alt"></i></a>（RGB） 和<a class="link"   href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%88%B7%E5%9B%9B%E5%88%86%E8%89%B2%E6%A8%A1%E5%BC%8F" >印刷四分色模式<i class="fas fa-external-link-alt"></i></a>（CMYK） 都是色彩模型。色彩空间是色彩模型通过具体的映射函数的特定实现。</p>
<p>常用的色彩模型包含RGB、CMYK、HVS、HSL、YUV、YCbCr、YIQ等。RGB、CMYK是利用原色相混的比例表示的色彩模型；HVS、HSL、YUV、YCbCr、YIQ利用不同的概念表示的色彩模型。YUV、YCbCr、YIQ电视常用色彩模型，目前的大多数WebCam的输出图像也使用这种色彩模型。</p>
<p>1、RGB</p>
<p>RGB色彩模型包含三个分量：R（红）、G（绿）、B（蓝），是根据三原色制定的立方体直角坐标系色彩模型，是最常用的色彩模型。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-model-rgb.jpg"
                        
                 >
<p>2、CMYK</p>
<p>CMYK色彩模型包含四个分量：C（青）、M（洋红）、Y（黄）、K（黑），是根据反射光的减色原理制度的模型，主要用于印刷行业。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-model-cmyk.gif"
                        
                 >
<p>3、YUV、YCbCr、YIQ</p>
<p>YUV 是一种目的为把颜色的视觉亮度分离来建立的色彩空间，Y (Luminance) 代表颜色的视觉亮度，U、V 则是剩余的色彩分量。视觉亮度代表的是颜色在人实际感受的亮度，之所以不同是因为不同色相的颜色的视觉亮度是不同的，比如纯绿色和纯蓝色在人眼中纯绿色明显要亮很多。一般的 YUV 模型中红绿蓝的视觉亮度比是：0.299:0.587:0.114。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-model-luminance.png"
                        
                 >
<p>YCbCr 通常被当做 YUV 的另一种形式，相比 YUV， Cb 和 Cr 通道分别更向红、蓝偏移，而且通常进行压缩。YCbCr 常用在图像压缩领域，JPEG 图片内部的色彩空间就使用 YCbCr 模型。</p>
<p>YIQ 是另一种视觉亮度拆分模型，与 YUV 很相似，是 NTSC 彩色电视的标准。</p>
<p>三者的差别见下图：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-model-yuv.png"
                        
                 >
<h3 id="%E8%89%B2%E8%B2%8C%E6%A8%A1%E5%9E%8B" tabindex="-1">色貌模型</h3>
<p>色彩模型反映的是客观的色彩表现，色貌模型反映的是经过人的主观心理感受后的色彩表现。所以一个色貌模型应该能描述和预测不同光照、不同背景、不同观察条件下物体的色貌（色相、饱和度、明度等）。有关色貌模型可以参见维基百科<a class="link"   href="https://en.wikipedia.org/wiki/Color_appearance_model" >Color appearance model<i class="fas fa-external-link-alt"></i></a>。</p>
<h2 id="%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" tabindex="-1">色彩空间</h2>
<p>色彩模型和色彩空间必须要有一个映射函数，才能够在实际中使用。通过映射函数，我们给色彩模型确切的定义，进而得到了色彩空间，譬如：Adobe RGB、sRGB、CIE XYZ。映射函数生成颜色的某个完全子集——色域，色域与色彩模型一起定义一个新的色彩空间。</p>
<p><strong>色域</strong>是对一种颜色进行编码的方法，也指一个技术系统能够产生的颜色的总和。色域越大表示该色彩空间能够显示的颜色更多。</p>
<h3 id="%E5%9F%BA%E4%BA%8Ergb%E8%89%B2%E5%BD%A9%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" tabindex="-1">基于RGB色彩模型的色彩空间</h3>
<p>RGB色彩空间包含：Adobe RGB、sRGB、Apple RGB、ProPhoto RGB等，它们都是RGB色彩模式，经过特定的映射函数，生成的绝对RGB色彩空间。</p>
<p>下图反映的是不同RGB色彩空间色域的对比，Horseshoe Shape of Visible Color表示人眼可辩视色域：</p>
<ul>
<li><a class="link"   href="https://en.wikipedia.org/wiki/SRGB" >sRGB<i class="fas fa-external-link-alt"></i></a>为了适应更多的设备，是常用色彩空间中色域最小的色彩空间；</li>
<li><a class="link"   href="https://en.wikipedia.org/wiki/Adobe_RGB_color_space" >Adobe RGB<i class="fas fa-external-link-alt"></i></a>的开发目的是为了尽可能在<a class="link"   href="https://zh.wikipedia.org/wiki/CMYK" >CMYK<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%89%B2%E5%8D%B0%E5%88%B7" >彩色印刷<i class="fas fa-external-link-alt"></i></a>中利用计算机显示器等设备的<a class="link"   href="https://zh.wikipedia.org/wiki/RGB" >RGB<i class="fas fa-external-link-alt"></i></a>颜色模式上囊括更多的颜色，因此其色域较sRGB大很多，且完全包含sRGB色彩空间；</li>
<li><a class="link"   href="https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space" >ProPhoto RGB<i class="fas fa-external-link-alt"></i></a>是为了摄像领域专门设计的，为满足摄像的需求，其拥有极大的色域，甚至包含眼不可辩视色域范围。</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/color-space.png"
                        
                 >
<h3 id="cie-1931-xyz%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" tabindex="-1">CIE 1931 XYZ色彩空间</h3>
<p>CIE色彩空间的设计目的是构建一个可以描述和排列所有色彩的系统，采用数学方式来定义的色彩空间。CIE色彩空间利用视觉的三色刺激值的匹配实验得到色彩空间。更精确地说，首先先定义三种主要颜色（primary color），再利用颜色叠加模型，即可叙述各种颜色。在三色加色法模型中，如果某一种颜色和另一种混合了不同分量的三种原色的颜色，均使人类看上去是相同的话，我们把这三种原色的分量称作该颜色的三色刺激值。</p>
<p>CIE 1931 RGB色彩空间是基于RGB色彩模型的色彩空间，其使用RGB三原色作为三种主要颜色，然而使用实现中的三种颜色匹配出所有颜色，会导致CIE 1931 RGB 色彩空间里颜色的值出现了负数。因此在此基础上，CIE组织有提出了CIE 1931 XYZ色彩空间。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/cie1931-rgxy.png"
                        
                 >
<p><a class="link"   href="https://en.wikipedia.org/wiki/CIE_1931_color_space" >CIE 1931 XYZ<i class="fas fa-external-link-alt"></i></a>色彩空间定义三种现实中不存在的理想颜色作为三原色，通过数学变换将负的颜色分辨变为正的。具体的变化公式可以参考维基百科中描述。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/cie1931-xy.png"
                        
                 >
<p>CIE 1931 XYZ色彩空间是特殊的，因为它是基于人类<a class="link"   href="https://zh.wikipedia.org/wiki/%E9%A2%9C%E8%89%B2%E8%A7%86%E8%A7%89" >颜色视觉<i class="fas fa-external-link-alt"></i></a>的直接测定，并充当很多其他色彩空间的定义基础。</p>
<ul>
<li><a class="link"   href="https://en.wikipedia.org/wiki/SRGB" >sRGB<i class="fas fa-external-link-alt"></i></a>给出了从CIE xyY或者CIE XYZ到sRGB的变换；</li>
<li><a class="link"   href="https://en.wikipedia.org/wiki/Adobe_RGB_color_space" >Adobe RGB<i class="fas fa-external-link-alt"></i></a>给出了从CIE xyY或者CIE XYZ到Adobe RGB的变换。</li>
</ul>
<h3 id="%E5%9F%BA%E4%BA%8Eyuv%E8%89%B2%E5%BD%A9%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" tabindex="-1">基于YUV色彩模型的色彩空间</h3>
<p>YUV色彩空间主要用来表示电视信号。</p>
<p>在现代彩色电视系统中，通常采用三管彩色摄像机或彩色CCD(点耦合器件)摄像机，它把摄得的彩色图像信号，经分色、分别放大校正得到RGB，再经过矩阵变换电路得到亮度信号Y和两个色差信号R－Y、B－Y， 最后发送端将亮度和色差三个信号分别进行编码，用同一信道发送出去。这就是我们常用的YUV色彩空间。</p>
<p>采用YUV色彩空间的重要性是它的亮度信号Y和色度信号U、V是分离的。如果只有Y信号分量而没有U、V分量， 那么这样表示的图就是黑白灰度图。</p>
<h2 id="%E8%89%B2%E5%BD%A9%E9%87%8F%E5%8C%96" tabindex="-1">色彩量化</h2>
<p>sRGB和Adobe RGB色彩空间都可以根据CIE 1931 XYZ色彩空间为基准来计算。对于CIE 1931 XYZ色彩空间中的某个颜色[1, 1, 1]，如下图：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/cie1931-xy111.png"
                        
                 >
<p>其对应的各个色彩空间分量值如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">色彩空间</th>
<th style="text-align:center">分量1</th>
<th style="text-align:center">分量2</th>
<th style="text-align:center">分量3</th>
<th style="text-align:center">分量4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sRGB</td>
<td style="text-align:center">28.6</td>
<td style="text-align:center">24.6</td>
<td style="text-align:center">23.9</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Adobe RGB</td>
<td style="text-align:center">33.2</td>
<td style="text-align:center">30.7</td>
<td style="text-align:center">30.1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">CMY</td>
<td style="text-align:center">88.6%</td>
<td style="text-align:center">90.2%</td>
<td style="text-align:center">90.6%</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">CMYK</td>
<td style="text-align:center">0%</td>
<td style="text-align:center">13.8%</td>
<td style="text-align:center">17.2%</td>
<td style="text-align:center">88.6%</td>
</tr>
<tr>
<td style="text-align:center">Lab</td>
<td style="text-align:center">8.99</td>
<td style="text-align:center">1.84</td>
<td style="text-align:center">1.21</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">LCH</td>
<td style="text-align:center">8.99</td>
<td style="text-align:center">2.2</td>
<td style="text-align:center">33.23°</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>对于sRGB和Adobe RGB计算出来的分量实际是[0,1]区间的值，一个分量采用8位量化精度，也就是将计算出来的值乘以255然后取整，就得到我们通常所见的RGB[0~255, 0~255, 0~255]表示的色彩值。</p>
<p>通过上表的比较，我们会发现sRGB和Adobe RGB相同的RGB分量值表示的颜色其实是不同的。这是一个困惑我很久的问题——虽然sRGB和Adobe RGB都可以使用RGB24来表示，但同样的值表示的颜色并不相同，也就是Adobe RGB能够使用RGB24 16777216个精度值表示更多的颜色，而sRGB值能表示更少的颜色。</p>
<p>有关RGB和YUV相关的知识，请参考<a class="link"   href="http://www.freehacker.cn/media/codec-yuv-rgb/" >视频像素格式<i class="fas fa-external-link-alt"></i></a>一文。</p>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<ul>
<li><a class="link"   href="http://styletin.com/archives/535" >UI 设计知识库 [01] 色彩 · 理论<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://en.wikipedia.org/wiki/Color_space" >Color space<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.colortell.com/rgbto" >RGB颜色表转换<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Developing</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>头文件中定义变量</title>
    <url>/develop/cpp-define-variable-in-header-file/</url>
    <content><![CDATA[<blockquote>
<p>群体人性泯灭。</p>
</blockquote>
<p>有时候需要在头文件中定义一些变量，需要注意一些点来避免<code>重复定义</code>的错误。<span id="more"></span></p>
<h2 id="%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E4%BE%8B%E5%AD%90" tabindex="-1">一个错误的例子</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source1.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process1</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source2.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>编译上面代码，编译器会给出错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1&gt;Source2.obj : error LNK2005: <span class="string">&quot;int n::x&quot;</span> (?x@n@@3HA) already defined <span class="keyword">in</span> Source2.obj</span><br><span class="line">1&gt;...\Test.exe : fatal error LNK1169: one or more multiply defined symbols found</span><br></pre></td></tr></table></figure>
<p>出现上面错误是因为<code>source1.cpp</code>和<code>source2.cpp</code>都包含了头文件<code>test.h</code>，导致<code>int n::x</code>被重复定义。</p>
<h2 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" tabindex="-1">解决方案</h2>
<p>使用<code>extern</code>关键字将变量定义编程变量声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source1.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process1</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source2.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>编译上面一段代码是没有问题。在解决这个问题的基础上，我们考虑下下面的问题：</p>
<blockquote>
<p>哪些场景下，可以头文件中定义变量？</p>
</blockquote>
<h2 id="%E5%A4%B4%E6%96%87%E4%BB%B6%E9%87%8D%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E2%80%94%E2%80%94const%E5%8F%98%E9%87%8F" tabindex="-1">头文件重定义变量——const变量</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source1.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process1</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source2.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>在头文件中定义常变量并不会出现重定义问题，这是因为：</p>
<blockquote>
<p>默认情况下，const对象被设定为仅在文件内有效。</p>
</blockquote>
<p>当多个文件出现了同名的const变量时，其实等同于不同文件中分别定义了独立的变量。如果需要共享一个const变量，则需要使用extern关键词。</p>
<p>使用extern关键词，我们能在一个文件里定义const，在其他使用该变量的文件里声明const变量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source1.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process1</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source2.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%A4%B4%E6%96%87%E4%BB%B6%E9%87%8D%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E2%80%94%E2%80%94static%E5%8F%98%E9%87%8F" tabindex="-1">头文件重定义变量——static变量</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.h */</span></span><br><span class="line"><span class="keyword">namespace</span> n</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source1.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process1</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* source2.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>static变量和const变量类似，被多个源文件包含后其实是会存在多个独立的变量，static变量无法做到在多个源文件之间传递数据的效果。</p>
<h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h2>
<p>除了静态变量和常变量，不可以在头文件中定义变量，否则会导致重定义。在头文件中定义静态变量和常变量，其作用域会被限制在包含该头文件的源文件内。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈C++初始化</title>
    <url>/develop/cpp-initialization/</url>
    <content><![CDATA[<blockquote>
<p>失望，迷茫。</p>
</blockquote>
<p>C++中广义的对象，既可以是内置类型，也可以使自定义类型。对象的初始化并没有看起来那么简单，这里面的存在不少容易犯错的地方，下文会一一讲解。<span id="more"></span></p>
<h2 id="%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%A3%B0%E6%98%8E" tabindex="-1">定义与声明</h2>
<p>如果想声明一个对象而非定义它，则添加关键字<code>extern</code>，任何包含了显式初始化的声明即成为定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;            <span class="comment">/* declaration */</span></span><br><span class="line"><span class="type">int</span> j ;                  <span class="comment">/* definition */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> pi = <span class="number">3.14</span>; <span class="comment">/* definition */</span></span><br></pre></td></tr></table></figure>
<p>声明和定义主要考虑C++语言的分离式编译问题，如果要多个文件中使用同一个对象，就必须将声明和定义分离。对象的定义必须出现且只能出现在一个文件中，其他用到该对象的文件必须对其进行声明，却绝不能重复定义。</p>
<p>内置类型的声明和自定义类型的声明有一些差异。自定义类型支持前向声明，此时其为imcomplete类型，主要是作为函数的参数或者返回值类型，并且只能是该类的引用或者指针。</p>
<p>由于只有当类体完成后类才算定义完成，所以一个自定义类型不能有自己类型的数据成员。但是只要出现了类名，一个类就被声明了，所以一个类可以由自己类型的指针或者引用。</p>
<h2 id="%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">内置类型初始化</h2>
<p>对于内置类型变量的初始化，我们需要掌握两点：</p>
<ul>
<li>默认初始化</li>
<li>列表初始化</li>
</ul>
<p>默认初始化时，对象的初始值由其定义的位置决定。定义于任何函数之外的变量被初始化为0。定义于函数体内部的内置类型将不被初始化（局部静态变量除外），一个未被初始化的内置类型变量的值是未定义的，如果试图拷贝或以其他形式方位此类值将引发错误。</p>
<blockquote>
<p>为内置类型对象进行手工初始化，因为C++不保证初始化它们。</p>
</blockquote>
<p><strong>使用列表初始化来初始化内置类型对象，如果初始值存在丢失信息的风险，则编译器将报错。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> data2 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">data3</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> data4&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.1415926538</span>;</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;, b = &#123;ld&#125;; <span class="comment">/* error */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span>, d </span>= ld;</span><br></pre></td></tr></table></figure>
<h2 id="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">自定义类型初始化</h2>
<p>这里的自定义类型也就是类类型。相对于内置类型，自定义类型对象初始化会复杂很多，这是因为自定义类型的可能位于派生体系中，同时数据成员可能为const或者引用。</p>
<h3 id="%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8" tabindex="-1">初始化列表</h3>
<p>大家应该都知道，构造函数体内执行的是赋值操作，并非初始化操作，初始化发生在构造函数体执行之前——初始化列表中。</p>
<p>很多时候使用初始化列表是为了执行速度(减少一次拷贝操作)，下面两种情况除外：</p>
<ul>
<li>数据成员被const修饰</li>
<li>数据成员是对象的引用</li>
</ul>
<p>我们<strong>仅能在初始化列表中初始化const成员或者reference成员。</strong></p>
<blockquote>
<p>构造函数最好使用初始化列表，而不要在构造函数体内使用赋值操作。</p>
</blockquote>
<h3 id="%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F" tabindex="-1">初始化顺序</h3>
<p>自定义对象数据成员的初始化顺序，依照其在类定义中出现的顺序，基类更早于派生类被初始化。从全局看，变量的初始化顺序如下：</p>
<ul>
<li>基类的静态成员</li>
<li>派生类的静态成员</li>
<li>基类的成员变量</li>
<li>派生类的成员变量</li>
</ul>
<p>派生类的成员变量的初始化顺序是按照其在类中声明的顺序，而不是按照其在初始化列表中的顺序。同时，我们需要注意，静态成员在类定义时被初始化，并不由构造函数初始化。</p>
<h3 id="%E9%BB%98%E8%AE%A4%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">默认初始化</h3>
<p>自定义类型的默认初始化采用的是其默认构造函数，如果我们在定义类时没有显式定义默认构造函数，编译器会为我们合成一个默认的构造函数。</p>
<p>对于合成的默认构造函数，其按照如下规则初始化类的数据成员：</p>
<ul>
<li>如果存在类内的初始值，用它来初始化成员；</li>
<li>如果不存在类内的初始值，则默认初始化该成员。</li>
</ul>
<p>这就存在三个问题：</p>
<ul>
<li>只有当类没有声明任何构造函数时，编译器才会自动生成默认构造函数；但如果声明了其他构造函数，则必须定义自己的默认构造函数，因为编译器不在合成默认的构造函数。</li>
<li>类内内置类型被默认初始化，其值是未定义的。如果类包含有内置类型或者复合类型的成员，则只有当这些成员全部被赋予了类内的初始值时，这个类才适合于使用合成的默认构造函数。</li>
<li>类中包含一个其他类类型的成员，且这个成员的类型没有默认构造函数，那么编译器将无法初始化该成员。</li>
</ul>
<blockquote>
<p>我们建议：<strong>一个类必须要定义自己的默认构造函数，而不能依赖于合成的默认构造函数。</strong></p>
</blockquote>
<p>如果合成的默认构造函数就是我们需要的，我们也可以采用<code>=default</code>来要求编译器生成构造函数，完全等同于合成默认构造函数。</p>
<h3 id="%E5%B8%B8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">常对象的初始化</h3>
<p>常对象不能改变其内部的数据成员，从表面上看，这样我们就无法对齐进行初始化了。C++规定：</p>
<blockquote>
<p>当我们创建类的一个const对象时，直到构造函数完成初始化过程，对象才能真正取得其“常量”属性。</p>
</blockquote>
<p>所以，当我们定义一个常对象，我们可以再起构造函数内部执行一系列赋值操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">test</span>()&#123;x = <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> test t;</span><br></pre></td></tr></table></figure>
<h3 id="%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">静态成员初始化</h3>
<p>静态成员不是由类的构造函数初始化的。不能在类的内部初始化静态数据成员，**必须在类的外部定义和初始化静态成员，静态数据成员只能定义一次。**当在类外定义静态成员，<strong>不能重复static，该关键字只出现在类内部的声明语句。</strong></p>
<blockquote>
<p><strong>静态数据成员的定义(初始化)不应该被放在头文件中。</strong></p>
</blockquote>
<p>不要试图在头文件中定义(初始化)静态数据成员。在大多数的情况下，这样做会引起重复定义这样的错误。即使加上#ifndef #define #endif或者#pragma once也不行。</p>
<p>要想确保对象只定义一次，最好的办法是把静态数据成员的定义与其他非内联函数的定义放在同一个文件中。</p>
<blockquote>
<p>常静态成员是可以在类内声明的时候进行初始化。可以为静态成员提供const整数类型的类内初始值，但要求静态成员必须是字面值常量类型的constexpr。初始值必须是常量表达式。<br>
即使一个常量静态数据成员在类内部被初始化，通常情况下也应该在类的外部定义一下该成员。但不能在指定一个初始值。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">time</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> period=<span class="number">30</span> ; <span class="comment">/* period is const expression, here is statement not definition */</span></span><br><span class="line">    <span class="type">int</span> elems [period];  <span class="comment">/* error, if we don&#x27;t define period */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> time::period ; <span class="comment">/* cannot set initilization value here */</span></span><br></pre></td></tr></table></figure>
<h2 id="%E5%BB%B6%E8%BF%9F%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">延迟初始化</h2>
<p>延迟初始化是一个很有用的概念。一个对象的延迟初始化（也称延迟实例化）意味着该对象的创建将会延迟至第一次使用该对象时。延迟初始化主要用于提高性能，避免浪费计算，并减少程序内存要求。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazyInstance</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LazyInstance&amp; <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> LazyInstance instance;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，instance实例对象直到getInstance()函数被第一次调用时，才会进行初始化，对比下列代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazyInstance</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> LazyInstance instance;</span><br></pre></td></tr></table></figure>
<p>instance实例对象是静态成员，会在程序一开始调用默认构造函数初始化。</p>
<p>延迟初始化同时也解决了<code>跨编译单元中非局部静态成员的初始化次序不定</code>的问题——函数内局部静态对象会在第一次调用时被初始化。我们通过下列例子来说明该问题（摘自Effective C++）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* FileSystem.cpp */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::<span class="type">size_t</span> <span class="title">numDisks</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> FileSystem tfs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Directory.cpp */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Directory</span>(params);</span><br><span class="line">&#125;;</span><br><span class="line">Directory::<span class="built_in">Directory</span>(params)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="type">size_t</span> disks = tfs.<span class="built_in">numDisks</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Director <span class="title">dir</span><span class="params">(tfs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>由于FileSystem.cpp和Directory.cpp是两个编译单元，其初始化次序在C++标准中并没有被定义，我们无法确定tsf是否一定在dir初始化之前初始化。解决办法就是采用延迟初始化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;&#125;;</span><br><span class="line"><span class="function">FileSystem&amp; <span class="title">tfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> FileSystem fs;</span><br><span class="line">    <span class="keyword">return</span> fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> &#123;&#125;;</span><br><span class="line">Directory::<span class="built_in">Directory</span>(params)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="type">size_t</span> disks = <span class="built_in">tfs</span>().<span class="built_in">numDisks</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Directory&amp; <span class="title">dir</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> Directory td;</span><br><span class="line">    <span class="keyword">return</span> td;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%98%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">显式初始化</h3>
<p>自定义类型的单参数构造函数支持隐式初始化（隐式转换），但需要知道，隐式初始化只支持隐式一次，而不能像下面的例子一样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>(std ::string &amp;str );</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::string null_book = <span class="string">&quot;9-999-99999-9&quot;</span> ;</span><br><span class="line">Sales_data item ;</span><br><span class="line">item.<span class="built_in">combine</span> (null_book ); <span class="comment">/* ok */</span></span><br><span class="line">item.<span class="built_in">combine</span> (<span class="string">&quot;9-999-99999-9&quot;</span> ); <span class="comment">/* error */</span></span><br><span class="line">item.<span class="built_in">combine</span> (std ::<span class="built_in">string</span> (<span class="string">&quot;9-999-99999-9&quot;</span> )); <span class="comment">/* ok */</span></span><br></pre></td></tr></table></figure>
<p>&quot;9-999-99999-9&quot;可以隐式初始化为std::string，null_book能够隐式初始化为Sales_data，但是不能直接从&quot;9-999-99999-9&quot;隐式初始化为Sales_data。</p>
<p>使用explicit关键字可以显式抑制隐式初始化，这有时候就是我们需要的：</p>
<blockquote>
<p><strong><code>explicit</code>之所以被导入到C++，是为了提供程序员一种方法，使他们能够制止“单一参数的constructor”被当作一个conversion运算符。</strong></p>
</blockquote>
<p>标准库中用explicit修饰的构造函数如下：</p>
<ul>
<li>(1) 接受一个容量参数的vector构造函数是explicit的。</li>
<li>(2) 接受一个指针参数的shared_ptr(auto_ptr)构造函数是explicit的。</li>
<li>(3) 接受一个string参数的sstream构造函数是explicit的</li>
<li>(4) 接受一个string或C风格字符串参数的fstream构造函数是explicit的</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::auto_ptr &lt;<span class="type">int</span> &gt; <span class="built_in">ap1</span> (<span class="keyword">new</span> <span class="type">int</span> ); <span class="comment">/* ok */</span></span><br><span class="line">std::auto_ptr &lt;<span class="type">int</span> &gt; ap2 = <span class="keyword">new</span> <span class="built_in">int</span> (); <span class="comment">/* error */</span></span><br><span class="line"></span><br><span class="line">std::shared_ptr &lt;<span class="type">int</span> &gt; <span class="built_in">sp1</span> (<span class="keyword">new</span> <span class="type">int</span> ); <span class="comment">/* ok */</span></span><br><span class="line">std::shared_ptr &lt;<span class="type">int</span> &gt; sp2 = <span class="keyword">new</span> <span class="built_in">int</span> (); <span class="comment">/* error */</span></span><br><span class="line"></span><br><span class="line">std::vector &lt;<span class="type">int</span> &gt; <span class="built_in">v1</span> (<span class="number">3</span>); <span class="comment">/* ok */</span></span><br><span class="line">std::vector &lt;<span class="type">int</span> &gt; v1 = <span class="number">3</span>; <span class="comment">/* error */</span></span><br><span class="line"></span><br><span class="line">std::string stringvalues = <span class="string">&quot;125 320 512 750 333&quot;</span> ;</span><br><span class="line"><span class="function">std::istringstream <span class="title">iss1</span> <span class="params">(stringvalues )</span></span>; <span class="comment">/* ok */</span></span><br><span class="line">std::istringstream iss2 = stringvalues ; <span class="comment">/* error */</span></span><br><span class="line"></span><br><span class="line">std::string fileName = <span class="string">&quot;test.txt&quot;</span> ;</span><br><span class="line"><span class="function">std::fstream <span class="title">fs1</span> <span class="params">(fileName )</span></span>; <span class="comment">/* ok */</span></span><br><span class="line">std::fstream fs2 = fileName ; <span class="comment">/* ok */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>只能在类内声明构造函数时使用explicit关键字，在类外部定义时不应重复。</p>
</blockquote>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>有关字符串翻转reverse的思考</title>
    <url>/develop/cpp-reverse/</url>
    <content><![CDATA[<blockquote>
<p>孟子曰：“尽信《书》，则不如无《书》”</p>
</blockquote>
<p>陈硕Muduo一书第12章中提及“<strong>用异或交换变量是错误的</strong>”。校招面试的时候经常遇到这个问题，竟然没有深入思考这一点。<span id="more"></span></p>
<p>首先来看看翻转一个字符串的三种方法：</p>
<ul>
<li>方法一：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse_by_swap</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> *b = str;</span><br><span class="line">  <span class="type">char</span>* e = str + n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(b &lt; e) &#123;</span><br><span class="line">    <span class="type">char</span> t = *b;</span><br><span class="line">    *b = *e;</span><br><span class="line">    *e = t;</span><br><span class="line">    ++b;</span><br><span class="line">    --e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法二：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse_by_xor</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> *b = str;</span><br><span class="line">  <span class="type">char</span>* e = str + n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (b &lt; e) &#123;</span><br><span class="line">    *b ^= *e;</span><br><span class="line">    *e ^= *b;</span><br><span class="line">    *b ^= *e;</span><br><span class="line">    ++b;</span><br><span class="line">    --e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法三：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse_by_std</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  std::<span class="built_in">reverse</span>(str, str + n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用下面程序来测试三种方法耗时：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Timestamp ts;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i)</span><br><span class="line">    <span class="built_in">reverse_by_swap</span>(r, <span class="number">10</span>);</span><br><span class="line"><span class="type">int64_t</span> t1 = ts.<span class="built_in">elapsed</span>();</span><br><span class="line"></span><br><span class="line">ts.<span class="built_in">update</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i)</span><br><span class="line">    <span class="built_in">reverse_by_xor</span>(l, <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> t2 = ts.<span class="built_in">elapsed</span>();</span><br><span class="line"></span><br><span class="line">ts.<span class="built_in">update</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i)</span><br><span class="line">    std::<span class="built_in">reverse</span>(s, s+ <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> t3 = ts.<span class="built_in">elapsed</span>();</span><br><span class="line"><span class="built_in">logger</span>().<span class="built_in">info</span>(<span class="string">&quot;t1=&quot;</span> + std::<span class="built_in">to_string</span>(t1) + <span class="string">&quot; t2: &quot;</span> + std::<span class="built_in">to_string</span>(t2) + <span class="string">&quot; t3: &quot;</span> + std::<span class="built_in">to_string</span>(t3));</span><br></pre></td></tr></table></figure>
<p>测试的字符串分为长字符串和短字符串两种（样例随机选择，能够支持最后结论就好）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *str1 = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line"><span class="type">char</span> *str2 = <span class="string">&quot;012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>三种方法的时间耗时如下表，单位纳秒：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符串</th>
<th style="text-align:center">方法一</th>
<th style="text-align:center">方法二</th>
<th style="text-align:center">方法三</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">str1</td>
<td style="text-align:center">4960</td>
<td style="text-align:center">8928</td>
<td style="text-align:center">6447</td>
</tr>
<tr>
<td style="text-align:center">str2</td>
<td style="text-align:center">85311</td>
<td style="text-align:center">230144</td>
<td style="text-align:center">11904</td>
</tr>
</tbody>
</table>
<p>可以看出方法二的复杂度明显高于其他两个方法，以后在面试的时候可以让学生分析为什么会这样。对于方法一和方法三，在字符串较短时方法一更高效，字符串较长时方法三更高效。在网上搜了一圈，没看出<em>std::reverse</em>是怎么实现的。cppreference给出的可能实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> BidirIt&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(BidirIt first, BidirIt last)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ((first != last) &amp;&amp; (first != --last)) &#123;</span><br><span class="line">    std::<span class="built_in">iter_swap</span>(first++, last);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这三种方法的对比得出了几点结论：</p>
<ul>
<li>标准库的实现往往是最佳的选择；</li>
<li>深入思考打败人云亦云；</li>
<li>没有测试数据作证的揣测都是臆想；</li>
<li><em>premature optimization is the root of all evil</em>。</li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>智能指针二三事</title>
    <url>/develop/cpp-smartpointer-analysis/</url>
    <content><![CDATA[<p>C++11中引入智能指针，智能指针主要用来解决资源管理中遇到的各种问题。在引入智能指针之前，我们必须要操作裸指针，裸指针是导致内存问题的罪魁祸首——空悬指针、内存泄漏、分配失败等。一些著名的开源C项目，现在仍然还需要面临着一些由裸指针引起的内存问题。<span id="more"></span></p>
<p>如何使用智能指针能够轻易地在C++11标准中找到，如何用好智能指针却并不是那么简单。我们必须要清楚：</p>
<ul>
<li>智能指针解决了哪些问题？</li>
<li>智能指针引入了哪些问题？</li>
<li>智能指针使用存在哪些坑？</li>
</ul>
<h2 id="%E8%A7%A3%E5%86%B3" tabindex="-1">解决</h2>
<p>C++11标准库中，智能指针主要包含<em>unique_ptr</em>、<em>shared_ptr</em>、<em>weak_ptr</em>三种。这三种智能指针已经能够解决我们遇到的大多数问题。这些问题包含：</p>
<ul>
<li>内存泄漏</li>
<li>指针有效性检测</li>
<li>资源独占</li>
<li>多线程资源管理</li>
<li>跨dll资源管理</li>
</ul>
<h3 id="%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" tabindex="-1">内存泄漏</h3>
<p>智能指针能够实现自动垃圾回收（Automatic Garbage Collection），这有效的解决了程序中部分内存/资源泄漏问题。智能指针能够有效地防止由于程序<strong>异常</strong>而导致的资源泄漏。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object* p = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    p-&gt;<span class="built_in">doSomething</span>(); <span class="comment">/* throw exception */</span></span><br><span class="line">    <span class="keyword">delete</span> p;         <span class="comment">/* memory leak and resource leak in Object */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; p = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">    p-&gt;<span class="built_in">doSomething</span>(); <span class="comment">/* throw exception */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%8C%87%E9%92%88%E6%9C%89%E6%95%88%E6%80%A7%E6%A3%80%E6%B5%8B" tabindex="-1">指针有效性检测</h3>
<p>裸指针只能检测指针是否是nullptr，无法检测出指针指向的对象是否有效。而智能指针能够检测其所指向对象的有效性。</p>
<p>裸指针若不初始化，其值是一个随机值，也就是野指针，而智能指针会默认初始化为nullptr。编译器一般会对<strong>使用未初始化的野指针</strong>报错，若不报错我们则会面临程序奔溃、内存越界的风险。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* p;   <span class="comment">/* p为野指针 */</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span>* pp; <span class="comment">/* pp非野指针 */</span></span><br><span class="line">    std::shared_ptr&lt;<span class="type">char</span>&gt; sp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>裸指针指向的对象被销毁后，未将裸指针设置为nullptr，则裸指针称为空悬指针。出现空悬指针的情况如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    p = &amp;c;</span><br><span class="line">  &#125; <span class="comment">/* c释放，p为空悬指针 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> *p = <span class="keyword">new</span> <span class="built_in">char</span>();</span><br><span class="line">  <span class="keyword">delete</span> p; <span class="comment">/* p为空悬指针 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;num; <span class="comment">/* 返回一个空悬指针 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问空悬指针程序会抛出异常<em>write access violation</em>。而对智能指针，只有指针生命期结束或主动指向其他对象时，其所指向的对象才会被销毁（引用计数减一）。故而，智能指针不存在空悬指针问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::shared_ptr&lt;<span class="type">int</span>&gt; sp1 = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line">  sp1 = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>); <span class="comment">/* 对象释放后又重新构造一个对象，sp1可以继续使用 */</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; sp2 = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);  </span><br><span class="line">  &#125; <span class="comment">/* 对象释放，但也无法使用sp2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E8%B5%84%E6%BA%90%E7%8B%AC%E5%8D%A0" tabindex="-1">资源独占</h3>
<p>裸指针无法保证资源独占，可能会存在多个指针指向同一个对象，进而导致一些难以控制的问题。譬如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Object *p1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  Object *p2 = p1;</span><br><span class="line">  <span class="keyword">delete</span> p1;</span><br><span class="line">  *p2; <span class="comment">/* 空悬指针 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>智能指针中的<em>std::unique_ptr</em>能够独占资源所有权，某时某刻只有一个<em>std::unique_ptr</em>指向特定的对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::unique_ptr&lt;Object&gt; <span class="title">up1</span><span class="params">(<span class="keyword">new</span> Object())</span></span>;</span><br><span class="line">  std::unique_ptr&lt;Object&gt; up2 = up1; <span class="comment">/* error */</span></span><br><span class="line">  up2 = std::<span class="built_in">move</span>(up1); <span class="comment">/* up1转移所有权给up2，up1为nullptr */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86" tabindex="-1">多线程资源管理</h3>
<p>智能指针能够很好地解决多线程情况下对象析构问题。这是裸指针难以办到的。对于裸指针来说，如果一个线程要访问该指针，而另一个线程需要delete该指针，后果难以想象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">T</span>() &#123; <span class="comment">/* destruct resource in mutex */</span> &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; <span class="comment">/* update resource in mutex*/</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> T *t;</span><br><span class="line"><span class="comment">/* thread 1 */</span></span><br><span class="line"><span class="keyword">delete</span> t;</span><br><span class="line">t = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">/* thread 2 */</span></span><br><span class="line"><span class="keyword">if</span> (t) t-&gt;<span class="built_in">update</span>();</span><br></pre></td></tr></table></figure>
<p>即使有锁的保护，也无法避免程序出现问题，析构操作会将锁也析构了。对于智能指针来说，只要有线程访问持有对象的指针，则该对象不会被析构；如果对象要被析构，则所有线程都无法访问该指针。</p>
<h3 id="%E8%B7%A8dll%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86" tabindex="-1">跨dll资源管理</h3>
<p>某个dll模块如果想要向外界暴露内部资源的指针，如果采用裸指针，就需要注意资源是在内部释放，还是需要外部主动释放问题。一般情况下，我们遵循的原则是<strong>谁创建谁释放</strong>，然而这无法在语言层面上做到约束。对于需要内部释放的资源，如果外部主动释放了，则会导致重复释放。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RM</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Object* <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">  ~<span class="built_in">RM</span>() &#123; <span class="comment">/* destruct all Object */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">RM rm;</span><br><span class="line">Object* o = rm.<span class="built_in">get</span>(); </span><br><span class="line"><span class="keyword">delete</span> o; <span class="comment">/* error */</span></span><br></pre></td></tr></table></figure>
<p>对于智能指针来说，资源释放都是通过自动垃圾回收机制。使用该dll资源的用户无需关注是否需要释放资源。</p>
<h2 id="%E5%BC%95%E5%85%A5" tabindex="-1">引入</h2>
<p>智能指针有利有弊，最严重的问题是延长了对象的生命期。如果不采取特殊的做法，很难保证对象在我们想要析构的地方析构。同时，由于引入了引用计数，会增加拷贝的开销。</p>
<h3 id="%E5%BB%B6%E9%95%BF%E5%AF%B9%E8%B1%A1%E7%94%9F%E5%91%BD%E6%9C%9F" tabindex="-1">延长对象生命期</h3>
<p>由于智能指针<em>std::shared_ptr</em>延长了对象的生命期，所以在使用智能指针时需要明确一件事：在我们希望对象析构后，继续使用该对象没有副作用，否则必须要保证对象在我们想要析构时被析构。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::map&lt;<span class="type">uint32_t</span>, std::shared_ptr&lt;Object&gt;&gt; objects;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Object&gt; <span class="title">create</span><span class="params">(<span class="type">uint32_t</span> index)</span> </span>&#123;</span><br><span class="line">  std::shared_ptr&lt;Object&gt; po = std::<span class="built_in">make_shared</span>&lt;Object&gt;();</span><br><span class="line">  objects.<span class="built_in">emplace</span>(index, po);</span><br><span class="line">  <span class="keyword">return</span> po;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(<span class="type">uint32_t</span> index)</span> </span>&#123;</span><br><span class="line">  objects.<span class="built_in">erase</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* thread 1 */</span></span><br><span class="line"><span class="keyword">auto</span> po = <span class="built_in">create</span>(<span class="number">1</span>);</span><br><span class="line">po-&gt;<span class="built_in">doSomething</span>(); <span class="comment">/* make sure handle po is acceptable after try to destroy po */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* thread 2 */</span></span><br><span class="line"><span class="built_in">destroy</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>另一方面，我们无法确定对象在何地析构，也就意味着对象可能在关键线程析构，进而降低了系统的性能。为此，可以用一个单独的线程专门来做析构，通过一个*BlockingQueue&lt;std::shared_ptr<void >&gt;*把对象析构都转移到那个专用线程中。这种方法的前提就是程序必须要额外开启一条线程。</p>
<h3 id="%E5%A2%9E%E5%8A%A0%E6%8B%B7%E8%B4%9D%E5%BC%80%E9%94%80" tabindex="-1">增加拷贝开销</h3>
<p>智能指针的拷贝相对于裸指针多了引用计数的操作，同时可能还会加锁。所以会增加系统开销。大多数拷贝操作发生在传参，因此推荐使用引用传参方式来替换值传参。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">const</span> std::shared_ptr&lt;Object&gt; &amp;po)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="%E8%B8%A9%E5%9D%91" tabindex="-1">踩坑</h2>
<p>智能指针使用过程中难免会遇到一些坑点。本节记录一些注意事项，避免低级失误。</p>
<h3 id="unique_ptr%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">unique_ptr初始化</h3>
<p><em>std::unique_ptr</em>不支持拷贝和赋值。为<em>std::unique_ptr</em>赋初始值有两种方式：<em>new</em>操作和<em>std::make_unique</em>操作。使用这两种方式时都有需要注意的地方：</p>
<ul>
<li><em>std::unique_ptr</em>单参数版本的构造函数是<em>explicit</em>，所以不能使用*=*赋值；</li>
<li><em>std::make_unique</em>操作是C++14新特性，在某些编译器上是不支持的，在跨平台应用中使用该操作，需要确认是否所有平台都支持该操作。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;Object&gt; up = <span class="keyword">new</span> <span class="built_in">Object</span>(<span class="number">1</span>); <span class="comment">/* error */</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;Object&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> Object(<span class="number">1</span>))</span></span>;  <span class="comment">/* ok     */</span></span><br><span class="line">std::unique_ptr&lt;Object&gt; up = std::<span class="built_in">make_unique</span>&lt;Object&gt;(<span class="number">1</span>); <span class="comment">/* ok when compiler support */</span></span><br></pre></td></tr></table></figure>
<h3 id="unique_ptr%E9%99%B7%E9%98%B1" tabindex="-1">unique_ptr陷阱</h3>
<p>尽量不要将<em>std::unique_ptr</em>和裸指针混用。如果二者混用，会导致资源管理混乱，同时很有可能导致程序奔溃，内存泄漏：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Object *b = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">std::unique_ptr&lt;Object&gt; uo1, uo2;</span><br><span class="line">uo<span class="number">1.</span><span class="built_in">reset</span>(b);</span><br><span class="line">uo<span class="number">2.</span><span class="built_in">reset</span>(b); <span class="comment">/* uo1和uo2将指向同一个位置 */</span></span><br></pre></td></tr></table></figure>
<p><em>release</em>操作并不会释放对象的内存，其仅仅是返回一个指向被管理对象的指针，并释放<em>std::unique_ptr</em>的所有权。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;Object&gt; uo = std::<span class="built_in">make_unique</span>&lt;Object&gt;();</span><br><span class="line">Object* o = uo.<span class="built_in">release</span>();</span><br><span class="line"><span class="keyword">delete</span> o;</span><br></pre></td></tr></table></figure>
<h3 id="shared_ptr%E9%99%B7%E9%98%B1" tabindex="-1">shared_ptr陷阱</h3>
<p>尽量不要通过<em>std::shared_ptr</em>智能指针的<em>get</em>操作获取其指向对象的裸指针。一方面智能指针析构时其变成了空悬指针，另一方面如果不小心<em>delete</em>了裸指针，那么智能指针将会<em>ACCESS VIOLATION</em>。同时，如果你把获取的裸指针继续赋给智能指针的话，又将是一个严重的问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;Object&gt; so = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Object *o = so.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">delete</span> o;</span><br><span class="line">so-&gt;<span class="built_in">doSomething</span>(); <span class="comment">/* access violation */</span></span><br></pre></td></tr></table></figure>
<p>如果要使用智能指针的裸指针，要确保不能将该指针传递到模块外部，同时传递到内部时，也要保证内部对象在智能指针之前释放。</p>
<h2 id="%E5%AE%9E%E8%B7%B5" tabindex="-1">实践</h2>
<p>挖掘点智能指针实际使用过程中的实践经验。</p>
<h3 id="%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8" tabindex="-1">异常安全</h3>
<p>当使用<em>std::unique_ptr</em>需要注意异常问题。如下代码的执行顺序并不确定：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">f</span>(<span class="built_in">unique_ptr</span>&lt;T&gt;(<span class="keyword">new</span> T), <span class="built_in">function_may_throw</span>());</span><br></pre></td></tr></table></figure>
<p>当上述代码的执行顺序为：<em>new T</em>→*function_may_throw()<em>→</em>unique_ptr<T>(…)<em>时，当</em>function_may_throw()*抛出异常，则会导致内存泄漏。以下写法能够避免内存泄漏：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">f</span>(std::<span class="built_in">make_unique</span>&lt;T&gt;(), <span class="built_in">function_may_throw</span>());</span><br></pre></td></tr></table></figure>
<p>在C++17中对参数的执行顺序做了约束：</p>
<blockquote>
<p>The initialization of a parameter, including every associated value computation and side effect, is indeterminately sequenced with respect to that of any other parameter.</p>
</blockquote>
<p>也就意味上面那个不定执行顺序的代码，只可能有两种执行顺序：</p>
<ul>
<li>顺序一：<em>new T</em>→<em>unique_ptr<T>(…)<em>→</em>function_may_throw()</em></li>
<li>顺序二：<em>function_may_throw()<em>→</em>new T</em>→<em>unique_ptr<T>(…)</em></li>
</ul>
<p>这两种执行顺序都不存在异常安全问题了。不过要求编译器支持C++17。</p>
<blockquote>
<p>注意：<em>std::make_shared</em>和<em>std::make_unique</em>都是异常安全的。</p>
</blockquote>
<h3 id="%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8" tabindex="-1">线程安全</h3>
<p>对于智能指针，其引用计数增加/减少操作是线程安全的，并且是无锁的。但是其本身并非是线程安全的。因此在多线程访问的情况下，必须要一些同步措施。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;Object&gt; po = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">/* thread 1 */</span></span><br><span class="line">std::shared_ptr&lt;Object&gt; new_po;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">ScopedLock <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">  new_po = po; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* thread 2 */</span></span><br><span class="line">std::shared_ptr&lt;Object&gt; new_po = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">ScopedLock <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">  po = new_po;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E7%8B%AC%E5%8D%A0%E8%B5%84%E6%BA%90" tabindex="-1">独占资源</h3>
<p>当我们需要独占某个资源时，尽量使用<em>std::unique_ptr</em>，不要使用<em>std::shared_ptr</em>。这样可以避免<em>std::shared_ptr</em>所面临的生命期延长问题。同时，多个<em>std::shared_ptr</em>可以访问修改同一个对象，这在资源独占时是不可接受的。</p>
<p><em>std::shared_ptr</em>相对于<em>std::unqiue_ptr</em>资源开销更大，这是因为<em>std::shared_ptr</em>需要维护一个指向动态内存对象的线程安全的引用计数器。因此，资源独占时，首选<em>std::unique_ptr</em>智能指针。</p>
<h3 id="raii" tabindex="-1">RAII</h3>
<p>RAII，Resource Acquisition Is Initialization，资源获取时就是初始化时。在使用智能指针使尽量避免下面操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Object *o = <span class="keyword">new</span> Object;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Object&gt; <span class="title">po</span><span class="params">(o)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这要使用的缺陷在于：</p>
<ul>
<li>无法确保裸指针是否依然有效；</li>
<li>无法确保裸指针不会被二次赋给智能指针。</li>
</ul>
<h3 id="%E5%88%A0%E9%99%A4%E5%99%A8" tabindex="-1">删除器</h3>
<p>如果你使用智能指针管理的资源不是<em>new</em>分配的内存，记住传递给它一个删除器。注意使用*new []*分配的数组，也必须要使用删除器，否则会导致资源泄漏。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Object&gt; <span class="title">po</span><span class="params">(<span class="keyword">new</span> Object[<span class="number">10</span>], [](Object *o)&#123;<span class="keyword">delete</span>[]p&#125;)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Object&gt; <span class="title">po</span><span class="params">(<span class="keyword">new</span> Object[<span class="number">10</span>], default_deleter&lt;Object[]&gt;())</span></span>;</span><br></pre></td></tr></table></figure>
<p>需要注意，<em>std::unique_ptr</em>是支持管理数组的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;Object[]) <span class="built_in">uo</span>(<span class="keyword">new</span> A[<span class="number">10</span>]);</span><br></pre></td></tr></table></figure>
<p><em>std::unique_ptr</em>的删除器有两种实现方式：函数指针、类对象和lambda表达式。上文已经给出了lambda表达式的写法。下面给出其他两个的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CConnect</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">disconnect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleter</span><span class="params">(CConnect *obj)</span> </span>&#123;</span><br><span class="line">  obj-&gt;<span class="built_in">disconnect</span>();</span><br><span class="line">  <span class="keyword">delete</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::unique_ptr&lt;CConnect, <span class="title">decltype</span><span class="params">(Deleter)</span>*&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> CConnect, deleter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deleter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(CConnect *obj)</span> </span>&#123;</span><br><span class="line">    obj-&gt;<span class="built_in">disconnect</span>();</span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::unique_ptr&lt;CConnect, Deleter&gt; <span class="title">up1</span><span class="params">(<span class="keyword">new</span> CConnect)</span></span>;</span><br><span class="line"><span class="function">std::unique_ptr&lt;CConnect, Deleter&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> CConnect, up<span class="number">1.</span>get_deleter())</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8" tabindex="-1">循环引用</h3>
<p>使用<em>std::shared_ptr</em>时要避免循环引用。这也是<em>std::weak_ptr</em>存在的价值。建议在设计类时，如果不需要资源的所有权，而不要求控制对象的生命期时，使用<em>std::weak_ptr</em>替代<em>std::shared_ptr</em>。<em>std::weak_ptr</em>不存在延长对象生命期的问题。</p>
<p>循环引用的经典案例为列表，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  std::shared_ptr&lt;Node&gt; _pre;</span><br><span class="line">  std::shared_ptr&lt;Node&gt; _next;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n1</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line">n1-&gt;_next = n2;</span><br><span class="line">n2-&gt;_pre = n1;</span><br></pre></td></tr></table></figure>
<p>要想打破循环引用，则需要借助<em>std::weak_ptr</em>的力量，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  std::weak_ptr&lt;Node&gt; _pre;</span><br><span class="line">  std::weak_ptr&lt;Node&gt; _next;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n1</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line">n1-&gt;_next = n2;</span><br><span class="line">n2-&gt;_pre = n1;</span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;Node&gt; spn = n2-&gt;_pre.<span class="built_in">lock</span>();</span><br><span class="line"><span class="keyword">if</span> (spn) &#123;</span><br><span class="line">  spn-&gt;<span class="built_in">doSomething</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2>
<ul>
<li><a class="link"   href="http://ootips.org/yonat/4dev/smart-pointers.html" >Smart Pointers - What, Why, Which?<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://stackoverflow.com/questions/19472550/exception-safety-and-make-unique" >Exception safety and make_unique<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>C++构造函数语意学</title>
    <url>/develop/cpp-the-semantics-of-constructors/</url>
    <content><![CDATA[<p>作为一个C<ins>工程师，或多或少都读过不少C</ins>语言的书籍，或精品或残次，我记了很多笔记，这里整理出来自己对构造函数的理解。<span id="more"></span></p>
<h2 id="%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" tabindex="-1">默认构造函数</h2>
<p>默认构造函数既可以是用户自定义的，也可以是编译器合成出来的。编译器在需要的时候才会合成有意义的构造函数，其他时候合成构造函数不执行任何操作（C++对象模型里称此时实际上没有合成出来）。合成的默认构造函数是否有实际意义由是否是编译器需要而定。</p>
<p>1、非编译器需要<br>
类的数据成员是内置类型或合成类型，此时合成的默认构造函数是没有意义的，a和b的值将是内存上次被使用后的遗迹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">  int  a;</span><br><span class="line">  int* b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、编译器需要<br>
分为五种情况：类的数据成员是某个类的对象，且该类定义了默认构造函数；派生类的基类定义了默认构造函数；类声明或者继承了一个虚函数；类派生自一个含有虚基类的继承树；派生类虚继承于基类。此时合成的默认构造函数是有意义的。</p>
<p>情况一和二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public:</span><br><span class="line">  A() &#123; a = 1; &#125;; // 默认构造函数</span><br><span class="line">private:</span><br><span class="line">  int a;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">private:</span><br><span class="line">  A a; // 类的数据成员是类A的对象</span><br><span class="line">&#125;</span><br><span class="line">// 类C派生于A，A含有默认构造函数</span><br><span class="line">class C : public A &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>情况三、四：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void virfun() = 0;</span><br><span class="line">&#125;</span><br><span class="line">// 编译器会在每个B对象里合成一个虚表指针</span><br><span class="line">// 合成的默认构造函数会处理虚表指针，使其指向虚函数表</span><br><span class="line">class B : public A&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>情况五：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class X &#123; public: int i; &#125;</span><br><span class="line">class A : virtual public X &#123; &#125;</span><br><span class="line">class B : virtual public X &#123; &#125;</span><br><span class="line">class C : public A, public B &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>3、编译器需要和非编译器需要混合情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public:</span><br><span class="line">  A() &#123; a = 1; &#125;; // 默认构造函数</span><br><span class="line">private:</span><br><span class="line">  int a;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">private:</span><br><span class="line">  A   a; // 类的数据成员是类A的对象</span><br><span class="line">  int b; // b不会被初始化</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、自定义默认构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public:</span><br><span class="line">  A() &#123; a = 1; &#125;; // 默认构造函数</span><br><span class="line">private:</span><br><span class="line">  int a;</span><br><span class="line">&#125;;</span><br><span class="line">class B&#123;</span><br><span class="line">public:</span><br><span class="line">  // 虽然定义了默认构造函数，且没有初始化a</span><br><span class="line">  // a依旧可以用自己的默认构造函数初始化</span><br><span class="line">  B() &#123; b = 2; &#125;</span><br><span class="line">private:</span><br><span class="line">  A   a;</span><br><span class="line">  int b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>5、未定义默认构造函数<br>
如果已经定义了其他构造函数，编译器不会再合成默认构造函数，此时建议定义一个默认构造函数。</p>
<h2 id="%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" tabindex="-1">拷贝构造函数</h2>
<p>拷贝构造函数有三个使用场景：</p>
<ul>
<li>明确以一个对象的内容作为另外一个对象的初值</li>
<li>函数传参</li>
<li>函数返回值</li>
</ul>
<p>如果class没有声明一个拷贝构造函数，就会合成拷贝构造函数，如果class只做bitwise copy操作，合成的拷贝构造函数是没有意义的（C++对象模型说其其实没有被合成）；只有class不做bitwise copy操作，合成的拷贝构造函数才是有意的，真的被合成出来。有如下情况：</p>
<ul>
<li>当class内含一个member object而后者的class声明有一个copy constructor</li>
<li>当class继承自一个base class而后者有一个copy constructor</li>
<li>当class声明一个或多个virtual function，继承体系中执行拷贝构造会重设virtual table指针</li>
<li>当class派生自一个继承串联，其中有一个或多个虚基类，</li>
</ul>
<h2 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8" tabindex="-1">构造函数初始化列表</h2>
<p>构造函数初始化列表在构造函数体之前执行，负责类数据成员的初始化。如果没有定义初始化列表，在构造函数体执行会存在效率问题——此时相当于先使用初始化列表默认初始化数据成员，然后在函数体内执行拷贝操作。并且以下情况必须要列表初始化：</p>
<ul>
<li>const或者reference成员必须要列表初始化</li>
<li>没有默认构造函数的成员对象必须要列表初始化</li>
<li>基类没有默认构造函数必须要列表初始化。</li>
</ul>
<p>这里要注意一点，我们自己定义初始化列表时有可能不会在意其初始化顺序，实际上，类成员函数在初始化列表中初始化顺序是依照其在类定义中出现的顺序，基类数据成员的初始化早于派生类数据成员。这也就意味着，初始化列表中的数据成员的书写顺序和数据成员的真正初始化顺序无关，这是很重要的。看下面一段代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class X&#123;</span><br><span class="line">public:</span><br><span class="line">	X(int val) : j(val), i(j) &#123;&#125; //i的值未知</span><br><span class="line">private:</span><br><span class="line">	int i;</span><br><span class="line">	int j;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>编译器会对初始化列表一一处理，并可能重新排序，以反映出数据成员的声明次序，它会安插一些代码到构造函数体内，并置于任何构造函数内用户定义代码之前。</p>
<h2 id="explicit%E4%BF%AE%E9%A5%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" tabindex="-1">explicit修饰的构造函数</h2>
<p>explicit关键词是为了防止单参数的构造函数被当做一个conversion运算符。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>C++数据成员语意学</title>
    <url>/develop/cpp-the-semantics-of-data/</url>
    <content><![CDATA[<p>空类不空，本文通过分析C++类对象的大小、数据成员的绑定等来分析类的数据成员语意。<span id="more"></span></p>
<h2 id="%E7%A9%BA%E7%B1%BB%E7%9A%84%E5%A4%A7%E5%B0%8F" tabindex="-1">空类的大小</h2>
<p>为了使该类的对象能够在内存中配置独一无二的地址，编译器会安插一个char字符到空类内部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Empty&#123; &#125;; /* sizeof(Empty) == 1; */</span><br><span class="line">class EqualEmpty&#123; char x; &#125;;</span><br></pre></td></tr></table></figure>
<p>每一个类对象必须有足够的大小以容纳它所有的non-static数据成员，其大小和以下原因有关：</p>
<ul>
<li>由编译器自动加上的额外数据成员，用以支持某这些语言特性（空类、virtual特性）；</li>
<li>由于内存对齐的需要，需要增加额外的填充字节。</li>
</ul>
<p>下面给出C++面向对象模型中的经典例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class X&#123; &#125;;</span><br><span class="line">class Y : public virtual X&#123; &#125;;</span><br><span class="line">class Z : public virtual Y&#123; &#125;;</span><br><span class="line">class A : public Y, pulbic Z&#123; &#125;;</span><br></pre></td></tr></table></figure>
<p>不同的处理器在处理上面的例子表现出不同的结果，大致可以分为两类：</p>
<ul>
<li>针对empty virtual base class做了优化的编译器，例如Visual C++；</li>
<li>未针对empty virtual base class做出优化的编译器。</li>
</ul>
<h3 id="%E6%9C%AA%E9%92%88%E5%AF%B9empty-virtual-base-class%E5%81%9A%E5%87%BA%E4%BC%98%E5%8C%96%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8" tabindex="-1">未针对empty virtual base class做出优化的编译器</h3>
<p>Y or Z的大小 = sizeof(virtual base class pointer) + sizeof(char) + sizeof(3 bytes padding) = 8; // 1 char because Y or Z is empty<br>
A的大小 = sizeof(virtual base class pointer)*2 + sizeof(X’s char) + sizeof(3 bytes padding) = 12;</p>
<h3 id="%E9%92%88%E5%AF%B9empty-virtual-base-class%E5%81%9A%E4%BA%86%E4%BC%98%E5%8C%96%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8" tabindex="-1">针对empty virtual base  class做了优化的编译器</h3>
<p>Y or Z的大小 = sizeof(virtual base class pointer) = 4; // empty virtual base class X is regarded as the beginning of class Y and Z<br>
A的大小 = sizeof(virtual base class pointer)*2 = 8; // 1 char of class X is removed</p>
<h2 id="%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E7%BB%91%E5%AE%9A" tabindex="-1">数据成员的绑定</h2>
<p>对类成员函数本身的分析，会直到整个class的生命都出现了才开始，因此一个inline成员函数函数体内的数据成员的绑定操作会在整个class声明完成之后才发生。</p>
<p>如下例，X()函数返回的是数据成员x而不是，extern int x。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern int x;</span><br><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">  float X() const &#123; return x; &#125;</span><br><span class="line">private:</span><br><span class="line">  float x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于类成员函数的参数列表来说，上面的结论是不成立的，看看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern float _val;</span><br><span class="line">typedef int length;</span><br><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">  // length被编译器认为是global</span><br><span class="line">  // _val被决议为Point3d::val</span><br><span class="line">  void numble(length val) &#123; _val = val; &#125;</span><br><span class="line">  length numble() &#123; return _val; &#125;</span><br><span class="line">private:</span><br><span class="line">  // length应该在类的最前面声明</span><br><span class="line">  typedef float length;</span><br><span class="line">  length _val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数列表中的名称还是会在他们第一次遭遇时被适当地决议完成，故上面的成员函数中的length是global的，_val的类型是float。</p>
<h2 id="%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E5%AD%98%E5%8F%96" tabindex="-1">数据成员的存取</h2>
<h3 id="%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98" tabindex="-1">静态数据成员</h3>
<p>类的静态数据成员只有一个实体，其存取不会导致空间上或执行时间上的额外负担。</p>
<h3 id="%E9%9D%9E%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98" tabindex="-1">非静态数据成员</h3>
<p>非静态数据成员存在于每一个对象实体内部，通过隐含的this指针来存取。欲对一个非静态数据成员进行存取操作，编译器需要把对象起始地址加上数据成员的偏移量。对于每个类来说，该偏移量都能在编译时期获得。</p>
<h2 id="%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E5%9C%A8%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB%E4%B8%AD%E7%9A%84%E5%B8%83%E5%B1%80" tabindex="-1">数据成员在继承体系中的布局</h2>
<h3 id="%E5%8F%AA%E8%A6%81%E7%BB%A7%E6%89%BF%E4%B8%8D%E8%A6%81%E5%A4%9A%E6%80%81" tabindex="-1">只要继承不要多态</h3>
<p>单一继承而且没有虚函数存在，这个时候的内存布局相对来说是最简单的。来看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Point2d&#123;</span><br><span class="line">protected:</span><br><span class="line">  float x, y;</span><br><span class="line">&#125;;</span><br><span class="line">class Point3d: public Point2d&#123;</span><br><span class="line">protected:</span><br><span class="line">  float z;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>类Point2d和Point3d的内存布局如下：<br>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-single-inheritance-memory.png"
                         alt="数据布局：单一继承"
                 ></p>
<p>这种继承关系并没有带来额外的内存损耗，但是下面的例子为了表现类体系之抽象化，由于内存对齐浪费了很多内存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class x&#123;</span><br><span class="line">private:</span><br><span class="line">  int val;</span><br><span class="line">  char bit1;</span><br><span class="line">  char bit2;</span><br><span class="line">  char bit3;</span><br><span class="line">&#125;;</span><br><span class="line">class a&#123;</span><br><span class="line">private:</span><br><span class="line">  int val;</span><br><span class="line">  char bit1;</span><br><span class="line">&#125;;</span><br><span class="line">class b : public a&#123;</span><br><span class="line">private:</span><br><span class="line">  char bit2;</span><br><span class="line">&#125;</span><br><span class="line">class c : public b&#123;</span><br><span class="line">private:</span><br><span class="line">  char bit3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类x、a、b、c的内存布局如下：<br>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-single-inheritance-memory-alignment.png"
                         alt="数据布局：单一继承并内存对齐"
                 ></p>
<p>为什么会不把多余的填充字节去掉呢？如果把派生类成员和基类子对象捆绑在一起，除去填充字节会发生什么？这个时候如果派生类对象给其基类子对象进行复制操作时会破坏派生类数据成员。<br>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-single-inheritance-memory-merge.png"
                         alt="数据布局：单一继承并去除填充字节"
                 ></p>
<p>如上图所示，如果对b的基类子对象进行复制操作，bit2的值一定会被填充字节破坏掉。</p>
<h3 id="%E5%B8%A6%E6%9C%89%E5%A4%9A%E6%80%81%E7%9A%84%E7%BB%A7%E6%89%BF" tabindex="-1">带有多态的继承</h3>
<p>多态给类带来空间和存取时间的额外负担：</p>
<ul>
<li>虚表virtual table</li>
<li>虚表指针vptr</li>
<li>constructor需要为vptr设定初值</li>
<li>destructor需要析构vptr</li>
</ul>
<p>请看下例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Point2d&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual float Z() const;</span><br><span class="line">protected:</span><br><span class="line">  float x, y;</span><br><span class="line">&#125;;</span><br><span class="line">class Point3d: public Point2d&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual float Z() const;</span><br><span class="line">protected:</span><br><span class="line">  float z;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上例中引入了虚函数，C++标准没有规定虚函数指针在内存布局中的位置，这都是由编译器决定。Point2d和Point3d这种单一继承并含有虚函数情况下的内存布局如下：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-single-inheritance-with-vptr-memory.png"
                         alt="数据布局：单一继承并含虚拟函数"
                 >
<h3 id="%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" tabindex="-1">多重继承</h3>
<p>多重继承的问题主要发生于派生类和其第二个或后继的基类对象之间的转换，考虑下面的继承体系。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-multiple-inheritance.png"
                         alt="多重继承体系"
                 >
<p>其内存布局如下：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-multiple-inheritance-memory.png"
                         alt="数据布局：多重继承"
                 >
<h3 id="%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF" tabindex="-1">虚拟继承</h3>
<p>考虑如下继承体系：<br>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-virtual-inheritance.png"
                         alt="虚拟继承体系"
                 ></p>
<p>其内存布局如下：<br>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/the-semantics-of-data-virtual-inheritance-memory.png"
                         alt="内存布局：虚拟继承体系"
                 ></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>C++并发编程0——欢迎来到多线程的世界</title>
    <url>/develop/cpp-thread-hello-world/</url>
    <content><![CDATA[<blockquote><p>在所有弱点中，最大的弱点是害怕暴露弱点。</p>
<footer><strong>J.B. Bossuet</strong><cite>Politics from Holy Writ</cite></footer></blockquote>
<p>C++11中引入了多线程编程，一般教科书中都没有涉及到这个概念，但是在工作中多线程却又是必不可少的。<span id="more"></span>本文会展示最基本的Hello World, Concurrency程序。</p>
<h2 id="%E6%A6%82%E8%BF%B0" tabindex="-1">概述</h2>
<p>C<ins>11之后，多线程终于被支持了，C</ins>开发者再也不需要借助boost等第三方库的力量，来实现跨平台的并行编程。语言层面上的支持，能够让开发者更加专注于业务逻辑，从而减少对系统平台的关注。C<ins>11多线程的引入，让C</ins>编程更加高效和简便。</p>
<p>最近一直研究多线程编程，忽然有感，如果我每掌握一个知识点，便分享出来，这比我蒙头死学更加高效。如果我的使用不正确，也有机会被指出来。所以便想整理网络或者书籍上所能学到的东西，写一个教程出来，力求能让刚入门不久的C++开发者，也能轻松的掌握并发编程的奥妙。</p>
<p>本教程不涉及太多原理性东西，需要那些知识的可以百度，或者买本《C<ins>并发编程实战》，网路上或书籍里原理性的东西已经够多了，我想写的是让读者看完之后，能够很轻松的知道，该怎么用C</ins>的多线程机制。其中，很多内容都是来自网路或者书籍上，感谢各位大神慷慨的分享。</p>
<p>如果没有特殊提及，本教程的所以代码都是基于Visual Studio 2013，如果更换其他编译器有可能无法运行。</p>
<h2 id="hello-world" tabindex="-1">Hello World</h2>
<p>经典的Hello World式开端。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">void hello()</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; &quot;Hello world, concurrency&quot; &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	std::thread t(hello);</span><br><span class="line">	t.join(); /* 没有这句话，会Debug Error的 */</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码很简单，如果用过boost多线程编程，那么应该对这个了如指掌了。首先包含线程库头文件<thread>，然后定义一个线程对象t，线程对象负责管理以hello()函数作为初始函数的线程，join()等待线程函数执行完成——这儿是阻塞的。</p>
<p>这个最简单的Hello World已经包含了多线程编程的基本结构，至于线程管理、数据共享、线程同步、原子操作，以及一系列进阶操作都会在后面详细阐述。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>C++并发编程1——让我们开始管理线程</title>
    <url>/develop/cpp-thread-manager/</url>
    <content><![CDATA[<blockquote><p>全体动物皆属平等，<br>
但有些动物比其他动物更加平等。</p>
<footer><strong>乔治·奥威尔</strong><cite>动物农庄</cite></footer></blockquote>
<p>从本文开始，我们会学习到线程的基本使用方式，本文是多线程开发的基础。<span id="more"></span></p>
<h2 id="%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B" tabindex="-1">创建线程</h2>
<p>上文中的经典hello world例子使用了最基本的线程创建方法，也是我们最常用的方法。std::thread对象的构造参数需要为Callable Object，可以是函数、函数对象、类的成员函数或者是Lambda表达式。接下来我们会给出这四种创建线程的方法。</p>
<h3 id="%E4%BB%A5%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0" tabindex="-1">以函数作为参数</h3>
<p>上文中的Hello C++ Concurrency程序，就是最好的以函数为参数构造std::thread的例子，这里不再赘述。</p>
<h3 id="%E4%BB%A5%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0" tabindex="-1">以函数对象作为参数</h3>
<p>函数对象利用了C++类的调用重载运算符，实现了该重载运算符的类对象可以当成函数一样进行调用。如下例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hello</span>()&#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hello h;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(h)</span></span>;</span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要<strong>注意一点</strong>：如果需要直接传递临时的函数对象，C++编译器会将std::thread对象构造解析为函数声明：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(hello())</span></span>; <span class="comment">/* error, compile as std::thread t2(hello(*)()); */</span></span><br><span class="line"><span class="function">std::thread <span class="title">t3</span><span class="params">((hello()))</span></span>; <span class="comment">/* ok */</span></span><br><span class="line">std::thread t4&#123; <span class="built_in">hello</span>() &#125;; <span class="comment">/* ok */</span></span><br><span class="line">t<span class="number">2.</span><span class="built_in">join</span>();   <span class="comment">/* compile error: expression must have class type */</span></span><br><span class="line">t<span class="number">3.</span><span class="built_in">join</span>();   <span class="comment">/* ok */</span></span><br><span class="line">t<span class="number">4.</span><span class="built_in">join</span>();   <span class="comment">/* ok */</span></span><br></pre></td></tr></table></figure>
<h3 id="%E4%BB%A5%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0" tabindex="-1">以类的成员函数作为参数</h3>
<p>为了作为std::thread的构造参数，<strong>类的成员函数名必须唯一</strong>，在下例中，如果world1()和world2()函数名都是world，则编译出错，这是因为名字解析发生在参数匹配之前。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hello</span>()&#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">world1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">world2</span><span class="params">(std::string text)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello world, &quot;</span> &lt;&lt; text &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hello h;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(&amp;hello::world1, &amp;h)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(&amp;hello::world2, &amp;h, <span class="string">&quot;lee&quot;</span>)</span></span>;</span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E4%BB%A5lambda%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0" tabindex="-1">以lambda对象作为参数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::thread t([](std::string text)&#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;hello world, &quot; &lt;&lt; text &lt;&lt; std::endl;</span><br><span class="line">    &#125;, &quot;lee&quot;);</span><br><span class="line">    t.join();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建线程对象时需要切记，使用一个能访问局部变量的函数去创建线程是一个糟糕的注意。</p>
</blockquote>
<h2 id="%E7%AD%89%E5%BE%85%E7%BA%BF%E7%A8%8B" tabindex="-1">等待线程</h2>
<p>join()等待线程完成，只能对一个线程对象调用一次join()，因为调用join()的行为，负责清理线程相关内容，如果再次调用，会出现<code>Runtime Error</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">([]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    std::cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">t.<span class="built_in">join</span>(); <span class="comment">/* ok */</span></span><br><span class="line">t.<span class="built_in">join</span>(); <span class="comment">/* runtime error */</span></span><br><span class="line"><span class="keyword">if</span>(t.<span class="built_in">joinable</span>())</span><br><span class="line">&#123;</span><br><span class="line">    t.<span class="built_in">join</span>(); <span class="comment">/* ok */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对join()的调用，需要选择合适的调用时机。如果线程运行之后父线程产生异常，在join()调用之前抛出，就意味着这次调用会被跳过。解决办法是，<strong>在无异常的情况下使用join()——在异常处理过程中调用join()</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">([](std::string text)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout &lt;&lt; <span class="string">&quot;hello world, &quot;</span> &lt;&lt; text &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;, <span class="string">&quot;lee&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="built_in">joinable</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面并非解决这个问题的根本方法，如果其他问题导致程序提前退出，上面方案无解，最好的方法是所谓的RAII。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">thread_guard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">thread_guard</span><span class="params">(std::thread &amp;<span class="type">_t</span>)</span></span></span><br><span class="line"><span class="function">        : t(std::move(_t))</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(!t.<span class="built_in">joinable</span>())</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;No Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thread_guard</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">joinable</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            t.<span class="built_in">join</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">thread_guard</span>(thread_guard <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    thread_guard&amp; <span class="keyword">operator</span>=(thread_guard <span class="type">const</span> &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::thread t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread_guard <span class="title">guard</span><span class="params">(std::thread([](std::string text)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout &lt;&lt; <span class="string">&quot;hello world, &quot;</span> &lt;&lt; text &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;, <span class="string">&quot;lee&quot;</span>))</span></span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%88%86%E7%A6%BB%E7%BA%BF%E7%A8%8B" tabindex="-1">分离线程</h2>
<p>detach()将子线程和父线程分离。分离线程后，可以避免异常安全问题，即使线程仍在后台运行，分离操作也能确保std::terminate在std::thread对象销毁时被调用。</p>
<p>通常称分离线程为守护线程（deamon threads），这种线程的特点就是长时间运行；线程的生命周期可能会从某一个应用起始到结束，可能会在后台监视文件系统，还有可能对缓存进行清理，亦或对数据结构进行优化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">([](std::string text)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout &lt;&lt; <span class="string">&quot;hello world, &quot;</span> &lt;&lt; text &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;, <span class="string">&quot;lee&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t.<span class="built_in">joinable</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        t.<span class="built_in">detach</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(!t.<span class="built_in">joinable</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中使用到了<code>joinable()</code>函数，不能对没有执行线程的std::thread对象使用detach()，必须要使用joinable()函数来判断是否可以加入或分离。</p>
<h2 id="%E7%BA%BF%E7%A8%8B%E4%BC%A0%E5%8F%82" tabindex="-1">线程传参</h2>
<p>正常的线程传参是很简单的，但是需要记住下面一点：**默认情况下，即使我们线程函数的参数是引用类型，参数会先被拷贝到线程空间，然后被线程执行体访问。**上面的线程空间为线程能够访问的内部内存。我们来看下面的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i,std::string <span class="type">const</span>&amp; s)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(f,<span class="number">3</span>,”hello”)</span></span>;</span><br></pre></td></tr></table></figure>
<p>即使f的第二个参数是引用类型，字符串字面值&quot;hello&quot;还是被拷贝到线程t空间内，然后被转换为std::string类型。在上面这种情况下不会出错，但是在下面这种参数为指向自动变量的指针的情况下就很容易出错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i,std::string <span class="type">const</span>&amp; s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oops</span><span class="params">(<span class="type">int</span> some_param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;%i&quot;</span>,some_param);</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(f,<span class="number">3</span>,buffer)</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，指针变量buffer将会被拷贝到线程t空间内，这个时候很可能函数oops结束了，buffer还没有被转换为std::string，这个时候就会导致未定义行为。解决方案如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i,std::string <span class="type">const</span>&amp; s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">not_oops</span><span class="params">(<span class="type">int</span> some_param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%i&quot;</span>,some_param);</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(f,<span class="number">3</span>,std::string(buffer))</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于上面所说，进程传参时，参数都会被进行一次拷贝，所以即使我们将进程函数参数设为引用，也只是对这份拷贝的引用。我们对参数的操作并不会改变其传参之前的值。看下面例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_data_for_widget</span><span class="params">(widget_id w,widget_data&amp; data)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oops_again</span><span class="params">(widget_id w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    widget_data data;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(update_data_for_widget,w,data)</span></span>;</span><br><span class="line">    <span class="built_in">display_status</span>();</span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">    <span class="built_in">process_widget_data</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程t执行完成之后，data的值并不会有所改变，process_widget_data(data)函数处理的就是一开始的值。我们需要显示的声明引用传参，使用std::ref包裹需要被引用传递的参数即可解决上面问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_data_for_widget</span><span class="params">(widget_id w,widget_data&amp; data)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oops_again</span><span class="params">(widget_id w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    widget_data data;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(update_data_for_widget,w,std::ref(data))</span></span>;</span><br><span class="line">    <span class="built_in">display_status</span>();</span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">    <span class="built_in">process_widget_data</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于可以移动不可拷贝的参数，譬如std::unqiue_ptr对象，<strong>如果源对象是临时的，移动操作是自动执行的；如果源对象是命名变量，必须显式调用std::move函数</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">process_big_object</span><span class="params">(std::unique_ptr&lt;big_object&gt;)</span></span>;</span><br><span class="line"><span class="function">std::unique_ptr&lt;big_object&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> big_object)</span></span>;</span><br><span class="line">p-&gt;<span class="built_in">prepare_data</span>(<span class="number">42</span>);</span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(process_big_object,std::move(p))</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="%E8%BD%AC%E7%A7%BB%E7%BA%BF%E7%A8%8B%E6%89%80%E6%9C%89%E6%9D%83" tabindex="-1">转移线程所有权</h2>
<p>std::thread是可移动的，不可拷贝。在std::thread对象之间转移线程所有权使用sd::move函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_other_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(some_function)</span></span>;           <span class="comment">/*  1  */</span></span><br><span class="line">std::thread t2=std::<span class="built_in">move</span>(t1);            <span class="comment">/*  2  */</span></span><br><span class="line">t1=std::<span class="built_in">thread</span>(some_other_function);     <span class="comment">/*  3 临时对象会隐式调用std::move转移线程所有权 */</span></span><br><span class="line">std::thread t3;                          <span class="comment">/*  4  */</span></span><br><span class="line">t3=std::<span class="built_in">move</span>(t2);                        <span class="comment">/*  5  */</span></span><br><span class="line">t1=std::<span class="built_in">move</span>(t3);                        <span class="comment">/*  6 赋值操作将使程序崩溃  */</span></span><br><span class="line">t<span class="number">1.</span><span class="built_in">detach</span>();</span><br><span class="line">t1=std::<span class="built_in">move</span>(t3);                        <span class="comment">/*  7 ok  */</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意的是<strong>临时对象会隐式调用std::move转移线程所有权</strong>，所以*t1=std::thread(some_other_function);*不需要显示调用std::move。如果需要析构thread对象，必须等待join()返回或者是detach()，同样，如果需要转移线程所有权，必须要等待接受线程对象的执行函数完成，不能通过赋一个新值给std::thread对象的方式来&quot;丢弃&quot;一个线程。第6点中，t1仍然和some_other_function联系再一次，所以不能直接转交t3的所有权给t1。</p>
<p>std::thread支持移动，就意味着线程的所有权可以在函数外进行转移。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">thread</span>(some_function);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">some_other_function</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(some_other_function,<span class="number">42</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当所有权可以在函数内部传递，就允许std::thread实例可作为参数进行传递。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(std::thread t)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="built_in">f</span>(std::<span class="built_in">thread</span>(some_function));</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(some_function)</span></span>;</span><br><span class="line">  <span class="built_in">f</span>(std::<span class="built_in">move</span>(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用这个特性，我们可以实现线程对象的RAII封装。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">thread_guard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">thread_guard</span><span class="params">(std::thread &amp;<span class="type">_t</span>)</span></span></span><br><span class="line"><span class="function">        : t(std::move(_t))</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (!t.<span class="built_in">joinable</span>())</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;No Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">thread_guard</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">joinable</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            t.<span class="built_in">join</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">thread_guard</span>(thread_guard <span class="type">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    thread_guard&amp; <span class="keyword">operator</span>=(thread_guard <span class="type">const</span> &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::thread t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">func</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> some_local_state;</span><br><span class="line">    <span class="function">scoped_thread <span class="title">t</span><span class="params">(std::thread(func(some_local_state)))</span></span>;</span><br><span class="line">    <span class="built_in">do_something_in_current_thread</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用线程可以转移的特性我们可以用容器来集中管理线程，看下面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_work</span><span class="params">(<span class="type">unsigned</span> id)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;std::thread&gt; threads;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        threads.<span class="built_in">push_back</span>(std::<span class="built_in">thread</span>(do_work,i));</span><br><span class="line">    &#125;</span><br><span class="line">    std::for_each(threads.<span class="built_in">begin</span>(),threads.<span class="built_in">end</span>(),</span><br><span class="line">                  std::<span class="built_in">mem_fn</span>(&amp;std::thread::join));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3" tabindex="-1">线程相关</h2>
<h3 id="%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F" tabindex="-1">线程数量</h3>
<p>std:🧵:hardware_concurrency()函数返回一个程序中能够同时并发的线程数量，在多核系统中，其一般是核心数量。但是这个函数仅仅是一个提示，当系统信息无法获取时，函数会返回0。看下面并行处理的例子：</p>
<h3 id="%E8%AF%86%E5%88%AB%E7%BA%BF%E7%A8%8B" tabindex="-1">识别线程</h3>
<p>线程标识类型是std:🧵:id，可以通过两种方式进行检索。</p>
<ul>
<li>通过调用std::thread对象的成员函数get_id()来直接获取。</li>
<li>当前线程中调用std::this_thread::get_id()也可以获得线程标识。</li>
</ul>
<p>上面的方案和线程sleep很相似，使用上面一样的格式，get_id()函数替换成sleep()函数即可。<br>
std:🧵:id对象可以自由的拷贝和对比：</p>
<ul>
<li>如果两个对象的std:🧵:id相等，那它们就是同一个线程，或者都“没有线程”。</li>
<li>如果不等，那么就代表了两个不同线程，或者一个有线程，另一没有。</li>
</ul>
<p>std:🧵:id实例常用作检测特定线程是否需要进行一些操作，这常常用在某些线程需要执行特殊操作的场景，我们必须先要找出这些线程。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程同步问题 - 条件变量和Event</title>
    <url>/develop/cpp-thread-sync-event-condition_varaiable/</url>
    <content><![CDATA[<blockquote>
<p>网络是二十一世纪的图标。</p>
</blockquote>
<p>本文记录Poco::Condition使用过程中遇到的坑点，并且延伸到Windows Event和C++11中的std::condition_variable相关内容。<span id="more"></span></p>
<h2 id="poco%3A%3Acondition%E5%AE%9E%E7%8E%B0" tabindex="-1">Poco::Condition实现</h2>
<p>首先让我们看看Poco::Condition中的wait/signal两个操作的代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Mtx</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">(Mtx&amp; mutex)</span> </span>&#123;</span><br><span class="line">    <span class="function">ScopedUnlock&lt;Mtx&gt; <span class="title">unlock</span><span class="params">(mutex, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    Event event;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">FastMutex::ScopedLock <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="built_in">enqueue</span>(event);</span><br><span class="line">    &#125;</span><br><span class="line">    event.<span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">FastMutex::ScopedLock <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!waitQueue_.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        waitQueue_.<span class="built_in">front</span>()-&gt;<span class="built_in">set</span>();</span><br><span class="line">        <span class="built_in">dequeue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，Poco::Condition底层是基于Poco::Event来实现的，wait操作将Poco::Event对象加入到队列中，并等待其相应置位，signal操作从队列中pop出Poco::Event并置位，wait操作和signal操作通过FastMutex对象来保证对队列的互斥操作。</p>
<h2 id="%E9%97%AE%E9%A2%98%E5%86%8D%E7%8E%B0" tabindex="-1">问题再现</h2>
<p>在程序中使用了Poco的Condition类，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Poco::Condition cond;</span><br><span class="line">Poco::Mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();</span><br><span class="line">    cond.<span class="built_in">wait</span>(mtx);</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cond.<span class="built_in">signal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">thread</span>([]()&#123;</span><br><span class="line">        <span class="built_in">dosomething</span>();</span><br><span class="line">        <span class="built_in">signal</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于多线程执行顺序的不可预期性，上面的代码存在一定的概率会导致cond.signal操作调用之后，cond.wait才开始执行，导致cond.wait函数一直block。</p>
<h2 id="%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81" tabindex="-1">修改代码</h2>
<p>我们按照linux下的条件变量的调用方法，将上述代码做一定的修改：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Poco::Condition cond;</span><br><span class="line">Poco::Mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cond.<span class="built_in">wait</span>(mtx);</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();</span><br><span class="line">    cond.<span class="built_in">signal</span>();</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>();</span><br><span class="line">    std::<span class="built_in">thread</span>([]()&#123;</span><br><span class="line">        <span class="built_in">dosomething</span>();</span><br><span class="line">        <span class="built_in">signal</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要使wait函数能够成功返回的最重要的一点是：要保证先执行wait函数，然后再执行signal函数。这个保证能够确保在cond.signal操作执行时，Poco::Condition的等待队列中一定会存在一个Poco::Event对象。只有队列中存在Poco::Event对象，cond.signal中的置位操作才会执行。</p>
<p>由于多线程执行顺序的不确定性，具体的函数执行顺序可能如下：</p>
<blockquote>
<p>wait函数中<code>enqueue(event)</code>执行完毕 → 切换时间片 → signal函数中<code>waitQueue_.front()-&gt;set()</code>执行完毕 → wait函数中<code>event.wait()</code>开始执行。</p>
</blockquote>
<p>这个时候面临另外一个问题：在Poco::Event对象置位时，该对象可能并没有处于wait状态，那么此时，会不会遗漏该置位请求，导致cond.wait操作卡死？由于Poco::Event在Windows下的实现就是基于Event，所以翻译过来就是：如果Event对象调用<code>setEvent</code>或<code>PulseEvent</code>时，此时并没有线程<code>WaitForSingleObject</code>等待该Event置位，这个<code>setEvent</code>或<code>PulseEvent</code>请求会不会遗失掉？事实是不会的，在Event对象被置位后，调用<code>WaitForSingleObject</code>函数时会立即返回的。</p>
<h2 id="event%E7%9A%84%E7%BD%AE%E4%BD%8D%E8%AF%B7%E6%B1%82%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A2%E5%A4%B1%EF%BC%9F" tabindex="-1">Event的置位请求有没有可能丢失？</h2>
<p>在《Win32多线程编程》一书中有说到：</p>
<blockquote>
<p>要求苏醒的请求并不会被存储起来，可能会遗失掉。如果一个AutoReset event对象调用SetEvent或PulseEvent，而此时并没有线程在等待，这个event会被遗失。如Wait…()函数还没来得及调用就发生了Context Switch，这个时候SetEvent，这个要求苏醒的请求会被遗失，然后调用Wait…()函数线程卡死。</p>
</blockquote>
<p>我一直以为事实就是如此，不过代码证明结果并不是这样的，看看下面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line">HANDLE ghWriteEvent;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ghWriteEvent = <span class="built_in">CreateEvent</span>(<span class="literal">NULL</span>, TRUE, FALSE, <span class="built_in">TEXT</span>(<span class="string">&quot;WriteEvent&quot;</span>));</span><br><span class="line">    <span class="built_in">SetEvent</span>(ghWriteEvent);</span><br><span class="line">    DWORD dwWaitResult = <span class="built_in">WaitForSingleObject</span>(ghWriteEvent, INFINITE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码并不会卡死在WaitForSingleObject函数，该函数会立即返回。因此采用上文中修改后的代码能够解决Poco::Condition存在的问题，虽然不如直接使用Poco::Event优雅。</p>
<h2 id="std%3A%3Acondition_variable%E7%9A%84notify%E8%AF%B7%E6%B1%82%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A2%E5%A4%B1%EF%BC%9F" tabindex="-1">std::condition_variable的notify请求有没有可能丢失？</h2>
<p>我们现在可以确定Event的置位请求不会丢失，那么std::condition_variable的notify请求会不会丢失呢？我们来看一段简单的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::condition_variable cv;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">cv.<span class="built_in">notify_one</span>();</span><br><span class="line">std::unique_lock &lt;std::mutex&gt; <span class="built_in">lck</span>(mtx);</span><br><span class="line">cv.<span class="built_in">wait</span>(lck);</span><br></pre></td></tr></table></figure>
<p>执行这段代码会发现，cv.wait操作会block。目前还没有深入了解condition_variable的底层实现，具体原因未知。不过可以找到不少方案保证cv.notify_one操作执行之前，cv.wait操作一定已经执行。譬如增加标志位，标志notify_one操作是否已经执行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">bool</span> ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_print_id</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    std::unique_lock &lt;std::mutex&gt; <span class="built_in">lck</span>(mtx);</span><br><span class="line">    <span class="keyword">while</span> (!ready) cv.<span class="built_in">wait</span>(lck);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unique_lock &lt;std::mutex&gt; <span class="built_in">lck</span>(mtx);</span><br><span class="line">    ready = <span class="literal">true</span>;</span><br><span class="line">    cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::thread threads[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) threads[i] = std::<span class="built_in">thread</span>(do_print_id, i);</span><br><span class="line">    <span class="built_in">go</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; th : threads) th.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>《C++并发编程》一书中给出了另外一个例子，使用std::condition_variable的wait操作的第二个版本来解决该问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::mutex mut;</span><br><span class="line">std::queue&lt;data_chunk&gt; data_queue;  </span><br><span class="line">std::condition_variable data_cond;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">data_preparation_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">more_data_to_prepare</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        data_chunk <span class="type">const</span> data=<span class="built_in">prepare_data</span>();</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">        data_queue.<span class="built_in">push</span>(data);  </span><br><span class="line">        data_cond.<span class="built_in">notify_one</span>();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">data_processing_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">        data_cond.<span class="built_in">wait</span>(</span><br><span class="line">            lk,[]&#123;<span class="keyword">return</span> !data_queue.<span class="built_in">empty</span>();&#125;);  </span><br><span class="line">        data_chunk data=data_queue.<span class="built_in">front</span>();</span><br><span class="line">        data_queue.<span class="built_in">pop</span>();</span><br><span class="line">        lk.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="built_in">process</span>(data);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">is_last_chunk</span>(data))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，wait()会去检查这些条件(通过调用所提供的lambda函数)，当条件满足(lambda函数返回true)时返回。如果条件不满足(lambda函数返回false)，wait()函数将解锁互斥量，并且将这个线程(上段提到的处理数据的线程)置于阻塞或等待状态。当准备数据的线程调用notify_one()通知条件变量时，处理数据的线程从睡眠状态中苏醒，重新获取互斥锁，并且对条件再次检查，在条件满足的情况下，从wait()返回并继续持有锁。当条件不满足时，线程将对互斥量解锁，并且重新开始等待。</p>
<p>必须通过额外的辅助条件才能很好地利用条件变量。</p>
<h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h2>
<p>对于Poco库的使用还是存在不少坑点，只有踩坑之后才能更好的掌握。同时，对于过去掌握的知识点，一定不能轻信，书本的内容也可能存在错误，有机会自己写点demo，验证所学习的内容。</p>
<p>Event和std::condition_variable对于置位/notify请求的处理是不一样的。这在平时使用的时候需要注意。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>C++未定义行为</title>
    <url>/develop/cpp-undefined-behavior/</url>
    <content><![CDATA[<blockquote>
<p>衡量一个人是否真正活着的根本方法，就是看他是否有意愿、有能力做出主动的选择。</p>
</blockquote>
<p>在计算机程序设计中，未定义行为（undefined behavior）是指行为不可预测的计算机代码。这是一些编程语言的一个特点，最有名的是在C语言中。在这些语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。<span id="more"></span></p>
<h2 id="%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98" tabindex="-1">一个问题</h2>
<p>此问题摘自知乎：</p>
<blockquote>
<p>对顺序容器 ( vector ) 的访问:</p>
</blockquote>
<blockquote>
<ul>
<li>如果使用 operator[] 访问容器，下标越界是未定义行为。</li>
<li>使用 at 访问，下标越界，则抛出一个 out_of_range 异常。</li>
</ul>
</blockquote>
<blockquote>
<p>下标越界应该是明显错误的，但是为什么 C++ 标准选择把 operator[] 列为未定义行为，而加入at成员在对成员访问时进行下标检查？</p>
</blockquote>
<p>同样摘取一些回答</p>
<p>回答一：</p>
<blockquote>
<p>C++ 的设计理念之一，就是你不需要为你不使用的特性付出代价。如果你能确保你的下标不越界，C++就不会进行检查。</p>
</blockquote>
<p>回答二：</p>
<blockquote>
<p>检查就表示有运算判断的开销，C++将效率放在第一位，假设用户之前已经对[]访问的下标做过检查了，在一个大量访问的for循环中，但是vector还是自作聪明的每次都判断一次下标越界，这个效率影响你可想而知！你会不会在这个情况下骂它管的太多呢。所以说将所有的权利都交给你，vector不做太多自作聪明的处理。</p>
</blockquote>
<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%AA%E5%AE%9A%E4%B9%89" tabindex="-1">什么是未定义</h2>
<p>未定义行为（Undefined Behavior）是指语言标准未做规定的行为。同时，标准也从没要求编译器判断未定义行为，所以这些行为有编译器自行处理，在不同的编译器可能会产生不同的结果，又或者如果程序调用未定义的行为，可能会成功编译，甚至一开始运行时没有错误，只会在另一个系统上，甚至是在另一个日期运行失败。当一个未定义行为的实例发生时，正如语言标准所说，“什么事情都可能发生”，也许什么都没有发生。</p>
<p>下文会罗列C++中的一系列未定义结果和未定义行为，持续整理更新。</p>
<h2 id="%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BB%93%E6%9E%9C" tabindex="-1">未定义的结果</h2>
<p>1、当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的。<br>
signed char c2 = 256; // c2的值是未定义的</p>
<p>2、函数体之内定义的变量：未初始化（uninitialized），其值undefined。</p>
<p>3、算术表达式有可能产生未定义的结果</p>
<ul>
<li>数学性质本身：除数为0</li>
<li>计算机的特点：溢出；很多系统在编译和运行时都不报出溢出错误，像其他未定义的行为一样，溢出的结果是不可预知的。</li>
</ul>
<h2 id="%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A1%8C%E4%B8%BA" tabindex="-1">未定义的行为</h2>
<p>未定义行为，无法预估Runtime会发生什么（unpredictable：normal、crashing、incorrect results）。</p>
<p>1、解引用空指针、非法迭代器或者尾后迭代器都是未定义行为</p>
<p>2、访问一个无效数组索引，下标越界</p>
<p>3、当derived class对象经由一个base class指针被删除，而该base class带着一个non-virtual析构函数，其结果是未定义的。</p>
<ul>
<li>实际执行时通常发生的是对象的derived成员没有被销毁。</li>
</ul>
<p>4、在两个异常同时存在的情况下，程序若不是结束执行就是导致未定义行为。</p>
<p>5、释放一个非new分配的内存，或者将相同的指针值释放多次，其行为是未定义的。</p>
<p>6、string s(s2,pos2); // s是string s2从下标pos2开始的字符拷贝，如果pos2&gt;s2.size()，构造函数的行为未定义</p>
<p>7、试图比较两个无关地址是未定义行为</p>
<p>8、对于那些没有指定执行顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误并产生未定义的行为。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;++i&lt;&lt;endl; <span class="comment">/* 未定义 */</span></span><br><span class="line"><span class="comment">/* 编译器可能先求++i的值，再求i的值；也可能先求i的值，再求++i的值。注意与print函数的区别。 */</span></span><br><span class="line">*beg=<span class="built_in">toupper</span>(*beg++); <span class="comment">/* 未定义 */</span></span><br></pre></td></tr></table></figure>
<p>9、对有符号数进行左移操作可能会改变符号位的值，因此是一种未定义的行为。移位运算符右侧的运算对象一定不能为负，而且值必须严格小于结果的位数，否则就会产生未定义的行为。</p>
<p>10、使用static_cast将void*转换成其他类型指针，必须确保转换后所得的类型就是指针所指的类型。类型一旦不符，将产生未定义行为。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">void</span>* p=&amp;d;</span><br><span class="line"><span class="type">double</span> *dp=<span class="built_in">static_cast</span>&lt;<span class="type">double</span>*&gt;(p);</span><br></pre></td></tr></table></figure>
<p>11、const_cast只能改变运算对象的底层const，如果对象本身是一个常量，使用const_cast执行写操作就会产生未定义行为。</p>
<p>12、不要使用get初始化另一个智能指针或为智能指针赋值，否则将会产生两个独立的shared_ptr指向相同的内存，这将产生未定义行为。</p>
<p>13、delete []p;如果忘记[]，其行为是未定义的。 删除单一对象的指针加[]，其行为也是未定义的。</p>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<ul>
<li><a class="link"   href="https://www.zhihu.com/question/30366746" >C++ 为什么把一些明显的错误列为未定义行为?<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在团队中避免重复</title>
    <url>/develop/dry/</url>
    <content><![CDATA[<blockquote>
<p>程序员修炼之道 提示11：DRY - Don’t Repeat Yourself.</p>
</blockquote>
<p>重复意味着糟糕、浪费。<span id="more"></span></p>
<h2 id="%E5%AF%BC%E8%87%B4%E9%87%8D%E5%A4%8D" tabindex="-1">导致重复</h2>
<h3 id="%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E9%AD%84%E5%8A%9B" tabindex="-1">管理者的魄力</h3>
<p>管理者很有可能意识到重复的危害，却没有魄力去推动成员去落实。这是致命的。</p>
<h3 id="%E6%88%90%E5%91%98%E7%9A%84%E6%97%A0%E6%84%8F%E8%AF%86" tabindex="-1">成员的无意识</h3>
<p>在一个团队中，团队成员很有可能没有意识到重复的可怕。或许有人会觉得，别人的代码写的很糟糕，自己需要再写一套；有人会觉得，使用别人的轮子，自己无法进步，还是自己造一套来得好；还有人会觉得，这都无所谓，尽快完成工作，我维护的模块没有问题就行了，用不着管自己是否与别人重复。</p>
<p>在一个团队中，团队成员可能意识到重复的可怕，却没有认识到可能潜伏重复的方方面面。譬如，面向对象设计中类接口中成员函数/数据成员功能的重复。</p>
<h2 id="%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D" tabindex="-1">避免重复</h2>
<h3 id="%E5%9B%A2%E9%98%9F%E6%84%8F%E8%AF%86" tabindex="-1">团队意识</h3>
<p>团队中成员需要坚持<code>以重复为耻，以复用为荣</code>的团队意识。团队意识落实到团队成员身上，具体表现如下：</p>
<ul>
<li>团队成员必须认识到：重复的危害、重复的内容、如何避免重复。</li>
<li>团队成员必须认识到公共库的重要性，对于可构建公共库的内容，需主动提出评审。</li>
<li>团队管理者在管理重复一事上，必须要有决心，不可容忍重复的出现。</li>
</ul>
<h3 id="%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1" tabindex="-1">代码评审</h3>
<p>除非很熟悉该段代码的逻辑，否则代码评审很难在较短时间内，发现代码逻辑上的问题。但为什么这里又要强调代码评审呢？</p>
<ul>
<li>代码评审督促代码撰写者写出更好地代码；</li>
<li>代码评审能够发现代码撰写者是否重复；</li>
<li>代码评审增加团队成员之间的交流，使复用的可能性增加。</li>
</ul>
<h3 id="%E9%81%BF%E5%85%8D%E6%B3%A8%E9%87%8A" tabindex="-1">避免注释</h3>
<p>注释是对代码的重复，如果代码可以做到自解释，则避免注释。</p>
<h3 id="%E6%9E%84%E5%BB%BA%E5%85%AC%E5%85%B1%E5%BA%93" tabindex="-1">构建公共库</h3>
<p>1、评选出技术能力强、责任心强的团队成员负责管理公共库。</p>
<p>2、制定并遵守一套公共库构建原则</p>
<p>若公共库已经存在开源版本实现，且该实现经过同行复审、商业应用、存在开发者持续修复问题，则推荐直接使用该实现的稳定版本。在无合适的开源实现情况下，构建公共库需要遵守几个原则：</p>
<ul>
<li>公共库的构建必须紧随开发需求或技术规划，不可为了构建公共库而构建，公共库构建前必须经过评审。</li>
<li>公共库的构建与评审必须由有经验、技术能力强、代码风格好的成员来负责。</li>
<li>开发完成的公共库必须要经过完备的测试（譬如单元测试）才可应用到发布软件中。</li>
</ul>
<p>经开发并测试完成的公共库，可以使用nuget或conan来进行管理，方便团队成员使用。</p>
<p>3、重构糟糕的公共库</p>
<p>需要重构的公共库，一定是糟糕的公共库。糟糕的公共库很有可能给团队成员不好的体验，使用这样的公共库，大多数程序员都有自己重新写一套的冲动。发现糟糕的公共库，务必要第一时间安排人员重构。保证共同库使用者的良好体验，是一个公共库管理者的责任。</p>
<h2 id="%E5%BF%85%E8%A6%81%E7%9A%84%E9%87%8D%E5%A4%8D" tabindex="-1">必要的重复</h2>
<p>文档是对代码的重复，但却也是不可或缺的。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>换行符与Git CRLF</title>
    <url>/develop/git-autocrlf/</url>
    <content><![CDATA[<blockquote>
<p>不同的操作系统有不同的换行符格式，跨平台协作时需要考虑版本工具（git）对换行符的处理<span id="more"></span></p>
</blockquote>
<h2 id="%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C" tabindex="-1">回车和换行</h2>
<p>回车（Carriage Return）和换行（Line Feed）概念：</p>
<ul>
<li>回车CR：将光标移动到当前行开头；</li>
<li>换行LF：将光标“垂直”移动到下一行，并不改变光标水平位置。</li>
</ul>
<p>以上的概念只适用于打字机，现代计算机沿用的时候主要使用的是<code>回到行首</code>和<code>换行+回到行首</code>的功能。看下面的例子：</p>
<p>1、在Windows下应用程序输出\n到文件，会被自动转换成\r\n</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* output:     */</span></span><br><span class="line"><span class="comment">/* first line  */</span></span><br><span class="line"><span class="comment">/* second line */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first line\nsecond line&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* test.txt output;          */</span></span><br><span class="line"><span class="comment">/* first line\r\nsecond line */</span></span><br><span class="line"><span class="function">std::fstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, std::ios::out)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (fout.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">	fout.<span class="built_in">write</span>(<span class="string">&quot;first line\nsecond line&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;first line\nsecond line&quot;</span>));</span><br><span class="line">	fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在windows下应用程序输出\r到文件，不会被转换，并且并不会起到“将光标移动到当前行开头”的作用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* output:     */</span></span><br><span class="line"><span class="comment">/* second line */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first line\rsecond line&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* test.txt output;        */</span></span><br><span class="line"><span class="comment">/* first line\rsecond line */</span></span><br><span class="line"><span class="function">std::fstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, std::ios::out)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (fout.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">	fout.<span class="built_in">write</span>(<span class="string">&quot;first line\rsecond line&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;first line\rsecond line&quot;</span>));</span><br><span class="line">	fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在Windows下应用程序输出\r\n到文件，\r\n会被自动转换成\r\r\n</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* output:     */</span></span><br><span class="line"><span class="comment">/* first line  */</span></span><br><span class="line"><span class="comment">/* second line */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first line\r\nsecond line&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* test.txt output;            */</span></span><br><span class="line"><span class="comment">/* first line\r\r\nsecond line */</span></span><br><span class="line"><span class="function">std::fstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, std::ios::out)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (fout.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">	fout.<span class="built_in">write</span>(<span class="string">&quot;first line\r\nsecond line&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;first line\r\nsecond line&quot;</span>));</span><br><span class="line">	fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E4%B8%8D%E5%90%8C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6" tabindex="-1">不同系统下的换行符</h2>
<p>CR、LF、CR/LF为不同操作系统上使用的换行符：</p>
<ul>
<li>Windows/DOS系统：采用CR/LF表示下一行；</li>
<li>Unix/Linux系统：采用LF表示下一行；</li>
<li>Mac OS系统：采用CR表示下一行；</li>
<li>Mac OS X系统：采用LF表示下一行（<strong>Mac OS X已经改成和Unix/Linx一样使用LF</strong>）。</li>
</ul>
<p>CR使用符号’\r’，十进制ASCII代码是13，十六进制代码为0x0D；LF使用’\n’符号表示，ASCII代码是10，十六制为0x0A。所以Windows平台上换行在文本文件中是使用 0d 0a 两个字节表示，而UNIX和苹果平台上换行则是使用 0a 或 0d 一个字节表示。</p>
<p>Unix/Linux/Mac系统下的文件在Windows里打开的话（使用Windows自带记事本），会出现换行丢失，所有文字会变成一行，整个文本会乱成一团。Windows系统下的文件在Unix/Linux/Mac里打开的话，在每行的结尾可能会多出一个^M符号。</p>
<p>目前大部分的编辑器和IDE都支持这几种换行符（除了notepad），但是跨平台协作项目源码到底保存为哪种风格的换行符呢？输出的文本需要保存为哪种风格的换行符呢？Git提供了一个解决方案——在跨平台协作场景时，会提供一个“换行符自动转换”的功能。</p>
<h2 id="git-crlf" tabindex="-1">Git CRLF</h2>
<p>Git默认在提交时将Windows换行符（CRLF）转换为LF，在拉取时将UNIX换行符（LF）替换成CRLF。我们可以通过设置autocrlf和safecrlf来设置具体的操作。</p>
<h3 id="autocrlf-and-saftcrlf" tabindex="-1">autocrlf and saftcrlf</h3>
<p>1、autocrlf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 提交时转换为LF，检出时转换为CRLF</span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span>   </span><br><span class="line"></span><br><span class="line">// 提交时转换为LF，检出时不转换</span><br><span class="line">git config --global core.autocrlf input   </span><br><span class="line"></span><br><span class="line">// 提交检出均不转换</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>2、safecrlf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 拒绝提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span>   </span><br><span class="line"></span><br><span class="line">// 允许提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span>   </span><br><span class="line"></span><br><span class="line">// 提交包含混合换行符的文件时给出警告</span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>
<h3 id=".gitattributes" tabindex="-1">.gitattributes</h3>
<p>.gitattributes文件能够设置每个仓库的换行符配置，摘取github中的设置为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">###############################################################################</span><br><span class="line"># Set <span class="keyword">default</span> behavior to automatically normalize line endings.</span><br><span class="line">###############################################################################</span><br><span class="line">* text=auto</span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># Set the merge driver <span class="keyword">for</span> project and solution files</span><br><span class="line">#</span><br><span class="line"># Merging from the command prompt will add diff markers to the files <span class="keyword">if</span> there</span><br><span class="line"># are <span class="title function_">conflicts</span> <span class="params">(Merging from VS is not affected by the settings below, in VS</span></span><br><span class="line"><span class="params"># the diff markers are never inserted)</span>. Diff markers may cause the following</span><br><span class="line"># file extensions to fail to load in VS. An alternative would be to treat</span><br><span class="line"># these files as binary and thus will always conflict and require user</span><br><span class="line"># intervention with every merge. To <span class="keyword">do</span> so, just uncomment the entries below</span><br><span class="line">###############################################################################</span><br><span class="line">#*.sln       merge=binary</span><br><span class="line">#*.vcxproj   merge=binary</span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># behavior <span class="keyword">for</span> image files</span><br><span class="line">#</span><br><span class="line"># image files are treated as binary by <span class="keyword">default</span>.</span><br><span class="line">###############################################################################</span><br><span class="line">#*.jpg   binary</span><br><span class="line">#*.png   binary</span><br><span class="line">#*.gif   binary</span><br><span class="line"></span><br><span class="line">###############################################################################</span><br><span class="line"># diff behavior <span class="keyword">for</span> common document formats</span><br><span class="line">#</span><br><span class="line"># Convert binary document formats to text before diffing them. This feature</span><br><span class="line"># is only available from the command line. Turn it on by uncommenting the</span><br><span class="line"># entries below.</span><br><span class="line">###############################################################################</span><br><span class="line">#*.doc   diff=astextplain</span><br><span class="line">#*.DOC   diff=astextplain</span><br><span class="line">#*.docx  diff=astextplain</span><br><span class="line">#*.DOCX  diff=astextplain</span><br><span class="line">#*.dot   diff=astextplain</span><br><span class="line">#*.DOT   diff=astextplain</span><br><span class="line">#*.pdf   diff=astextplain</span><br><span class="line">#*.PDF   diff=astextplain</span><br><span class="line">#*.rtf   diff=astextplain</span><br><span class="line">#*.RTF   diff=astextplain</span><br></pre></td></tr></table></figure>
<p>1、text=auto：采用git认为最好的方式来处理文件，未在.gitattributes中设置的项默认按照这种方式处理；</p>
<p>2、text eol=crlf/lf：在checkout时，转换Line Ending为crlf/lf；</p>
<p>3、binary: 告诉git该文件为二进制，防止git修改该文件。</p>
<p>注意：.gitattributes文件必须要提交之后才能生效。</p>
<blockquote>
<p>由于目前Jenkins推送到打包服务器上的代码默认采用LF结尾，所以建议仓库内创建.gitattributes文件并设置。</p>
</blockquote>
<h2 id="%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD%E4%B8%80" tabindex="-1">项目实施一</h2>
<h3 id="%E8%AE%BE%E7%BD%AE%E5%8E%9F%E5%88%99" tabindex="-1">设置原则</h3>
<p>本地仓库完全一致，<strong>适合单一平台编程</strong>。</p>
<h3 id="%E5%9B%A2%E9%98%9F%E8%AE%BE%E7%BD%AE" tabindex="-1">团队设置</h3>
<p>一个团队需要使用同一的换行符标准（UNIX标准或者Windows标准），然后配置自己的代码编辑器和IDE，达到两项要求：</p>
<ul>
<li>在新建文件时默认使用团队统一的换行符标准；</li>
<li>在打开文件时保持现有换行符格式不变（不要做自动转换）。</li>
</ul>
<h3 id="git%E8%AE%BE%E7%BD%AE" tabindex="-1">Git设置</h3>
<p>1、关闭换行符自动转换功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 提交检出均不转换</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>2、开启换行符检查功能（按照需求设置）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 拒绝提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span>   </span><br><span class="line"></span><br><span class="line">// 允许提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span>   </span><br><span class="line"></span><br><span class="line">// 提交包含混合换行符的文件时给出警告</span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>
<h3 id="%E7%95%99%E6%84%8F%E6%AF%8F%E6%AC%A1%E6%8F%90%E4%BA%A4" tabindex="-1">留意每次提交</h3>
<p>如果提交的时候变更行数过多（超过自己修改），或者增减行数相同，很有可能是整个文件的换行符被修改了，这个时候就要注意检查了。</p>
<h2 id="%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD%E4%BA%8C" tabindex="-1">项目实施二</h2>
<h3 id="%E8%AE%BE%E7%BD%AE%E5%8E%9F%E5%88%99-1" tabindex="-1">设置原则</h3>
<p>保证仓库永远换行符永远采用UNIX标准（LF），在Windows工作空间设置为Windows标准（CRLF），在Mac/Linux工作空间设置为Unxi标准（LF），<strong>适合跨平台编程</strong>。</p>
<h3 id="%E5%9B%A2%E9%98%9F%E8%AE%BE%E7%BD%AE-1" tabindex="-1">团队设置</h3>
<p>统一不同平台下的换行符标准，按照上面设置原则的标准，配置自己的代码编辑器和IDE，，达到两项要求：</p>
<ul>
<li>在新建文件时默认使用团队统一的换行符标准；</li>
<li>在打开文件时保持现有换行符格式不变（不要做自动转换）。</li>
</ul>
<h3 id="git%E8%AE%BE%E7%BD%AE-1" tabindex="-1">Git设置</h3>
<p>1、设置换行符自动转换功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configure Git on OS X or Linux to properly handle line endings</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure Git on Windows to properly handle line endings</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>2、设置换行符检查功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 提交包含混合换行符的文件时给出警告</span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>
<h3 id="%E7%95%99%E6%84%8F%E6%AF%8F%E6%AC%A1%E6%8F%90%E4%BA%A4-1" tabindex="-1">留意每次提交</h3>
<p>1、留意每次提交的更改行数。</p>
<p>2、留意提交时的换行符警告。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何有效的管理项目中的共享代码</title>
    <url>/develop/git-share-code/</url>
    <content><![CDATA[<blockquote>
<p>人与人之间的交互是复杂的，并且其效果从来都难以预期，但却是工作中最为重要的方面。</p>
</blockquote>
<p>在很多大型项目中，需要在多个仓库中共享代码。这些代码可能是通信协议、公用代码库、第三方代码库等。如何管理共享代码是个头疼的问题，我们总不能在每个仓库中拷贝这些共享代码。git提供了submodule和subtree两种方案来方便我们管理。我们来进行对比，选择合适的方案加入到项目中。<span id="more"></span></p>
<h2 id="git-submodule" tabindex="-1">git submodule</h2>
<p>submodule是一个完全独立的仓库，引用submodule的父仓库和submodule的唯一联系，是保存在父仓库中子仓库某个<code>commit-SHA</code>值。我们通过在父仓库中执行<code>add</code>和<code>update</code>来增加和更新submodule。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test repository</span></span><br><span class="line">$ git submodule add git://github.com/sub/sub.git thirdparty/sub</span><br><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
<p>执行<code>add</code>操作后，在test目录下会产生一个<code>.gitsubmodule</code>文件，其内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .gitsubmodule</span><br><span class="line">[submodule <span class="string">&quot;sub&quot;</span>]</span><br><span class="line">    path = sub</span><br><span class="line">    url = git://github.com/sub/sub.git</span><br></pre></td></tr></table></figure>
<p>针对于频繁更新的共享代码仓库，submodule的缺陷在于其管理的复杂性。其复杂性体现在三个方面：</p>
<p>1、更新代码的复杂性</p>
<p>如果我们需要在submodule中提交代码，我们需要执行四步：1、切换到开发分支；2、pull最新代码；3、提交代码到submodule仓库；4、从父仓库中提交submodule当前<code>commit-SHA</code>值。切换到开发分支是很重要的，否则我们很可能会丢掉代码。同时，如果我们存在多个父仓库，每个父仓库都要提交submodule的当前<code>commit-SHA</code>值。</p>
<p>如果我们需要获取最新的submodule，我们需要执行两步：1、拉取父仓库代码；2、运行<code>git submodule update</code>命令。</p>
<p>2、团队协作的复杂性</p>
<p>在更新代码时，如果团队成员忘记其中的任何一步，对其他成员将会存在一定的影响。举两个例子：</p>
<blockquote>
<p>拉取最新代码时，如果我们忘记运行<code>git submodule update</code>命令，之后更新代码，很有可能在父仓库中提交了老的submodule<code>commit-SHA</code>值。</p>
</blockquote>
<blockquote>
<p>如果团队成员对子模块做了一个本地的变更，但没有推送到公共公共服务器，然后他们提交了一个指向那个非公共状态的<code>commit-SHA</code>值，并推送到了父项目所在仓库。这时，其他开发者试图运行<code>git submodule update</code>就会提示找不到所引用的子模块提交。</p>
</blockquote>
<p>3、代码合并的复杂性</p>
<p>在合并代码时，即使我们解决了submodule的冲突，还是需要执行<code>git submodule update</code>命令。</p>
<p>如果我们的共享代码仓库是稳定的第三方库，submodule是个极好的选择。然而，针对于频繁更新的共享代码仓库，使用submodule时无法避免其复杂性，但是可以通过一些手段，让我们不容易出错。</p>
<h2 id="git-submodule-trick" tabindex="-1">git submodule trick</h2>
<h3 id="%E7%BA%A6%E5%AE%9A" tabindex="-1">约定</h3>
<ul>
<li>master分支上作为submodule发布分支（开发分支遵循checkout/merge原则）</li>
<li>master分支上最新的提交必须可以被父仓库引用</li>
</ul>
<h3 id="%E5%88%9D%E6%AC%A1clone" tabindex="-1">初次clone</h3>
<p>使用<code>recursive</code>参数来自动clone submodule仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unpleasure method</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/sub/sub.git</span><br><span class="line">$ git submodule init</span><br><span class="line">$ git submodule update</span><br><span class="line"></span><br><span class="line"><span class="comment"># elegant method</span></span><br><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/sub/sub.git</span><br></pre></td></tr></table></figure>
<h3 id="%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81" tabindex="-1">更新代码</h3>
<p>使用<code>foreach</code>将所有submodule切换到master分支、拉取最新代码，然后在父仓库提交submodule的<code>commit-SHA</code>值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule foreach --recursive git checkout master &amp;&amp; git pull</span><br><span class="line"><span class="comment"># you can changes submodule repository here.</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;update all submodule to latest commit id&quot;</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure>
<p>当我们需要更新仓库中的submodule，<code>foreach</code>可以简化我们的工作量。</p>
<p>如果某些submodule并没有使用master分支作为发布分支，我们采用下列命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule foreach -q --recursive \</span><br><span class="line">    <span class="string">&#x27;git checkout \</span></span><br><span class="line"><span class="string">        $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master)&#x27;</span> &amp;&amp; \</span><br><span class="line">    `git pull`</span><br></pre></td></tr></table></figure>
<p>采用这个命令的前提是在添加submodule时指明分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add submodule to track master branch</span></span><br><span class="line">git submodule add -b master [URL to Git repo];</span><br><span class="line"></span><br><span class="line"><span class="comment"># update your submodule, and update code to the latest of branch master</span></span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>
<h3 id="%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81" tabindex="-1">提交代码</h3>
<p>submodule代码会被多个父仓库引用，所以需要在每个父仓库中验证修改是否有效。在验证有效后，从开发分支merge到master分支。</p>
<h3 id="%E9%94%99%E8%AF%AF%E6%8F%90%E4%BA%A4%E8%A1%A5%E6%95%91" tabindex="-1">错误提交补救</h3>
<p>如果我们没有checkout master分支，却又提交了代码，可以使用<code>cherry-pick</code>命令提取错失的提交：</p>
<ul>
<li>执行<code>git checkout master</code>将HEAD从detached状态切换到master分支，记录git报出的warning中的<code>commit-SHA</code>；</li>
<li>执行<code>git cherry-pick commit-SHA</code>提取错失的提交到master分支；</li>
<li>执行<code>git push</code>重新提交代码。</li>
</ul>
<blockquote>
<p>如果需要提交代码，必须按照使用<code>foreach</code>指令，确保每个submodule都在正确的分支、最新的提交。如果出现本节这种情况，说明开发者没有执行正确的使用步骤。</p>
</blockquote>
<h2 id="git-subtree" tabindex="-1">git subtree</h2>
<p>subtree对于父仓库来说是完全透明的，所有开发人员看到的是一个项目中的普通目录，开发人员无须针对subtree做特殊的处理。只需要维护subtree的开发人员在合适的时候去执行代码同步操作。我们在父仓库中通过<code>add</code>、<code>push</code>和<code>pull</code>来操作subtree：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add -f sub git://github.com/sub/sub.git</span><br><span class="line">$ git subtree add --prefix=sub sub master --squash</span><br><span class="line">$ git subtree pull --prefix=sub sub master --squash</span><br><span class="line">$ git subtree push --prefix=sub sub master --squash</span><br></pre></td></tr></table></figure>
<p>subtree是git官方网站推荐使用的方案。subtree的优点在于简单，复杂度低。过于简单也是subtree的缺点：</p>
<ul>
<li>我们无法在subtree目录中查看对应的commit信息；</li>
<li>subtree的提交会污染父仓库的提交记录。</li>
</ul>
<blockquote>
<p>未完待续。</p>
</blockquote>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<ul>
<li><a class="link"   href="https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/" >Why your company shouldn’t use Git submodules<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC初识——同步单向gRPC</title>
    <url>/develop/grpc-basic/</url>
    <content><![CDATA[<blockquote>
<p>复利效应</p>
</blockquote>
<p>gRPC是Google开源的RPC框架，拥有高性能、跨语言等诸多优点。gRPC官方网站为<a href="grpc.io">grpc.io</a>。鉴于官网的介绍较为混乱，并且其教程并不完善易懂，故而这里做一个简单的整理，希望一起成长。<span id="more"></span></p>
<p>本文所采用编程语言为C++，其他语言可以参考，开发平台为Windows平台。</p>
<h2 id="%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8grpc" tabindex="-1">如何使用gRPC</h2>
<p>gRPC基于Protocol Buffer，在使用gRPC时，一般都是按照下列步骤：</p>
<ul>
<li>定义proto3协议</li>
<li>生成RPC代码</li>
<li>实现服务端</li>
<li>实现客户端</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/io/rpc/grpc_concept_diagram.png"
                          alt="grpc concept" 
                 >
<p>上图是gRPC原理图，gRPC服务端实现具体的RPC服务，客户端通过gRPC Stub来调用这些RPC服务。客户端和服务端是通过信道（<code>Channel</code>）来连接的。</p>
<p>gRPC有四种使用场景：单向RPC（一问一答）、服务端流式RPC（一问多答）、客户端流式RPC（多问一答）、双向流式RPC（多问多答）。gRPC的调用方式又分为同步(阻塞)和异步（非阻塞），所以我们需要根据需求，来选择使用场景和调用方式。四类服务方法如下：</p>
<ul>
<li>单项RPC，客户端发送请求给服务端，服务端发送一个应答；</li>
</ul>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rpc</span> sayHello(HelloRequest) <span class="keyword">returns</span>(HelloResponse) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>服务端流式RPC，客户端发送请求给服务端，可获取一个数据流，通过该数据流能够读取服务端后续发送的一系列消息；</li>
</ul>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rpc</span> LotsOfReplies(HelloRequest) <span class="keyword">returns</span>(stream HelloResponse) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>客户端流式RPC，客户端用提供的一个数据流写入并发送一系列消息给服务端。</li>
</ul>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rpc</span> LotsOfGreetings(stream HelloRequest) <span class="keyword">returns</span> (HelloResponse) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>双向流式RPC，客户端和服务端都可以分别通过一个读写数据流来发送一系列消息。</li>
</ul>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rpc</span> BidiHello(stream HelloRequest) <span class="keyword">returns</span> (stream HelloResponse)</span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>对于gRPC使用场景，在生成RPC代码时，都会生成同步和异步接口。下文中会给出一个简单的同步单向gRPC示例，再次基础上我们会分析gRPC的详细代码。</p>
<p>有关gRPC的示例代码，都可以从<a class="link"   href="https://github.com/JerkWisdom/gRPC-Guide" >Github: gRPC-Guide<i class="fas fa-external-link-alt"></i></a>获取。</p>
<h2 id="%E5%90%8C%E6%AD%A5%E5%8D%95%E5%90%91grpc%E7%A4%BA%E4%BE%8B" tabindex="-1">同步单向gRPC示例</h2>
<h3 id="%E5%AE%9A%E4%B9%89proto3%E5%8D%8F%E8%AE%AE" tabindex="-1">定义proto3协议</h3>
<p>这里需要有Protocol Buffer基础，具体使用可以Google。</p>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"># hello.proto</span><br><span class="line"></span><br><span class="line">syntax=<span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> guide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloResponse</span> &#123;</span><br><span class="line">    <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">HelloSvc</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> sayHello(HelloRequest) <span class="keyword">returns</span>(HelloResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E7%94%9F%E6%88%90rpc%E4%BB%A3%E7%A0%81" tabindex="-1">生成RPC代码</h3>
<p>为了显示目录结构，下面的RPC代码借助了cmake。<code>protoc.exe</code>可以从protobuf网站下载，也可以自己编译。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">EXECUTE_PROCESS(COMMAND</span><br><span class="line">    $&#123;CMAKE_SOURCE_DIR&#125;/thirdparty/gRPC/third_party/protobuf/cmake/win/Debug/protoc.exe</span><br><span class="line">    -I $&#123;CMAKE_SOURCE_DIR&#125;/protos/guide</span><br><span class="line">    --grpc_out=$&#123;CMAKE_SOURCE_DIR&#125;/sync/client/src</span><br><span class="line">    --grpc_out=$&#123;CMAKE_SOURCE_DIR&#125;/sync/server/src</span><br><span class="line">    --cpp_out=$&#123;CMAKE_SOURCE_DIR&#125;/sync/client/src</span><br><span class="line">    --cpp_out=$&#123;CMAKE_SOURCE_DIR&#125;/sync/server/src</span><br><span class="line">    --plugin=protoc-gen-grpc=$&#123;CMAKE_SOURCE_DIR&#125;/thirdparty/gRPC/vsprojects/x64/Debug/grpc_cpp_plugin.exe</span><br><span class="line">    $&#123;CMAKE_SOURCE_DIR&#125;/protos/guide/hello.proto)</span><br></pre></td></tr></table></figure>
<p>通过上面的命令，我们会生成四个文件：</p>
<ul>
<li>hello.grpc.pb.h</li>
<li><a class="link"   href="http://hello.grpc.pb.cc" >hello.grpc.pb.cc<i class="fas fa-external-link-alt"></i></a></li>
<li>hello.pb.h</li>
<li><a class="link"   href="http://hello.pb.cc" >hello.pb.cc<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><code>hello.pb.*</code>中定义了<code>HelloReqeust</code>和<code>HelloResponse</code>消息的具体实现，而<code>hello.grpc.pb.*</code>中定义同步gRPC服务和异步gRPC服务等。后文的gRPC实现解析中会详细的讲解这块的代码。</p>
<h3 id="%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF" tabindex="-1">实现服务端</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloService</span> : <span class="keyword">public</span> HelloSvc::Service</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HelloService</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">HelloService</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Status <span class="title">sayHello</span><span class="params">(ServerContext* context, <span class="type">const</span> HelloRequest* req, HelloResponse* rsp)</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">HelloService::sayHello</span><span class="params">(ServerContext* context, <span class="type">const</span> HelloRequest* req, HelloResponse* rsp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Received from client: &quot;</span> &lt;&lt; req-&gt;<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::string response = <span class="string">&quot;hello, &quot;</span>;</span><br><span class="line">    rsp-&gt;<span class="built_in">set_message</span>(response + req-&gt;<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">runServer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    guide::HelloService service;</span><br><span class="line">    ServerBuilder builder;</span><br><span class="line">    builder.<span class="built_in">AddListeningPort</span>(<span class="string">&quot;0.0.0.0:50051&quot;</span>, grpc::<span class="built_in">InsecureServerCredentials</span>());</span><br><span class="line">    builder.<span class="built_in">RegisterService</span>(&amp;service);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;</span><br><span class="line">    server-&gt;<span class="built_in">Wait</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sayHello</code>接口是在<code>HelloSvc::Service</code>类中定义，这个类就是在<code>hello.grpc.pb.h</code>中生成的同步服务类。<code>HelloService</code>服务实现类派生自该类，并实现<code>sayHello</code>接口，我们就可以利用<code>ServerBuilder</code>建立服务（绑定端口，）并运行。</p>
<h3 id="%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF" tabindex="-1">实现客户端</h3>
<p>客户端通过Stub来调用RPC服务端的代码，Stub必须运行在具体Channel上。我们必须要先建立信道：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">grpc::<span class="built_in">CreateChannel</span>(<span class="string">&quot;localhost:50051&quot;</span>, grpc::<span class="built_in">InsecureChannelCredentials</span>())</span><br></pre></td></tr></table></figure>
<p>在建立信道的基础上，新建Stub，通过Stub来调用具体的RPC代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloClient</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HelloClient</span>(std::shared_ptr&lt;Channel&gt; channel)</span><br><span class="line">        : _stub(HelloSvc::<span class="built_in">NewStub</span>(channel)) &#123; &#125;</span><br><span class="line">    ~<span class="built_in">HelloClient</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">sayHello</span><span class="params">(<span class="type">const</span> std::string name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unique_ptr&lt;HelloSvc::Stub&gt; _stub;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">HelloClient::sayHello</span><span class="params">(std::string user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HelloRequest req;</span><br><span class="line">    req.<span class="built_in">set_name</span>(user);</span><br><span class="line"></span><br><span class="line">    HelloResponse rsp;</span><br><span class="line">    ClientContext ctx;</span><br><span class="line">    Status status = _stub-&gt;<span class="built_in">sayHello</span>(&amp;ctx, req, &amp;rsp);</span><br><span class="line">    <span class="keyword">if</span> (status.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> rsp.<span class="built_in">message</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RPC Failed.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用RPC服务：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">runClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">HelloClient <span class="title">client</span><span class="params">(grpc::CreateChannel(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;localhost:50051&quot;</span>, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">user</span><span class="params">(<span class="string">&quot;John&quot;</span>)</span></span>;</span><br><span class="line">    std::string rsp = client.<span class="built_in">sayHello</span>(user);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello Client Received: &quot;</span> &lt;&lt; rsp &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="grpc%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90" tabindex="-1">gRPC实现解析</h2>
<p>上文中我们给出了单向RPC示例，步骤二：生成RPC代码会生成RPC服务和客户端调用代码，这块代码是gRPC实现的核心代码。该段代码涉及到三点：</p>
<ul>
<li>客户端桩Stub类代码</li>
<li>服务端同步服务接口类代码</li>
<li>服务端异步服务接口类代码</li>
</ul>
<p>我们依次来看着三段代码：</p>
<p>1、客户端桩Stub类代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stub</span> GRPC_FINAL : <span class="keyword">public</span> StubInterface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stub</span>(<span class="type">const</span> std::shared_ptr&lt; ::grpc::ChannelInterface&gt;&amp; channel);</span><br><span class="line">    ::<span class="function">grpc::Status <span class="title">sayHello</span><span class="params">(::grpc::ClientContext* context, <span class="type">const</span> ::guide::HelloRequest&amp; request, ::guide::HelloResponse* response)</span> GRPC_OVERRIDE</span>;</span><br><span class="line">    std::unique_ptr&lt; ::grpc::ClientAsyncResponseReader&lt; ::guide::HelloResponse&gt;&gt;</span><br><span class="line">    <span class="built_in">AsyncsayHello</span>(::grpc::ClientContext* context, <span class="type">const</span> ::guide::HelloRequest&amp; request, ::grpc::CompletionQueue* cq)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> std::unique_ptr&lt; ::grpc::ClientAsyncResponseReader&lt; ::guide::HelloResponse&gt;&gt;(<span class="built_in">AsyncsayHelloRaw</span>(context, request, cq));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端桩Stub类中分别定义了同步版本和异步版本的RPC方法，我们可以按照我们的需求来选择。</p>
<p>2、服务端同步服务接口类代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Service</span> : <span class="keyword">public</span> ::grpc::Service &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Service</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Service</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ::<span class="function">grpc::Status <span class="title">sayHello</span><span class="params">(::grpc::ServerContext* context, <span class="type">const</span> ::guide::HelloRequest* request, ::guide::HelloResponse* response)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>同步服务接口是阻塞的，服务端会阻塞在Server.wait()代码这儿，直到出现一次RPC调用。</p>
<p>3、服务端异步服务接口类代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">BaseClass</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WithAsyncMethod_sayHello</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BaseClassMustBeDerivedFromService</span><span class="params">(<span class="type">const</span> Service *service)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">WithAsyncMethod_sayHello</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ::grpc::Service::<span class="built_in">MarkMethodAsync</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">WithAsyncMethod_sayHello</span>() GRPC_OVERRIDE</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BaseClassMustBeDerivedFromService</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RequestsayHello</span><span class="params">(::grpc::ServerContext* context, ::guide::HelloRequest* request, ::grpc::ServerAsyncResponseWriter&lt; ::guide::HelloResponse&gt;* reÂsponse, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, <span class="type">void</span> *tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ::grpc::Service::<span class="built_in">RequestAsyncUnary</span>(<span class="number">0</span>, context, request, response, new_call_cq, notification_cq, tag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> WithAsyncMethod_sayHello&lt;Service &gt; AsyncService;</span><br></pre></td></tr></table></figure>
<p>异步服务接口是既可以是阻塞的也可以是非阻塞的，异步服务通过在<code>CompletionQueue</code>上等待完成实践，一旦等到相应的事件<code>Next</code>函数返回（<code>AsyncNext</code>等到一定的时间间隔也会返回），执行相应的RPC服务代码。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>libcurl中curl_easy_perform卡死问题</title>
    <url>/develop/libcurl-curl_easy_perform-blocking-problem/</url>
    <content><![CDATA[<blockquote><p>Don’t Live with Broken Windows<br>
不要容忍破窗</p>
<footer><strong>Andrew Hunt/David Thomas</strong><cite>程序员修炼之道</cite></footer></blockquote>  
<p>Libcurl为一个免费开源的，客户端url传输库，本文主要分析使用过程中遇到的卡死问题。<span id="more"></span></p>
<h2 id="%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" tabindex="-1">问题描述</h2>
<p>LibCurl使用阻塞的方式来进行http下载，curl_easy_perform执行后，程序会在这里阻塞等待下载结束（成功OR失败），此时若下载一段时间后出现网络异常，curl_easy_perform不会返回失败，整个线程阻塞卡死。</p>
<h2 id="%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" tabindex="-1">问题分析</h2>
<p>复现：连接无线网络，然后执行curl_easy_perform下载，下载过程中，断开无线网络，curl_easy_perform卡死，阻塞整个线程。</p>
<p>原因：当断开无线网络时，使用命令行netstat ano | findstr ‘连接ip’, 可以发现LibCurl的http连接并没有断开（不知道是不是windows系统的bug），如果将CURLOPT_TIMEOUT设置为无限等待，curl_easy_perform便会一直阻塞住线程。</p>
<h2 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" tabindex="-1">解决方案</h2>
<p>1、如果我们不将CURLOPT_TIMEOUT设置为无限等待，是不会出现上面问题，curl_easy_perform会在执行一段时间（由CURLOPT_TIMEOUR设置），结束并返回失败，但是如果设置合适的CURLOPT_TIMEOUT是个问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl_easy_setopt(curl, CURLOPT_TIMEOUT, 0); /* blocking forever, cannot find a suitable value */</span><br></pre></td></tr></table></figure>
<p>2、使用multi模式下载, 而不使用easy模式, 此方法的唯一好处就是multi并不会阻塞, 而是立即返回. 但是缺点是带来了问题, 其一就是需要自己去阻塞, 当我们需要返回时再返回, 其二还需要启动一个线程, 需要自己控制整个过程的节奏。</p>
<p>3、在下载中, 另起一个线程, 若发现下载状态卡死(可以通过定期检查文件大小来实现), 则从外部中断下载线程. 此方法需另起线程, 而且直接中断线程, 会给整个程序带来不稳定。</p>
<p>4、设置CURLOPT_TIMEOUT为30s，以30s为间隔断点续传。</p>
<p>5、使用CURLOPT_LOW_SPEED_LIMIT, CURLOPT_LOW_SPEED_TIME</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = curl_easy_setopt(curl, CURLOPT_LOW_SPEED_LIMIT, 1024L);</span><br><span class="line">res = curl_easy_setopt(curl, CURLOPT_LOW_SPEED_TIME, 30L);</span><br></pre></td></tr></table></figure>
<p>6、使用CURLOPT_PROGRESSFUNCTION设置进度表回调函数，可以在该回调函数内部检测下载是否出错，如果出现就中断curl_easy_perform，返回下载错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;curl/curl.h&gt;</span><br><span class="line">int progress_callback(void *clientp,   double dltotal,   double dlnow,   double ultotal,   double ulnow);</span><br><span class="line">CURLcode curl_easy_setopt(CURL *handle, CURLOPT_PROGRESSFUNCTION, progress_callback);</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用的10组命令、6个快捷操作、九个常用符号详解</title>
    <url>/develop/linux-common-command-details/</url>
    <content><![CDATA[<blockquote><p>衡量一个人是否真正的自信，就看他是否能真心为他人的成功而毫无芥蒂地感到高兴。</p>
<footer><strong>李笑来</strong><cite>新生——七年就是一辈子</cite></footer></blockquote>
<p>Linux命令繁多，需要掌握和不需要掌握的都很多，我们需要在掌握一些基本命令的前提下，才能更高效的使用Linux，并开展后续深入的学习。<span id="more"></span></p>
<h2 id="ls" tabindex="-1">ls</h2>
<p>Linux <code>ls（list）命令</code>用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p>
<p>对于ls命令，我们需要注意下面几个参数与使用组合。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span>                <span class="comment"># 显示当前目录信息</span></span><br><span class="line">$ <span class="built_in">ls</span> testdir        <span class="comment"># 显示testdir目录信息</span></span><br><span class="line">$ <span class="built_in">ls</span> -a             <span class="comment"># 显示目录下的一切文件，包含以.起始的隐藏文件或文件夹</span></span><br><span class="line">$ <span class="built_in">ls</span> -l             <span class="comment"># 显示文件的具体信息，包括文件形态、权限、拥有者、文件大小等信息</span></span><br><span class="line">$ <span class="built_in">ls</span> | grep <span class="built_in">dirname</span> <span class="comment"># 显示文件/文件夹名包含“dirname”的文件或者文件夹</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在Linux中，文件以“.”开头的就是隐藏文件，并且每个文件，文件夹，设备或者命令都是以文件对待。</p>
</blockquote>
<h2 id="cd" tabindex="-1">cd</h2>
<p>Linux <code>cd（change directory）命令</code>用于切换当前工作目录至 dirName(目录参数)。</p>
<p>对于cd命令，需要和一些快捷符号联系在一起操作。我们可以用<code>pwd命令</code>来显示当前目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span>    <span class="comment"># 切换到家目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~  <span class="comment"># 切换到家目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /  <span class="comment"># 切换到根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> -  <span class="comment"># 切换到上一个工作目录</span></span><br><span class="line">$ <span class="built_in">cd</span> .  <span class="comment"># 切换到当前目录</span></span><br><span class="line">$ <span class="built_in">cd</span> .. <span class="comment"># 切换到当前目录上一层目录</span></span><br></pre></td></tr></table></figure>
<h2 id="cp%2Fmv%2Frm%2Ftouch%2Fmkdir" tabindex="-1">cp/mv/rm/touch/mkdir</h2>
<h3 id="%E4%BD%9C%E7%94%A8" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>cp命令</code>主要用于复制文件或目录。</li>
<li>Linux <code>rm命令</code>用于删除一个文件或者目录。</li>
<li>Linux <code>mv命令</code>用来为文件或目录改名、或将文件或目录移入其它位置。</li>
<li>Linux <code>touch命令</code>用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</li>
<li>Linux <code>mkdir命令</code>用于建立名称为 dirName 之子目录。</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp</span></span><br><span class="line">$ <span class="built_in">cp</span> testfile1 testfile2</span><br><span class="line">$ <span class="built_in">cp</span> -v testfile1 testfile2  <span class="comment"># 显示拷贝详情</span></span><br><span class="line"><span class="string">&#x27;testfile1&#x27;</span> -&gt; <span class="string">&#x27;testfile2&#x27;</span></span><br><span class="line">$ <span class="built_in">cp</span> –r testdir/ newtestdir  <span class="comment"># 若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mv</span></span><br><span class="line">$ <span class="built_in">mv</span> testfile1 testfile2 <span class="comment"># 将源文件名改为目标文件名</span></span><br><span class="line">$ <span class="built_in">mv</span> testfile testdir    <span class="comment"># 将文件移动到目标目录</span></span><br><span class="line">$ <span class="built_in">mv</span> testdir1/ testdir2  <span class="comment"># 目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</span></span><br><span class="line">$ <span class="built_in">mv</span> testdir testfile    <span class="comment"># 出错：将目录移动到目标文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm</span></span><br><span class="line">$ <span class="built_in">rm</span> -i testfile  <span class="comment"># 删除前逐一询问确认</span></span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file <span class="string">&#x27;testfile1&#x27;</span>? y</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> -f testfile <span class="comment"># 即使原档案属性设为唯读，亦直接删除，无需逐一确认</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> testdir <span class="comment"># 删除文件可以直接使用rm命令，若删除目录则必须配合选项&quot;-r&quot;</span></span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">&#x27;testdir&#x27;</span>: Is a directory</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> -ir testdir <span class="comment"># 将目录及以下之档案亦逐一删除 #</span></span><br><span class="line"><span class="built_in">rm</span>: remove directory <span class="string">&#x27;testdir&#x27;</span>? y</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> -rf * <span class="comment"># 删除当前目录下的所有文件及目录，无法恢复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># touch</span></span><br><span class="line">$ <span class="built_in">touch</span> testfile <span class="comment"># 创建空白文件或者修改文件的时间属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir</span></span><br><span class="line">$ <span class="built_in">mkdir</span> testdir  <span class="comment"># 创建目录testdir</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p testdir1/testdir2 <span class="comment"># 在当前目录下的testdir1目录中创建一个目录testdir2，若testdir1目录不存在，则建立一个，不加-p会失败</span></span><br></pre></td></tr></table></figure>
<h2 id="echo%2Fcat%2Fmore%2Fless" tabindex="-1">echo/cat/more/less</h2>
<h3 id="%E4%BD%9C%E7%94%A8-1" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>echo命令</code>用于显示输入的内容</li>
<li>Linux <code>cat命令</code>用于把档案串连接后传到基本输出（屏幕或加 &gt; fileName 到另一个档案）</li>
<li>Linux <code>more命令</code>以翻页形式显示文件内容，按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示</li>
<li>Linux <code>less命令</code>与<code>more命令</code>功能正好相反</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo</span></span><br><span class="line">$ <span class="built_in">echo</span> It is a <span class="built_in">test</span>.</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;\&quot;It is a test\&quot;&quot;</span></span><br><span class="line">$ <span class="built_in">read</span> name</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> It is a test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat</span></span><br><span class="line">$ <span class="built_in">cat</span> -n textfile1 &gt; textfile2 <span class="comment"># 把 textfile1 的档案内容加上行号后输入 textfile2 这个档案里</span></span><br><span class="line">$ <span class="built_in">cat</span> -b textfile1 textfile2 &gt;&gt; textfile3 <span class="comment"># 把 textfile1 和 textfile2 的档案内容加上行号（空白行不加）之后将内容附加到 textfile3 里。</span></span><br><span class="line">$ <span class="built_in">cat</span> /dev/null &gt; /etc/test.txt <span class="comment"># 清空/etc/test.txt档案内容</span></span><br><span class="line">$ <span class="built_in">cat</span> /dev/fd0 &gt; OUTFILE <span class="comment"># 用来制作镜像文件</span></span><br><span class="line">$ <span class="built_in">cat</span> IMG_FILE &gt; /dev/fd0 <span class="comment"># 把 image file 写到软碟</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># more</span></span><br><span class="line">$ more -s testfile <span class="comment"># 逐页显示 testfile 文档内容，如有连续两行以上空白行则以一行空白行显示。</span></span><br><span class="line">$ more +20 testfile <span class="comment"># 从第 20 行开始显示 testfile 之文档内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># less</span></span><br><span class="line">$ less log2013.log</span><br><span class="line">$ ps -ef |less  <span class="comment"># ps查看进程信息并通过less分页显示</span></span><br></pre></td></tr></table></figure>
<h2 id="shutdown%2Fpoweroff%2Freboot" tabindex="-1">shutdown/poweroff/reboot</h2>
<h3 id="%E4%BD%9C%E7%94%A8-2" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>shutdown命令</code>可以用来进行关机程序，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机。</li>
<li>Linux <code>poweroff命令</code>立即执行关机指令</li>
<li>Linux <code>reboot命令</code>立即执行重启指令</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-2" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shutdown</span></span><br><span class="line">$ <span class="built_in">sudo</span> shutdown -h now  <span class="comment"># 立刻关机</span></span><br><span class="line">$ <span class="built_in">sudo</span> shutdown +5 “System will shutdown after 5 minutes” <span class="comment"># 5分钟够关机并显示警告信息</span></span><br><span class="line">$ <span class="built_in">sudo</span> shutdown -r now <span class="comment"># 立刻重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># poweroff</span></span><br><span class="line">$ <span class="built_in">sudo</span> poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot</span></span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
<h2 id="zip%2Funzip%2Fgzip%2Ftar" tabindex="-1">zip/unzip/gzip/tar</h2>
<h3 id="%E4%BD%9C%E7%94%A8-3" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>zip命令</code>用于压缩文件</li>
<li>Linux <code>unzip命令</code>用于解压缩zip文件</li>
<li>Linux <code>gzip命令</code>用于压缩文件</li>
<li>Linux <code>tar命令</code>用于备份文件</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-3" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zip</span></span><br><span class="line">$ zip -v cp.zip a.c b.c c.c e.c  <span class="comment"># 压缩文件</span></span><br><span class="line">$ zip -r cp3.zip /root/          <span class="comment"># 压缩目录</span></span><br><span class="line">$ zip -dv cp.zip a.c             <span class="comment"># 从压缩文件中删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unzip</span></span><br><span class="line">$ unzip -l abc.zip     <span class="comment"># 显示压缩文件信息</span></span><br><span class="line">$ unzip -v abc.zip     <span class="comment"># 解压文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip</span></span><br><span class="line">$ gzip *     <span class="comment"># 压缩目录下的所有文件</span></span><br><span class="line">$ gzip -dv * <span class="comment"># 解压文件，并列出详细信息</span></span><br><span class="line">$ gzip -l *  <span class="comment"># 显示压缩文件的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar</span></span><br><span class="line">$ tar -cvf test.tar /etc     <span class="comment"># 归档文件</span></span><br><span class="line">$ tar -xvf test.tar          <span class="comment"># 还原文件</span></span><br><span class="line">$ tar -tvf test.tar          <span class="comment"># 列出文件内容</span></span><br><span class="line">$ tar -czvf test.tar.gz /etc <span class="comment"># 归档并压缩文件</span></span><br><span class="line">$ tar -xzvf test.tar.gz      <span class="comment"># 还原并解压文件</span></span><br></pre></td></tr></table></figure>
<h2 id="chmod%2Fchown%2Fchgrp" tabindex="-1">chmod/chown/chgrp</h2>
<h3 id="%E4%BD%9C%E7%94%A8-4" tabindex="-1">作用</h3>
<ul>
<li>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。</li>
<li>利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</li>
</ul>
<h3 id="chmod%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89" tabindex="-1">chmod参数含义</h3>
<ul>
<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li>
<li>
<ul>
<li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li>
</ul>
</li>
<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-4" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod</span></span><br><span class="line">$ <span class="built_in">chmod</span> ugo+r file1.txt   <span class="comment"># 将文件 file1.txt 设为所有人皆可读取</span></span><br><span class="line">$ <span class="built_in">chmod</span> u+x ex1.py        <span class="comment"># 将 ex1.py 设定为只有该文件拥有者可以执行</span></span><br><span class="line">$ <span class="built_in">chmod</span> 777 file          <span class="comment">#</span></span><br><span class="line">$ <span class="built_in">chmod</span> abc file          <span class="comment"># a,b,c各为一个数字，分别表示User、Group、及Other的权限。r=4，w=2，x=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chown</span></span><br><span class="line">$ <span class="built_in">chown</span> jessie:<span class="built_in">users</span> file1.txt   <span class="comment"># 将文件 file1.txt 的拥有者设为 users 群体的使用者 jessie</span></span><br></pre></td></tr></table></figure>
<h2 id="yum%2Fapt%2Frpm" tabindex="-1">yum/apt/rpm</h2>
<h3 id="%E4%BD%9C%E7%94%A8-5" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>yum命令</code>是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器</li>
<li>Linux <code>apt命令</code>是一个为Debian系列系统（Ubuntu，Kubuntu等等）开发的高级包管理器</li>
<li>Linux <code>rpm命令</code>是RPM软件包的管理工具</li>
</ul>
<h3 id="yum%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" tabindex="-1">yum常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">yum check-update</td>
<td style="text-align:left">列出所有可更新的软件清单命令</td>
</tr>
<tr>
<td style="text-align:center">yum update</td>
<td style="text-align:left">更新所有软件命令</td>
</tr>
<tr>
<td style="text-align:center">yum install &lt;package_name&gt;</td>
<td style="text-align:left">仅安装指定的软件命令</td>
</tr>
<tr>
<td style="text-align:center">yum update &lt;package_name&gt;</td>
<td style="text-align:left">仅更新指定的软件命令</td>
</tr>
<tr>
<td style="text-align:center">yum list</td>
<td style="text-align:left">列出所有可安裝的软件清单命令</td>
</tr>
<tr>
<td style="text-align:center">yum remove &lt;package_name&gt;</td>
<td style="text-align:left">删除软件包命令</td>
</tr>
<tr>
<td style="text-align:center">yum search <keyword></td>
<td style="text-align:left">查找软件包命令</td>
</tr>
<tr>
<td style="text-align:center">yum clean packages</td>
<td style="text-align:left">清除缓存目录下的软件包</td>
</tr>
<tr>
<td style="text-align:center">yum clean headers</td>
<td style="text-align:left">清除缓存目录下的 headers</td>
</tr>
<tr>
<td style="text-align:center">yum clean oldheaders</td>
<td style="text-align:left">清除缓存目录下旧的 headers</td>
</tr>
<tr>
<td style="text-align:center">yum clean all</td>
<td style="text-align:left">清除缓存目录下的软件包及旧的headers</td>
</tr>
</tbody>
</table>
<h3 id="yum%E5%9B%BD%E5%86%85%E6%BA%90" tabindex="-1">yum国内源</h3>
<blockquote>
<p>具体帮助指南见<a class="link"   href="http://mirrors.163.com/.help/centos.html" >163CentOS镜像使用帮助<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>1、首先备份/etc/yum.repos.d/CentOS-Base.repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<p>2、下载对应版本repo文件, 放入/etc/yum.repos.d/</p>
<ul>
<li>CentOS5 ：<a class="link"   href="http://mirrors.163.com/.help/CentOS5-Base-163.repo" >http://mirrors.163.com/.help/CentOS5-Base-163.repo<i class="fas fa-external-link-alt"></i></a></li>
<li>CentOS6 ：<a class="link"   href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" >http://mirrors.163.com/.help/CentOS6-Base-163.repo<i class="fas fa-external-link-alt"></i></a></li>
<li>CentOS7 ：<a class="link"   href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" >http://mirrors.163.com/.help/CentOS7-Base-163.repo<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>3、运行以下命令生成缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="apt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" tabindex="-1">apt常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">apt-cache pkgnames</td>
<td style="text-align:left">列出所有的软件包</td>
</tr>
<tr>
<td style="text-align:center">apt-cache search</td>
<td style="text-align:left">查找软件包</td>
</tr>
<tr>
<td style="text-align:center">apt-cache depends</td>
<td style="text-align:left">显示软件包的依赖性关系</td>
</tr>
<tr>
<td style="text-align:center">apt-get update</td>
<td style="text-align:left">更新本地apt-get的本地数据库</td>
</tr>
<tr>
<td style="text-align:center">apt-get install &lt;package_name&gt;</td>
<td style="text-align:left">安装某个软件包及其相关软件包</td>
</tr>
<tr>
<td style="text-align:center">apt-get remove package_name</td>
<td style="text-align:left">删除该软件包，同时会删除依赖于它的软件包</td>
</tr>
<tr>
<td style="text-align:center">apt-get clean</td>
<td style="text-align:left">删除保存在缓存目录下(/var/cache/apt/archives)的被下载的软件包</td>
</tr>
<tr>
<td style="text-align:center">apt-get upgrade &lt;package_name&gt;</td>
<td style="text-align:left">升级指定的软件包，并升级其依赖的软件包</td>
</tr>
</tbody>
</table>
<h3 id="rpm%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E5%91%BD%E4%BB%A4" tabindex="-1">rpm常用参数命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rpm -q <package-name></td>
<td style="text-align:left">查询程序是否安装</td>
</tr>
<tr>
<td style="text-align:center">rpm -ivh <package-name>.rpm</td>
<td style="text-align:left">安装rpm程序</td>
</tr>
<tr>
<td style="text-align:center">rpm -e <package-name></td>
<td style="text-align:left">卸载rpm程序</td>
</tr>
<tr>
<td style="text-align:center">rpm -Uvh <package-name>.rpm</td>
<td style="text-align:left">升级rpm程序</td>
</tr>
<tr>
<td style="text-align:center">rpm -qpR <package-name>.rpm</td>
<td style="text-align:left">查看程序依赖关系</td>
</tr>
<tr>
<td style="text-align:center">rpm -ivh --relocate /=/opt/gaim <package-name>.rpm</td>
<td style="text-align:left">指定安装目录</td>
</tr>
</tbody>
</table>
<h2 id="%E5%B8%B8%E7%94%A8%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4" tabindex="-1">常用帮助命令</h2>
<h3 id="%E4%BD%9C%E7%94%A8-6" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>man命令</code>用户查看帮助信息</li>
<li>Linux <code>info命令</code>用于查看帮助信息</li>
<li>Linux <code>help参数</code>用于查看帮助信息</li>
<li>Linux <code>version参数</code>用于查看程序版本</li>
<li>Linux <code>history命令</code>用于查看历史命令</li>
<li>Linux <code>uname命令</code>用于显示系统信息</li>
<li>Linux <code>who命令</code>用于查看当前用户登录状态</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-5" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># man</span></span><br><span class="line">$ man <span class="built_in">ls</span>  <span class="comment"># 显示ls命令的使用手册</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">$ info <span class="built_in">ls</span>  <span class="comment"># 查看ls命令信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># help</span></span><br><span class="line">$ <span class="built_in">ls</span> --<span class="built_in">help</span>  <span class="comment"># 查看ls命令帮助</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># version</span></span><br><span class="line">$ <span class="built_in">ls</span> --version <span class="comment"># 查看ls命令版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history</span></span><br><span class="line">$ <span class="built_in">history</span> | grep ssh <span class="comment"># 查找历史命令，并列出包含ssh的项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uname</span></span><br><span class="line">$ <span class="built_in">uname</span> -a  <span class="comment"># 显示系统信息。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4" tabindex="-1">常用系统命令</h2>
<h3 id="%E4%BD%9C%E7%94%A8-7" tabindex="-1">作用</h3>
<ul>
<li>Linux <code>su</code>用于切换用户</li>
<li>Linux <code>sudo</code>用于执行管理员权限操作</li>
<li>Linux <code>passwd</code>用于改变用户密码</li>
<li>Linux <code>exit</code>用于用于退出当前shell</li>
</ul>
<h3 id="%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-6" tabindex="-1">使用示例</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># su</span></span><br><span class="line">$ su   <span class="comment"># su   不改变环境变量</span></span><br><span class="line">$ su - <span class="comment">#  su - 改变环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo</span></span><br><span class="line">$ <span class="built_in">sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># passwd</span></span><br><span class="line">$ passwd <span class="comment"># 用于改变用户密码</span></span><br></pre></td></tr></table></figure>
<h2 id="6%E4%B8%AA%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C" tabindex="-1">6个快捷操作</h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ctrl+alt+[F1]~[F7]</td>
<td style="text-align:left">纯文本接口和图形界面切换</td>
</tr>
<tr>
<td style="text-align:center">ctrl+r</td>
<td style="text-align:left">反向搜索执行过的命令</td>
</tr>
<tr>
<td style="text-align:center">ctrl+z</td>
<td style="text-align:left">暂停某个程序</td>
</tr>
<tr>
<td style="text-align:center">ctrl+c</td>
<td style="text-align:left">中止某个程序</td>
</tr>
<tr>
<td style="text-align:center">ctrl+d</td>
<td style="text-align:left">键盘输入结束（EOF）</td>
</tr>
<tr>
<td style="text-align:center">tab</td>
<td style="text-align:left">命令和文档补全</td>
</tr>
</tbody>
</table>
<h2 id="%E4%B9%9D%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7" tabindex="-1">九个常用符号</h2>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:left">根目录</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:left">家目录</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:left">上一个工作目录</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">当前目录</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:left">当前目录上一层目录</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:left">放在启动参数后面表示设置此进程为后台进程</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:left">从历史记录中使用命令号来运行命令，譬如!233</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:left">root用户提示符</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">一般用户提示符</td>
</tr>
</tbody>
</table>
<h2 id="linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" tabindex="-1">Linux环境变量</h2>
<p>环境变量和其他命令结合在一起使用，需要使用<code>$</code>符号作为前缀一起使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=en_US</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LANG</td>
<td style="text-align:left">当前语系</td>
</tr>
<tr>
<td style="text-align:center">PATH</td>
<td style="text-align:left">当前环境路径</td>
</tr>
</tbody>
</table>
<h2 id="%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" tabindex="-1">参考链接</h2>
<ul>
<li><a class="link"   href="http://www.runoob.com/linux" >linux命令大全<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.oschina.net/translate/useful-linux-commands-for-newbies" >对 Linux 新手非常有用的 20 个命令<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://man.linuxde.net/rpm" >Linux命令大全<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>低概率问题分析解决</title>
    <url>/develop/low-probability-analysis/</url>
    <content><![CDATA[<p>在软件开发过程中，经常会遇到出现概率很低，但只要出现了就会对系统可用性影响很大的问题。这类问题总是在JIRA上被挂起，时不时的在测试中被报出来。不解决是永不歇停的。因此，在这里根据我遇到的各种低概率问题，整理出一套解决问题的方法，希望在解决其他低概率问题时能够有些借鉴。<span id="more"></span></p>
<h2 id="%E6%98%8E%E7%A1%AE%E9%97%AE%E9%A2%98%E7%8E%B0%E8%B1%A1" tabindex="-1">明确问题现象</h2>
<p>明确问题现象对于解决分析问题有很大的帮助。有时候，我们看到的现象只是表面的，或者只是具体现象的某一部分。以视频会议为例，当出现视频画面卡顿，如果我们只关注这一现象，很有可能认为是丢包了。但卡顿这个现象和更多的细节有关：</p>
<ul>
<li>卡顿周期：是一直卡顿还是周期性出现卡顿，卡顿周期是多少？</li>
<li>是否丢包：丢包率是多少？是否持续丢包？</li>
<li>卡顿发生时间：是白天还是晚上？是工作日还是周末？</li>
</ul>
<p>越多的信息能够更好地帮助我们分析问题，不要急于下定论。低概率问题也存在出现的时候，出现时首先要仔细观察，明确问题现象。由于低概率问题出现概率很低，这次观察的结果至关重要。</p>
<p>这里需要谨记：我们要关注哪些现象与我们具体的业务有关。因此利用自己的经验，但不要局限于现存的经验，开阔的思维有利于问题的解决。</p>
<h2 id="%E5%BC%95%E5%85%A5%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7" tabindex="-1">引入分析工具</h2>
<p>团队在项目一开始就要制订潜在的问题分析工具开发计划。分析工具能够帮我们定位深层次的现象，并将干扰现象排除在分析之外。一般情况下，团队需要哪些工具帮助分析是很好规划的。工具可能是产品软件的自带功能，也可以是第三方或者自研的小工具。在我们视频会议团队，存在如下分析工具：</p>
<pre class="mermaid">graph LR

	分析工具-->第三方
	第三方-->Wireshark
	第三方-->IPerf3.0
	第三方-->SocketTools
	第三方-->Elecard-StreamEye-Tools
	第三方-->YUVPlayer
	第三方-->MFTools
	第三方-->Network-Emulator-Toolkit
	分析工具-->自研
	自研-->音频分析小工具
	自研-->视频分析小工具
	自研-->音视频数据Dump
	自研-->日志分析工具
	自研-->煲鸡功能
	自研-->性能测试小工具</pre>
<p>如果因为缺少分析工具，而导致存在的问题迟迟不得解决，或是解决迟缓。开发人员自己需要反思。针对于视频卡顿问题，在发现时我们利用了两个工具：视频分析小工具和Wireshark。通过WireShark我们定位到当前网络没有丢包。通过视频分析小工具我们定位到问题出现在接收端。现在我们能够确定的当前现象是：</p>
<ul>
<li>视频卡顿</li>
<li>网络无丢包</li>
<li>周期性卡顿</li>
<li>夜晚发生</li>
</ul>
<h2 id="%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E7%8E%B0%E8%B1%A1" tabindex="-1">分析问题现象</h2>
<p>不要急着去看代码。先分析可能导致这个现象的原因，并根据各种可能原因做好准备。力求一旦下次出现，一次性定位问题。上面的例子总体现象是卡顿，包含了三个细节内容，针对现象和细节部分做针对性分析：</p>
<pre class="mermaid">graph LR

	卡顿问题-->卡顿现象
	卡顿现象-->采集/预处理/编码/发送
	采集/预处理/编码/发送-->排除
	卡顿现象-->网络波动
	卡顿现象-->接收
	卡顿现象-->解码
	卡顿现象-->处理
	卡顿现象-->渲染
	卡顿问题-->周期性卡顿
	周期性卡顿-->周期性网络波动
	周期性卡顿-->代码周期性丢包
	卡顿问题-->无丢包
	无丢包-->排除网络丢包因素
	无丢包-->网络抖动
	卡顿问题-->夜晚发生
	夜晚发生-->网络因素影响</pre>
<p>现象分析可能会引入一系列可能原因，先将所有可能的原因罗列出来，然后逐项排查。无法排除的就是我们分析的关键。对问题正确的分析，能够帮助我们少走很多弯路，这个需要耐心。</p>
<h2 id="%E8%B0%83%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90" tabindex="-1">调用链分析</h2>
<p>对于问题现象一定存在着一条调用链，这个调用链中某一个链条出错，进而导致问题发生。通过调用链分析，我们能够更深层次的理解这个问题的可能原因，并且有可能在分析过程中就找打了问题的根源。</p>
<p>对于调用链简单的问题，可以直接评审代码，尝试找到问题。但是对于调用链很复杂，涉及很多模块，直接评审代码就和大海捞针一样。此时需要做的是熟悉核心调用步骤。如果代码是自己开发的，只要时间不长大多都熟悉，但是如果是长时间未维护或者是第三方代码，熟悉核心调用步骤就极为重要。</p>
<p>针对视频卡顿场景，需要熟悉的调用链步骤包含：RTP接收、RTP组帧、视频解码、视频处理、视频渲染。</p>
<h2 id="%E6%BD%9C%E5%9C%A8%E5%8E%9F%E5%9B%A0%E5%9F%8B%E7%82%B9" tabindex="-1">潜在原因埋点</h2>
<p>调用链分析无法找到原因时，就需要进行潜在原因埋点。埋点通常是通过日志和数据上报。埋点要注意粒度、频度和准确度问题。</p>
<ul>
<li>粒度：调用链核心步骤</li>
<li>频度：不影响正常数据分析</li>
<li>准确度：埋点信息要全面，埋点位置合理</li>
</ul>
<p>针对视频卡顿场景，最终埋点的地方为：RTP接收出口、RTP组帧出口、视频解码出口、视频处理出口、视频渲染出口。</p>
<h2 id="%E7%85%B2%E9%B8%A1%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95" tabindex="-1">煲鸡压力测试</h2>
<p>低概率问题其核心表现在于出现概率低。要突破概率限制，有两个办法：增加尝试次数和增加并发。两个方法的具体表现为：煲鸡测试和压力测试。对于压力测试，使用压力测试工具，增加大并发；对于煲鸡测试，利用煲鸡小工具，增加尝试次数。</p>
<p>压力测试和煲鸡测试都要考虑环境问题。这个环境是根据问题现象的推导出来的。针对视频卡顿问题，有一个现象是<strong>夜晚发生</strong>，意味着可能网络并不差。因此我们在煲鸡测试时，特定针对这一现象，在周末过来煲鸡复现。</p>
<p>煲鸡是个拼耐心的过程，有些问题是可以通过其他手段监控提醒，有些问题是需要时刻盯着，否则转瞬即逝，还有一些问题是需要我们反复操作，记住操作步骤。</p>
<h2 id="%E5%AE%9A%E4%BD%8D%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98" tabindex="-1">定位解决问题</h2>
<p>等煲鸡测试复现该问题。可能很多次才会复现一次。上面的所有手段也无法保证我们一次解决问题。但也为我们向解决问题迈了一大步。如果经过一次复现，通过埋点数据，一次性解决问题皆大欢喜。如果不能解决，埋点数据能够为我们进一步分析问题。如果上次埋点的数据对你一点用都没有，这个时候就要好好反思。大多数情况下，埋点的数据会给我提供更多的思路。这个时候，可以通过评审代码，或者增加核心埋点数据，争取下次一次性解决问题。</p>
<div id="flowchart-0" class="flow-chart"></div>
<h2 id="%E5%8F%8D%E6%80%9D%E6%80%BB%E7%BB%93" tabindex="-1">反思总结</h2>
<p>问题解决了，这个时候就要用手术刀来剖析自己了。剖析分为三点：</p>
<ul>
<li>解决问题是否优雅</li>
<li>问题根源分析</li>
<li>潜在问题排查</li>
<li>后续问题避免</li>
</ul>
<h2 id="%E4%BD%8E%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B" tabindex="-1">低概率问题处理流程</h2>
<p>有些低概率问题就出现了一次，后续再也没出现，需要执行一定的流程。这个流程需要和测试人员共同制定。一个简单的流程如下：</p>
<div id="flowchart-1" class="flow-chart"></div>
<h2 id="%E8%99%9A%E5%BF%83%E6%8E%A5%E5%8F%97%E6%89%B9%E8%AF%84%E5%92%8C%E6%8C%87%E5%AF%BC" tabindex="-1">虚心接受批评和指导</h2>
<p>解决问题的过程一定不是一帆风顺的，不要妄下定论，保持耐心，开阔思路。对于外界的批评和指导都要需求接收。很多时候自以为是会让我们忽略一些问题，拒绝指导又会让我们难以解决一些问题。成长的机会白白浪费，问题还得不到解决。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
op1=>operation: 发掘现象
op2=>operation: 求助工具
op3=>operation: 深挖分析
op4=>operation: 调用链分析
op5=>operation: 原因埋点
op6=>operation: 煲鸡压测
cond=>condition: 定位解决
e=>end: 结束

st->op1->op2->op3->op4->op5->cond
cond(yes)->e
cond(no)->op3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始
op1=>operation: 指定开发人员
op2=>operation: 尝试分析解决
cond1=>condition: 是否定位问题
op3=>operation: 解决问题
op4=>operation: 当前版本煲鸡一定次数
cond2=>condition: 是否复现
op5=>operation: 降低优先级
op6=>operation: 下个版本煲鸡一定次数
cond3=>condition: 是否复现
op7=>operation: 问题挂起
op8=>operation: 最终评审
e=>end: 结束

st->op1->op2->cond1
cond1(yes,right)->op3
cond1(no)->op4->cond2
cond2(yes,right)->op2
cond2(no)->op5->op6->cond3
cond3(yes,right)->op3->e
cond3(no)->op7->op8->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>视频会议中的音视频接口</title>
    <url>/develop/media-interface/</url>
    <content><![CDATA[<p>接口是两实体交换资料的介质，交换资料的实体可以是软件、电脑硬件、外部设备、人等等。有些接口是双向的，可以收发信息，譬如触摸屏；有些接口是单向的，仅能收或者发信息，譬如鼠标或喇叭。人类与计算机软体之间的接口是用户界面；电脑和外部设备等计算机硬件之间的接口是硬件接口；电脑等计算机软件之间的接口是软件接口。<span id="more"></span></p>
<p>在视频会议设备中，存在丰富的硬件外设和硬件接口。设计一款优秀的视频会议设备，需要搭配合适的硬件外设，需要对音视频硬件接口能力有深入的认知。</p>
<h2 id="%E9%9F%B3%E9%A2%91%E6%8E%A5%E5%8F%A3" tabindex="-1">音频接口</h2>
<p>音频接口是连接麦克风和其他声源计算机的设备，其在模拟和数字信号之间起到桥梁连接的作用。</p>
<h3 id="%E9%9F%B3%E9%A2%91%E6%8E%A5%E5%8F%A3%E5%88%86%E7%B1%BB" tabindex="-1">音频接口分类</h3>
<p>音频接口按照传输信号的类型可分为模拟音频接口和数字音频接口，按照接线方式可分为平衡接口与非平衡接口。</p>
<p>模拟音频是在模拟状态下记录、处理、传输和处理音频信号的技术。常见的模拟音频接口为TRS接口、XLR卡侬头、RCA莲花头。</p>
<p>数字音频是通过数字信号处理的手段，记录、存储、编辑、压缩或播放音频信号的技术。常见的数字音频接口为AES/EBU物理接口、S/PDIF接口、同轴接口以及光纤接口。</p>
<p>平衡传输接口使用两个通道分别传送电压大小相同而相位相反的信号。接收端设备将这两组信号相减，干扰信号就被抵消掉，从而获得高质量的模拟信号。常见的平衡传输音频接口为TRS接口、XLR卡侬头。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/balanced-transmission-interface.png"
                        alt="balanced-transmission-interface"
                 ></p>
<p>非平衡传输接口由一条负责传送信号的信号线和一条接地线组合而成。信号在传输过程中，线材会受到外界干扰通过话放或功放的二次放大，由于抗噪声能力比较弱，所以容易输出一段带有噪音的声音。常见的非平衡传输音频接口为TS接口、RCA莲花头。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/non-balanced-transmission-interface.png"
                        alt="non-balanced-transmission-interface"
                 ></p>
<p>Line Out是一个音频输出接口，旨在将线性音频信号发送给其他设备，Line In是一个音频输入接口，用于接受来自另一个设备的线性音频信号。Mic In是一个音频输入接口，用来连接麦克风录音使用。</p>
<p>Line In和Mic In的区别在于，Mic In需要有前置放大器，也就是麦克风本身输出功率小，必须要有一个外部的放大设备来放大音频信号，Mic In接口就是起到这个作用。譬如卡农口就是Mic In，需要48V幻想电源。</p>
<h3 id="%E5%B8%B8%E7%94%A8%E9%9F%B3%E9%A2%91%E6%8E%A5%E5%8F%A3" tabindex="-1">常用音频接口</h3>
<h4 id="trs%E6%8E%A5%E5%8F%A3" tabindex="-1">TRS接口</h4>
<p>TRS，Tip（尖）、Ring（环）、Sleeve（套），一般用于接插耳机和麦克风。以下图为例：</p>
<ul>
<li>① - Sleeve，套，接地；</li>
<li>② - Ring，环，立体声的右沟道；</li>
<li>③ - Tip，尖，上为立体声的左沟道，下为单声道的主声道</li>
<li>④ - 绝缘环</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/trs.png"
                         style="zoom:60%;" 
                 >
<p>依据接口的环（R）数不同可以将接口分为TS（无环，尖和套各提供一个接触点）、TRS（一环，尖、环、套共提供三个接触点）、TRRS（两环，环多提供一个接触点）。常见接口尺寸包含1/4&quot;（6.3mm）、1/8&quot;（3.5mm）、3/32&quot;（2.5mm）。以下图为例，从左到右分别为：</p>
<ul>
<li>2.5mm 单声道（TS）：用于早期掌上随身听或移动电话的耳机连接，现多用于为小型设备输入/输出电源。</li>
<li>3.5mm 单声道（TS）：小二芯，常用于耳机、小提琴、电吉他等。</li>
<li>3.5mm 立体声（TRS）：小三芯，常用于随身听、移动电话、录音笔等3C产品的耳机和音频输出。</li>
<li>6.35mm 立体声（TRS）：大三芯，常用于中大型音频设备，譬如台式CD播放器、专业录音室耳机等。</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/trs-class.jpg"
                         alt="trs-class" style="zoom: 60%;" 
                 >
<p>大三芯用于立体声信号的传输，一般采用平衡式接法，用于传输平衡信号；大二芯用于单声道信号的传输，一般采用非平衡式接法，用于传输非平衡信号。大二芯相对于大三芯少一个环（Ring）。</p>
<ul>
<li>大三芯接法</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/trs-transmission-3.png"
                        alt="trs-transmission-3"
                 ></p>
<ul>
<li>大二芯接法</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/trs-transmission-2.png"
                        alt="trs-transmission-2"
                 ></p>
<h4 id="xlr%E5%8D%A1%E4%BE%AC%E5%A4%B4" tabindex="-1">XLR卡侬头</h4>
<p>卡侬头是一种专为电容麦等高端话筒服务的音频接口头，常用于连接专业麦克风、影音器材、舞台设备等，并使用平衡传输方式，需要幻象供电（48V）。卡侬头分为公母两种，通常为3脚，如下图所示：</p>
<ul>
<li>1 - 底架接地（线缆保护罩）</li>
<li>2 - 正极终端（热）</li>
<li>3 - 回路终端（冷）</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/xlr.svg"
                         alt="xlr" style="zoom:67%;" 
                 >
<p>卡侬头一般采用平衡式接法，用于传输平衡信号。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/xlr-transmission.png"
                        alt="xlr-transmission"
                 ></p>
<h4 id="rca%E8%8E%B2%E8%8A%B1%E5%A4%B4" tabindex="-1">RCA莲花头</h4>
<p>RCA接口采用同轴传输信号的方式，中轴用来传输信号，外沿一圈的基础层用来接地。可以用来传输模拟视频或音频、数字音频等。常用于连接调音台、电视机等。</p>
<p>每一根RCA线缆负责传输一个声道的音频信号。因此，可以根据对声道的实际需要，使用与之数量相匹配的RCA线缆。RCA接口常以颜色区分，黄色用于复合视频，模拟立体声音频中以白色（或黑色）作左声道，红色作右声道。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/rca.jpg"
                         alt="rca" style="zoom:67%;" 
                 >
<p>莲花头一般采用非平衡式接法，用于传输非平衡信号。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/rca-transmission.png"
                        alt="rca-transmission"
                 ></p>
<h4 id="%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94%E8%A1%A8" tabindex="-1">接口对比表</h4>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/audio-interface.png"
                        alt="audio-interface"
                 ></p>
<h2 id="%E8%A7%86%E9%A2%91%E6%8E%A5%E5%8F%A3" tabindex="-1">视频接口</h2>
<p>视频接口的主要作用是将视频信号输出到外部设备，或者将外部采集的视频信号收集起来。</p>
<h3 id="%E8%A7%86%E9%A2%91%E6%8E%A5%E5%8F%A3%E5%88%86%E7%B1%BB" tabindex="-1">视频接口分类</h3>
<p>视频接口按照传输信号的类型可以分为模拟视频接口和数字视频接口。常用的模拟视频接口包含：VGA、AV、YUV、S-Video等，常用的数字视频接口包含：USB、SDI、HDMI、DVI-D、Mini-DP、POE等。</p>
<h3 id="%E5%B8%B8%E7%94%A8%E8%A7%86%E9%A2%91%E6%8E%A5%E5%8F%A3" tabindex="-1">常用视频接口</h3>
<h4 id="vga" tabindex="-1">VGA</h4>
<p>VGA接口，Video Graphics Array connector，是一种3排共15针的DE-15，用来传输模拟视频信号。VGA接口通常用在电脑的显卡、显示器及其他设备。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/vga-pinout.svg"
                        alt="vga-pinout"
                 ></p>
<h4 id="dvi" tabindex="-1">DVI</h4>
<p>DVI接口，Digital Visual Interface，是用来传输未经压缩的数字化影像。常用在LCD、数字投影机等显示设备上。</p>
<ul>
<li>DVI-D，数字信号</li>
<li>DVI-A，模拟信号</li>
<li>DVI-I，混合数字/模拟信号</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/dvi.webp"
                        alt="dvi"
                 ></p>
<h2 id="%E5%BD%B1%E9%9F%B3%E6%8E%A5%E5%8F%A3" tabindex="-1">影音接口</h2>
<p>部分音视频接口即支持音频传输也支持视频传输，譬如USB、HDMI、DP等。</p>
<h3 id="%E5%B8%B8%E7%94%A8%E5%BD%B1%E9%9F%B3%E6%8E%A5%E5%8F%A3" tabindex="-1">常用影音接口</h3>
<h4 id="usb" tabindex="-1">USB</h4>
<p>USB，Universal Serial Bus，通用串行总线，是连接计算机系统与外部设备的一种串口总线标准。<strong>所有的USB接口共享一个USB总线带宽</strong>，如果几台设备共用一个USB通道，主控制芯片会对每台设备可支配的带宽进行分配、控制。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/usb.jpg"
                        alt="usb"
                 ></p>
<p>现有USB标准，按照速度等级和连接方式，可以将USB分为以下七种版本：</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">传输速率bps</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">USB 2.0 LowSpeed</td>
<td style="text-align:center">1.5 mbps</td>
</tr>
<tr>
<td style="text-align:center">USB 2.0 FullSpeed</td>
<td style="text-align:center">12 mbps</td>
</tr>
<tr>
<td style="text-align:center">USB 2.0 HiSpeed</td>
<td style="text-align:center">480 mbps</td>
</tr>
<tr>
<td style="text-align:center">USB 3.2 Gen 1</td>
<td style="text-align:center">5 gbps</td>
</tr>
<tr>
<td style="text-align:center">USB 3.2 Gen 2</td>
<td style="text-align:center">10 gbps</td>
</tr>
<tr>
<td style="text-align:center">USB 3.2 Gen 2x2</td>
<td style="text-align:center">20 gbps</td>
</tr>
</tbody>
</table>
<h4 id="hdmi" tabindex="-1">HDMI</h4>
<p>HDMI，High Definition Multimedia Interface，高清多媒体界面，可以发送未压缩的音频及视频信号。常用于机顶盒、DVD播放器、个人电脑、电视游戏机等设备。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/hdmi.svg"
                        alt="hdmi"
                 ></p>
<h4 id="sdi" tabindex="-1">SDI</h4>
<p>SDI，Serial Digital Interface，数字分量串行接口，在摄像机领域广泛使用。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/sdi.jpg"
                         alt="sdi" style="zoom:67%;" 
                 >
<p>SDI接口按照传输速率分为四类：</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">传输速率bps</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SD-SDI</td>
<td style="text-align:center">270 mbps</td>
</tr>
<tr>
<td style="text-align:center">HD-SDI</td>
<td style="text-align:center">1.485 mbps</td>
</tr>
<tr>
<td style="text-align:center">3G-SDI</td>
<td style="text-align:center">2.97 gbps</td>
</tr>
<tr>
<td style="text-align:center">12G-SDI</td>
<td style="text-align:center">12 gbps</td>
</tr>
</tbody>
</table>
<h4 id="dp" tabindex="-1">DP</h4>
<p>DP，Display Port，数字视频接口标准，主要用于视频源与显示器等设备的连接。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/dp.svg"
                         alt="dp" style="zoom:50%;" 
                 >
<h4 id="poe" tabindex="-1">POE</h4>
<p>POE，Power over Ethernet，POE供电，是一种可以在以太网中透过双绞线来传输电力与资料设备上的技术。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/poe.png"
                        alt="poe"
                 ></p>
<h3 id="%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94%E8%A1%A8-1" tabindex="-1">接口对比表</h3>
<table>
<thead>
<tr>
<th style="text-align:center">缩写</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">应用</th>
<th style="text-align:center">分辨率@刷新率</th>
<th style="text-align:center">传输距离</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">VGA</td>
<td style="text-align:center">模拟/视频</td>
<td style="text-align:center">显卡、显示器</td>
<td style="text-align:center">2560×1600@60Hz</td>
<td style="text-align:center">15~30m</td>
</tr>
<tr>
<td style="text-align:center">HD-SDI</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">1920×1080@30Hz</td>
<td style="text-align:center">150m</td>
</tr>
<tr>
<td style="text-align:center">3G-SDI</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">1920×1080@60Hz</td>
<td style="text-align:center">150m</td>
</tr>
<tr>
<td style="text-align:center">12G-SDI</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">3840×2160@60Hz</td>
<td style="text-align:center">150m</td>
</tr>
<tr>
<td style="text-align:center">DVI-I</td>
<td style="text-align:center">数字/视频</td>
<td style="text-align:center">显卡、显示器</td>
<td style="text-align:center">2560×1600@60Hz</td>
<td style="text-align:center">7~15m</td>
</tr>
<tr>
<td style="text-align:center">USB3.2</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">3840×2160@30Hz</td>
<td style="text-align:center">3m</td>
</tr>
<tr>
<td style="text-align:center">HDMI2.0</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">显示器、摄像头、麦克风</td>
<td style="text-align:center">3840×2160@60Hz</td>
<td style="text-align:center">15m</td>
</tr>
<tr>
<td style="text-align:center">DP1.2</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">4096×2160@60Hz</td>
<td style="text-align:center">10m</td>
</tr>
<tr>
<td style="text-align:center">DP1.4</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">7680 × 4320@60Hz</td>
<td style="text-align:center">10m</td>
</tr>
<tr>
<td style="text-align:center">POE</td>
<td style="text-align:center">数字/视频</td>
<td style="text-align:center">摄像头、麦克风</td>
<td style="text-align:center">100mbps/Cat5<br />1000mbps/Cat6</td>
<td style="text-align:center">100m/Cat5<br />150m/Cat6</td>
</tr>
</tbody>
</table>
<h2 id="%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3" tabindex="-1">串行接口</h2>
<p>串行接口主要用于串行式逐位数据传输。常用的有RS-232，其分为8针接口、9针接口和25针接口。</p>
<ul>
<li>RS232</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/rs232.jpg"
                        alt="rs232"
                 ></p>
<ul>
<li>RS-232/RS422/RS485 to RJ45</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/com-rj45-pin.png"
                        alt="com-rj45-pin"
                 ></p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">传输方式</th>
<th style="text-align:center">传输距离</th>
<th style="text-align:center">传输速率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">RS-232</td>
<td style="text-align:center">非平衡传输/单工</td>
<td style="text-align:center">15m</td>
<td style="text-align:center">20kbps</td>
</tr>
<tr>
<td style="text-align:center">RS-422</td>
<td style="text-align:center">平衡传输/全双工</td>
<td style="text-align:center">1219m</td>
<td style="text-align:center">10mbps</td>
</tr>
<tr>
<td style="text-align:center">RS-485</td>
<td style="text-align:center">平衡传输/半双工</td>
<td style="text-align:center">1219m</td>
<td style="text-align:center">10mbps</td>
</tr>
</tbody>
</table>
<h2 id="reference" tabindex="-1">Reference</h2>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL初识</title>
    <url>/develop/mysql-basic/</url>
    <content><![CDATA[<blockquote>
<p>记不住过去，看不透未来——失败。</p>
</blockquote>
<p>MySQL基础知识点罗列，帮助理清思路，主要包含安装、基本操作、MySQL约束、C/C++库使用等知识点。<span id="more"></span></p>
<h2 id="ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85mysql" tabindex="-1">Ubuntu下安装MySQL</h2>
<p>按照顺序执行下面三条指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mysql-server</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install mysql-client</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>
<p>安装完成，检查MySQL是否成功安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> netstat -tap | grep mysql</span><br></pre></td></tr></table></figure>
<p>记住安装过程中需要输入的密码，通过下列命令可以登录mysql数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p <span class="comment"># -u for user, -p for password</span></span><br></pre></td></tr></table></figure>
<p>安装后，MySQL是默认启动的，如果需要自己控制，则可以执行下列命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/mysql start</span><br><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/mysql stop</span><br><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/mysql restart</span><br><span class="line">$ <span class="built_in">sudo</span> service mysql start</span><br><span class="line">$ <span class="built_in">sudo</span> service mysql stop</span><br><span class="line">$ <span class="built_in">sudo</span> service mysql restart</span><br></pre></td></tr></table></figure>
<h2 id="mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" tabindex="-1">MySQL基本操作</h2>
<h3 id="%E7%99%BB%E5%BD%95%E6%93%8D%E4%BD%9C" tabindex="-1">登录操作</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p -P 3306 -h 127.0.0.1</span><br><span class="line"><span class="comment"># -u --user</span></span><br><span class="line"><span class="comment"># -p --passwd</span></span><br><span class="line"><span class="comment"># -P --port, 3306 is the default port for mysql</span></span><br><span class="line"><span class="comment"># -h --host</span></span><br></pre></td></tr></table></figure>
<h3 id="%E8%AE%BE%E7%BD%AE%E6%8F%90%E7%A4%BA%E7%AC%A6" tabindex="-1">设置提示符</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; prompt \u@\h \d&gt;</span><br><span class="line">PROMPT <span class="built_in">set</span> to <span class="string">&#x27;\u@\h \d&gt; &#x27;</span></span><br><span class="line">root@localhost (none) &gt; use <span class="built_in">test</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt;</span><br><span class="line"><span class="comment"># \u 设置显示用户名</span></span><br><span class="line"><span class="comment"># \h 设置显示主机</span></span><br><span class="line"><span class="comment"># \d 设置显示当前数据库</span></span><br><span class="line"><span class="comment"># \D 设置显示完整日期</span></span><br></pre></td></tr></table></figure>
<h3 id="%E6%9F%A5%E8%AF%A2%E8%AD%A6%E5%91%8A" tabindex="-1">查询警告</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql &gt; show warnings;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9" tabindex="-1">查询命令帮助</h3>
<p>使用<code>help</code>命令能够找到MySQL语句的具体使用帮助指南，我们以<em>create database</em>举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">help</span> create;</span><br><span class="line">mysql&gt; <span class="built_in">help</span> create database;</span><br><span class="line">mysql&gt; <span class="built_in">help</span> alter;</span><br><span class="line">mysql&gt; <span class="built_in">help</span> alter database;</span><br></pre></td></tr></table></figure>
<h2 id="mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C" tabindex="-1">MySQL数据库操作</h2>
<h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA" tabindex="-1">数据库创建</h3>
<p>使用<code>create database</code>创建数据库t1，并显示详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create database t1;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show databases;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show create database t1;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; create database <span class="keyword">if</span> not exists t2 character <span class="built_in">set</span> gbk;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E6%94%B9" tabindex="-1">数据库修改</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; alter database t2 character <span class="built_in">set</span> = utf8;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A0%E9%99%A4" tabindex="-1">数据库删除</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; drop database t1;</span><br></pre></td></tr></table></figure>
<h3 id="%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93" tabindex="-1">使用数据库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; use t1;</span><br><span class="line">root@localhost t1 &gt; <span class="keyword">select</span> database(); <span class="comment"># 显示当前数据库</span></span><br></pre></td></tr></table></figure>
<h3 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8" tabindex="-1">创建数据库表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table tb1(</span><br><span class="line">    -&gt; username varchar(20),</span><br><span class="line">    -&gt; age tinyint unsigned,</span><br><span class="line">    -&gt; salary <span class="built_in">float</span>(8,2) unsigned</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure>
<h3 id="%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8" tabindex="-1">查看数据库表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; show tables;           <span class="comment"># 查看数据库表列表</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show tables from <span class="built_in">test</span>; <span class="comment"># 查看数据库test表列表</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show columns from tb1; <span class="comment"># 查看数据库表结构</span></span><br></pre></td></tr></table></figure>
<h3 id="%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8" tabindex="-1">插入记录到数据库表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb1 values(<span class="string">&#x27;Tom&#x27;</span>, 25, 7863.25);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb1 values(<span class="string">&#x27;Tom&#x27;</span>, 25); <span class="comment"># error</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb1(username,salary) values(<span class="string">&#x27;John&#x27;</span>, 4500.69); <span class="comment"># ok</span></span><br></pre></td></tr></table></figure>
<h3 id="%E8%AE%B0%E5%BD%95%E6%9F%A5%E6%89%BE" tabindex="-1">记录查找</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from tb1;</span><br></pre></td></tr></table></figure>
<h2 id="mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" tabindex="-1">MySQL数据类型</h2>
<h3 id="%E6%95%B4%E5%BD%A2" tabindex="-1">整形</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">8位</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">16位</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">24位</td>
</tr>
<tr>
<td style="text-align:center">INT</td>
<td style="text-align:center">32位</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">64位</td>
</tr>
</tbody>
</table>
<h3 id="%E6%B5%AE%E7%82%B9%E5%9E%8B" tabindex="-1">浮点型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FLOAT(M,D)</td>
<td style="text-align:center">M是数字总位数，D是小数点后面的位数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE(M,D)</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%9E%8B" tabindex="-1">日期时间型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">列类型</th>
<th style="text-align:center">存储需求</th>
<th style="text-align:center">范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">8位</td>
<td style="text-align:center">1901~2155</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">24位</td>
<td style="text-align:center">-838:59:59~838:59:59</td>
</tr>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">24位</td>
<td style="text-align:center">1000.01.01~9999.12.31</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">64位</td>
<td style="text-align:center">1000.01.01 00:00:00~9999.12.31 23:59:59</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">32位</td>
<td style="text-align:center">1970.01.01 00:00:01~2037 年某时</td>
</tr>
</tbody>
</table>
<h3 id="%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B" tabindex="-1">字符类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">列类型</th>
<th style="text-align:center">存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR(M)</td>
<td style="text-align:center">固定长度，M个字节，0&lt;=&lt;M&lt;=255</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR(M)</td>
<td style="text-align:center">可变长度，L+1个字节，L&lt;=M且0&lt;=M&lt;=2^16 -1</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">L+1个字节，L&lt;2^8</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">L+1个字节，L&lt;2^16</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">L+1个字节，L&lt;2^24</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">L+1个字节，L&lt;2^32</td>
</tr>
<tr>
<td style="text-align:center">ENUM(‘value1’,‘value2’,…)</td>
<td style="text-align:center">1或2个字节，最多2^16 -1个值</td>
</tr>
<tr>
<td style="text-align:center">SET(‘value1’,‘value2’,…)</td>
<td style="text-align:center">1、2、3、4或8个字节，最多64个成员</td>
</tr>
</tbody>
</table>
<h2 id="mysql%E7%BA%A6%E6%9D%9F" tabindex="-1">MySQL约束</h2>
<h3 id="%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F" tabindex="-1">主键约束</h3>
<p><code>NOT NULL</code>和<code>UNIQUE</code>的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</p>
<p><code>AUTO_INCREMENT</code>必须与<code>主键</code>组合使用，其会在新记录插入表中时生成一个唯一的数字。默认情况下，起始值为1，每次的增量为1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table tb3(                    </span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username varchar(30) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show columns from tb3;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb3(username) values(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb3(username) values(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from tb3;</span><br></pre></td></tr></table></figure>
<h3 id="%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F" tabindex="-1">非空约束</h3>
<p><code>NOT NULL</code>指示某列不能存储<code>NULL</code>值。在默认的情况下，表的列接受<code>NULL</code>值。</p>
<ul>
<li>NULL，字段值可以为空</li>
<li>NOT NULL，字段值禁止为空</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table tb2(</span><br><span class="line">    -&gt; username varchar(20) NOT NULL,</span><br><span class="line">    -&gt; age tinyint unsigned NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb2 values(<span class="string">&#x27;tom&#x27;</span>,NULL); <span class="comment"># ok</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb2 values(NULL,25);    <span class="comment"># error</span></span><br></pre></td></tr></table></figure>
<h3 id="%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F" tabindex="-1">唯一约束</h3>
<p><code>UNIQUE</code>保证某列的每行必须有唯一的值。唯一约束的字段可以为NULL值，但是必须只有一个NULL值。</p>
<blockquote>
<p>请注意，每个表可以有多个<code>UNIQUE</code>约束，但是每个表只能有一个<code>PRIMARY KEY</code>约束。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table tb5(</span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username varchar(20) NOT NULL UNIQUE KEY,</span><br><span class="line">    -&gt; age tinyint unsigned</span><br><span class="line">    -&gt; );</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show columns from tb5;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb5(username, age) values(<span class="string">&#x27;Tom&#x27;</span>,22);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb5(username, age) values(<span class="string">&#x27;Tom&#x27;</span>,22); <span class="comment"># error</span></span><br></pre></td></tr></table></figure>
<h3 id="%E9%BB%98%E8%AE%A4%E7%BA%A6%E6%9D%9F" tabindex="-1">默认约束</h3>
<p>为没用明确指出值的字段赋予默认值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table tb6(</span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username varchar(20) NOT NULL UNIQUE KEY,</span><br><span class="line">    -&gt; sex ENUM(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>) DEFAULT <span class="string">&#x27;3&#x27;</span></span><br><span class="line">    -&gt; );</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert tb6(username) values(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from tb6;</span><br></pre></td></tr></table></figure>
<h3 id="%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F" tabindex="-1">外键约束</h3>
<p>保证数据一致性、完整性。父表和子表必须使用相同的存储引擎，数据表的存储引擎只能为InnoDB。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父表</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; create table provinces(</span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; pname varchar(20) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line"><span class="comment"># 子表</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; create table <span class="built_in">users</span>(</span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username varchar(20) NOT NULL,</span><br><span class="line">    -&gt; pid smallint unsigned,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (<span class="built_in">id</span>)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert provinces(pname) values(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert provinces(pname) values(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert provinces(pname) values(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from provinces;</span><br><span class="line">+----+-------+</span><br><span class="line">| <span class="built_in">id</span> | pname |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | A     |</span><br><span class="line">|  2 | B     |</span><br><span class="line">|  3 | C     |</span><br><span class="line">+----+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert <span class="built_in">users</span>(username, pid) values(<span class="string">&#x27;Tom&#x27;</span>,3);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert <span class="built_in">users</span>(username, pid) values(<span class="string">&#x27;John&#x27;</span>,7); <span class="comment"># error</span></span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert <span class="built_in">users</span>(username, pid) values(<span class="string">&#x27;John&#x27;</span>,3);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert <span class="built_in">users</span>(username, pid) values(<span class="string">&#x27;Rose&#x27;</span>,1);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from <span class="built_in">users</span>;</span><br><span class="line">+----+----------+------+</span><br><span class="line">| <span class="built_in">id</span> | username | pid  |</span><br><span class="line">+----+----------+------+</span><br><span class="line">|  1 | Tom      |    3 |</span><br><span class="line">|  3 | John     |    3 |</span><br><span class="line">|  4 | Rose     |    1 |</span><br><span class="line">+----+----------+------+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面插入*(‘John’,7)*时出错，是因为provinces中并没有id为7的索引。同时，即使插入失败，索引值还是会增加，users表中不存在id为2的项。</p>
</blockquote>
<p>外键列和数据列必须具有相似的数据类型，其中数据的长度或是否是有符号位必须相同，而字符的长度则可以不同。上例中，provinces中的id和users中的pid数据类型和长度必须相同。</p>
<p>外键列（users.pid）和参照列（<a class="link"   href="http://provinces.id" >provinces.id<i class="fas fa-external-link-alt"></i></a>）必须创建索引，如果外键列不存在索引的话，MySQL将自动创建。</p>
<p>我们可以决定进行外键约束的创建以后，在更新表的时候，子表是否也进行相应的更新——<strong>外键约束的参照操作</strong>。具体的参照操作如下：</p>
<ul>
<li>CASCADE：从父表删除或更新记录时，自动删除或更新子表中匹配的行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; create table users1(</span><br><span class="line">    -&gt; <span class="built_in">id</span> smallint unsigned PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username varchar(20) NOT NULL,</span><br><span class="line">    -&gt; pid smallint unsigned,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (<span class="built_in">id</span>) ON DELETE CASCADE</span><br><span class="line">    -&gt; );</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show create table users1;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert users1(username, pid) values(<span class="string">&#x27;Tom&#x27;</span>,3);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert users1(username, pid) values(<span class="string">&#x27;John&#x27;</span>,3);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; insert users1(username, pid) values(<span class="string">&#x27;Rose&#x27;</span>,1);</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from users1;</span><br><span class="line">+----+----------+------+</span><br><span class="line">| <span class="built_in">id</span> | username | pid  |</span><br><span class="line">+----+----------+------+</span><br><span class="line">|  1 | Tom      |    3 |</span><br><span class="line">|  2 | John     |    3 |</span><br><span class="line">|  3 | Rose     |    1 |</span><br><span class="line">+----+----------+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; delete from provinces <span class="built_in">where</span> <span class="built_in">id</span>=3;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from provinces;</span><br><span class="line">+----+-------+</span><br><span class="line">| <span class="built_in">id</span> | pname |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | A     |</span><br><span class="line">|  2 | B     |</span><br><span class="line">+----+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; <span class="keyword">select</span> * from users1;</span><br><span class="line">+----+----------+------+</span><br><span class="line">| <span class="built_in">id</span> | username | pid  |</span><br><span class="line">+----+----------+------+</span><br><span class="line">|  4 | Rose     |    1 |</span><br><span class="line">+----+----------+------+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看出，删除provinces中<code>id=3</code>的项，对应的users1中<code>pid=3</code>的项也会被删除。</p>
</blockquote>
<ul>
<li>
<p>SET NULL：从父表中删除或更新记录时，把子表中的外键列设置为NULL，如果使用该选项，必须保证子表列没有指定<code>NOT NULL</code>。</p>
</li>
<li>
<p>RESTRICT：拒绝对父表的删除或更新操作。</p>
</li>
<li>
<p>NO ACTIION：标准SQL关键字，在MySQL中与RESTRICT相同。</p>
</li>
</ul>
<h2 id="%E4%BD%BF%E7%94%A8c%2Fc%2B%2B%E8%AF%AD%E8%A8%80%E6%9D%A5%E6%93%8D%E4%BD%9Cmysql" tabindex="-1">使用C/C++语言来操作MySQL</h2>
<p>我们可以使用命令行来操作MySQL数据库，譬如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost <span class="built_in">test</span> &gt; show databases;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; use mysql;</span><br><span class="line">root@localhost <span class="built_in">test</span> &gt; show tables;</span><br></pre></td></tr></table></figure>
<p>也可以通过MySQL对外公布的C接口来操作数据库，譬如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* show_tables.cxx */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL * conn;</span><br><span class="line">    MYSQL_RES * res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> server[] = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">char</span> user[] = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">char</span> passwd[] = <span class="string">&quot;lovemime&quot;</span>;</span><br><span class="line">    <span class="type">char</span> database[] = <span class="string">&quot;mysql&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">mysql_real_connect</span>(conn, server, user, passwd, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s/n&quot;</span>, <span class="built_in">mysql_error</span>(conn));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;show tables&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s/n&quot;</span>, <span class="built_in">mysql_error</span>(conn));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_use_result</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MySQL Tables in mysql database:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((row =<span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>, row[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;finish! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>连接MySQL库，来编译该段代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ -Wall show_tables.cxx -o showtables -lmysqlclient</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" tabindex="-1">参考链接</h2>
<ul>
<li><a class="link"   href="http://www.runoob.com/sql/sql-tutorial.html" >菜鸟教程：SQL 教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.runoob.com/mysql/mysql-tutorial.html" >菜鸟教程：MySQL 教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.imooc.com/learn/122" >慕课视频：与MySQL的零距离接触<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统引导过程</title>
    <url>/develop/operating-system-boot-sequence/</url>
    <content><![CDATA[<blockquote>
<p>所谓操作系统的引导过程是将存放在硬盘上的静态的操作系统装载到内存中，并开始执行操作系统的过程。<span id="more"></span></p>
</blockquote>
<h2 id="%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9Abios" tabindex="-1">第一阶段：BIOS</h2>
<h3 id="1.1-%E4%BD%95%E4%B8%BAbios%EF%BC%9F" tabindex="-1">1.1 何为BIOS？</h3>
<p>BIOS，英文“Basic Input Output System”，中文“基本输入输出系统”。百度百科中的解释如下：</p>
<blockquote>
<p>它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的<strong>基本输入输出的程序</strong>、<strong>开机后自检程序</strong>和<strong>系统自启动程序</strong>，它可从CMOS中读写系统设置的具体信息。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p>
</blockquote>
<p>BIOS保存在ROM芯片中，系统上电后第一件事就是运行BIOS程序（这不是必须的）。</p>
<p>疑问：计算机CPU如何在上电之后直接运行BIOS呢？</p>
<p>答：对于x86系列的CPU，一加电就将指令寄存器设置为：0xFFFF0000，表示CPU开始从0xFFFF0000这个内存中取出一条指令执行，通常在0xFFFF0000处是一条地址转跳指令，转向BIOS的入口。</p>
<h3 id="1.2-%E7%A1%AC%E4%BB%B6%E8%87%AA%E6%A3%80" tabindex="-1">1.2 硬件自检</h3>
<p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做&quot;硬件自检&quot;（Power-On Self-Test），缩写为POST。如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。</p>
<h3 id="1.3-%E5%8A%A0%E8%BD%BD%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA" tabindex="-1">1.3 加载引导扇区</h3>
<p>BIOS设置里有一个选项是Boot Sequence，可以设置外部存储设备的启动顺序，排在前面的设备就是优先转交控制权的设备。</p>
<p>硬件自检完成后，BIOS的主要工作就是加载引导扇区。BIOS根据Boot Sequence中的顺序，将最前面的存储设备的引导扇区的内容加载到内存中，并跳转到引导程序的第一条指令。</p>
<p>BIOS将所检查外部存储设备的第一个扇区（512B）载入内存，放在0x00007C00处，如果一个扇区的最后两个字节是“55 AA”，那么这就是一个引导扇区，这个外部存储设备也就是一块可引导盘。通常这个大小为512B的程序就称为引导程序（boot）。如果最后两个字节不是“55 AA”，那么BIOS就检查下一个外部存储设备。如果没有其他启动介质，则显示 ”No ROM BASIC” ，然后死机。</p>
<h2 id="%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%9Ambr" tabindex="-1">第二阶段：MBR</h2>
<h3 id="2.1-%E4%BD%95%E4%B8%BAmbr%EF%BC%9F" tabindex="-1">2.1 何为MBR？</h3>
<p>MBR，英文“Master Boot Record”，中文“主引导记录”。MBR为存储设备的第一个扇区（硬盘的0柱面、0磁头、1扇区），也就是该存储设备的最前面的512字节。</p>
<p>计算机读取MBR的512字节内容，如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给&quot;启动顺序&quot;中的下一个设备。</p>
<p>MBR主要负责如下功能：</p>
<ul>
<li>扫描分区表查找活动分区；</li>
<li>寻找活动分区的起始扇区；</li>
<li>将活动分区的引导扇区读到内存；</li>
<li>执行引导扇区的运行代码。</li>
</ul>
<h3 id="2.2-mbr%E7%BB%93%E6%9E%84" tabindex="-1">2.2 MBR结构</h3>
<p>MBR的主要作用是告诉计算机到存储设备的哪个位置去找操作系统。主要由三部分组成：</p>
<ul>
<li>第1-446字节：调用操作系统的机器码。</li>
<li>第447-510字节：硬盘分区表（Disk Partition Table，DPT），将硬盘分成若干分区。</li>
<li>第511-512字节：主引导记录签名（0x55和0xAA）。</li>
</ul>
<h3 id="2.3-%E5%88%86%E5%8C%BA%E8%A1%A8" tabindex="-1">2.3 分区表</h3>
<p>MBR中的分区表长度只有64个字节，里面分成4项，每项16个字节，所以一个硬盘最多只能分四个一级分区，又叫做&quot;主分区&quot;。每个区可以安装不同的操作系统，&quot;主引导记录&quot;因此必须知道将控制权转交给哪个区。</p>
<p>每个主分区的16个字节，由6个部分组成：</p>
<ul>
<li>第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</li>
<li>第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</li>
<li>第5个字节：主分区类型。</li>
<li>第6-8个字节：主分区最后一个扇区的物理位置。</li>
<li>第9-12字节：该主分区第一个扇区的逻辑地址。</li>
<li>第13-16字节：主分区的扇区总数。</li>
</ul>
<h3 id="2.4-%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA%E5%92%8C%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA" tabindex="-1">2.4 扩展分区和逻辑分区</h3>
<p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成&quot;扩展分区&quot;（Extended partition）。</p>
<p>所谓&quot;扩展分区&quot;，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做&quot;逻辑分区&quot;（logical partition）。</p>
<p>计算机先读取扩展分区的第一个扇区，叫做&quot;扩展引导记录&quot;（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p>
<p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。</p>
<h2 id="%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%A1%AC%E7%9B%98%E5%90%AF%E5%8A%A8" tabindex="-1">第三阶段：硬盘启动</h2>
<p>计算机的控制权就要转交给硬盘的某个分区了。</p>
<h3 id="3.1-%E5%8D%B7%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95" tabindex="-1">3.1 卷引导记录</h3>
<p>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做“卷引导记录”（Volume Boot Record，缩写为VBR，也可称为分区引导记录，Partition Boot Record，缩写为PBR）。</p>
<p>“卷引导记录”的主要作用是，寻找激活分区根目录下的NTLDR（XP）、bootmgr（Win7 above）、grldr（Grub）、btldr.mbr（BootLink）等可用于引导的程序。</p>
<h3 id="3.2-%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E5%99%A8" tabindex="-1">3.2 启动管理器</h3>
<p>“启动管理器”（boot loader）是系统预先安装的程序，由用户选择启动哪一个操作系统。“卷引导记录”搜索到激活分区中的“启动管理器”，将控制权交给“启动管理器”运行。</p>
<p>“启动管理器”寻找激活分区中的启动配置数据（如：Win7中的BCD文件、XP中的boot.ini文件），根据启动配置数据，在显示器上显示多操作系统选择画面。选择相应的操作系统，控制权交给操作系统。</p>
<p>Linux环境中，目前最流行的启动管理器是Grub。在windows下为启动管理器bootmgr（xp中的ntldr文件）。</p>
<h2 id="%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" tabindex="-1">第四阶段：操作系统</h2>
<p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p>
<p>以Win7系统为例，整个操作系统引导过程如下：</p>
<p>1、电脑开机，启动BIOS进行自检；</p>
<p>2、BIOS寻找主引导记录MBR；</p>
<p>3、MBR读取硬盘分区表DPT，找到活动分区，找到活动分区中的分区引导记录PBR，并且把控制权交给PBR；</p>
<p>4、PBR搜索活动区中的启动管理器bootmgr，PBR把控制权交给bootmgr；</p>
<p>5、Bootmgr寻找活动分区中的boot文件夹中的BCD文件；</p>
<p>6、Bootmgr首先从BCD 中读取启动管理器bootmgr菜单的语言版本信息，然后再调用BOOTMGR与相应语言的BOOTMGR.EXE.MUI （在boot文件夹对应语言文件夹中）组成相应语言的启动菜单，之后在显示器上显示多操作系统选择画面。</p>
<p>7、如果存在多个操作系统而且系统设置的等待时间不是0，那么屏幕就显示多个操作系统的选择界面。如果没有多系统，那么直接进入windows 7系统，不显示选择界面。</p>
<p>8、选择windows 7系统后，bootmgr就会读取BCD里win7系统所在的盘里的windows\system32\winload.exe文件，并且将控制权交给winload.exe。</p>
<p>9、Winload.exe加载windows7内核、硬件、服务等，之后加载桌面等信息，从而启动整个windows 7系统。</p>
<p>上面几步可以概括一下就是：<br>
BIOS–MBR–DPT–PBR–Bootmgr–BCD–系统选择界面–选择windows7–Winload.exe–内核加载等–启动整个windows7系统</p>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<p>1、<a class="link"   href="http://www.ruanyifeng.com/blog/2013/02/booting.html" >阮一峰：计算机是如何启动的？<i class="fas fa-external-link-alt"></i></a><br>
2、<a class="link"   href="http://baike.baidu.com/link?url=x0g4gujt_3MC52TU0pu-0sHmObNd9fBGUJtG1mBLD0jCVeQkrkz7t9b9wFzcskY89HrLSx1Tv_DZ3GayIjQ9Na" >百度百科：BIOS<i class="fas fa-external-link-alt"></i></a><br>
3、<a class="link"   href="http://jingyan.baidu.com/article/eb9f7b6dac24c3869364e801.html" >百度经验：Windows 7开机启动流程<i class="fas fa-external-link-alt"></i></a></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Developing</category>
      </categories>
      <tags>
        <tag>Computer</tag>
      </tags>
  </entry>
  <entry>
    <title>ProtoBuffer使用详解</title>
    <url>/develop/protobuffer/</url>
    <content><![CDATA[<blockquote><p>Critical Analyze What You Read and Hear<br>
批判地分析你读到的和听到的</p>
<footer><strong>Andrew Hunt/David Thomas</strong><cite>程序员修炼之道</cite></footer></blockquote>
<p>Protocol Buffer是Google 的一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。由于它是一种二进制的格式，比使用 xml 进行数据交换快许多。<span id="more"></span></p>
<h2 id="%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAprotocol-buffer%E6%B6%88%E6%81%AF" tabindex="-1">定义一个Protocol Buffer消息</h2>
<h3 id="%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B" tabindex="-1">使用实例</h3>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"># 定义一个addressbook.proto</span><br><span class="line"><span class="keyword">package</span> tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">int32</span> id = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">optional</span> <span class="type">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum </span><span class="title class_">PhoneType</span> &#123;</span><br><span class="line">        MOBILE = <span class="number">0</span>;</span><br><span class="line">        HOME = <span class="number">1</span>;</span><br><span class="line">        WORK = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">message </span><span class="title class_">PhoneNumber</span>&#123;</span><br><span class="line">        <span class="keyword">required</span> <span class="type">string</span> number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">optional</span> PhoneType type = <span class="number">2</span>[ default = HOME];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">repeated</span> PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">AddressBook</span> &#123;</span><br><span class="line">    <span class="keyword">repeated</span> Person person = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E7%BB%86%E8%8A%82%E8%A7%A3%E9%87%8A" tabindex="-1">细节解释</h3>
<p>1、package declaration为了阻止不同工程间的naming conflicts，这儿的tutorial相当于namespace。</p>
<p>2、message是一个包含若干类型字段的集合，可以使用bool、int32、float、double和string类型。可以内嵌message集合，类似于struct。</p>
<p>3、“=1”、“2”记号标识在二进制编码中类型字段的独特Tag，表示不同的字段在序列化后的二进制数据中的布局位置。</p>
<blockquote>
<p>Tag number 1-15相对于更高的数字，少用了一个字节，所以可以使用1-15的Tag作为commonly used的repeated elements，16或者更高的Tag留给less-commonly use留给optional elements。</p>
</blockquote>
<p>4、每个字段都必须使用如下标示符</p>
<ul>
<li>required：字段值必须被提供，否则消息会被认为uninitialized。</li>
<li>optional：字段值可选</li>
<li>repeated：字段也许会被重复任何次数（包括0次）。可以将repeated field看做动态大小数组。</li>
</ul>
<p>5、enum是枚举类型定义的关键字，0和1表示枚举值所对应的实际整型值，和C/C++一样，可以为枚举值指定任意整型值，而无需总是从0开始定义。</p>
<p>6、可以在同一个.proto文件中定义多个message，这样便可以很容易的实现嵌套消息的定义。Protocol Buffer提供了另外一个关键字import，这样我们便可以将很多通用的message定义在同一个.proto文件中，而其他消息定义文件可以通过import的方式将该文件中定义的消息包含进来，如：</p>
<figure class="highlight proto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;myproject/CommonMessages.proto&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="%E9%99%90%E5%AE%9A%E7%AC%A6(required%2Foptional%2Frepeated)%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99" tabindex="-1">限定符(required/optional/repeated)的基本规则</h2>
<p>1、在每个消息中必须至少留有一个required类型的字段。</p>
<p>2、每个消息中可以包含0个或多个optional类型的字段。</p>
<p>3、repeated表示的字段可以包含0个或多个数据。</p>
<p>4、如果打算在原有消息协议中添加新的字段，同时还要保证老版本的程序能够正常读取或写入，那么对于新添加的字段必须是optional或repeated。道理非常简单，老版本程序无法读取或写入新增的required限定符的字段。</p>
<h3 id="protocol-buffer%E6%B6%88%E6%81%AF%E5%8D%87%E7%BA%A7%E5%8E%9F%E5%88%99" tabindex="-1">Protocol Buffer消息升级原则</h3>
<p>1、不要修改已经存在字段的标签号。</p>
<p>2、任何新添加的字段必须是optional和repeated限定符，否则无法保证新老程序在互相传递消息时的消息兼容性。</p>
<p>3、在原有的消息中，不能移除已经存在的required字段，optional和repeated类型的字段可以被移除，但是他们之前使用的标签号必须被保留，不能被新的字段重用。</p>
<p>4、int32、uint32、int64、uint64和bool等类型之间是兼容的，sint32和sint64是兼容的，string和bytes是兼容的，fixed32和sfixed32，以及fixed64和sfixed64之间是兼容的，这意味着如果想修改原有字段的类型时，为了保证兼容性，只能将其修改为与其原有类型兼容的类型，否则就将打破新老消息格式的兼容性。</p>
<p>5、optional和repeated限定符也是相互兼容的。</p>
<h2 id="%E7%BC%96%E8%AF%91%E4%BD%A0%E7%9A%84protocol-buffers" tabindex="-1">编译你的Protocol Buffers</h2>
<h3 id="%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95" tabindex="-1">编译方法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/addressbook.proto</span><br></pre></td></tr></table></figure>
<p>注：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>R</mi><msub><mi>C</mi><mi>D</mi></msub><mi>I</mi><mi>R</mi><mtext>为</mtext><mi>S</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>D</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mtext>，</mtext></mrow><annotation encoding="application/x-tex">SRC_DIR为Source Directory，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">SR</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">为</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">rceD</span><span class="mord mathnormal">i</span><span class="mord mathnormal">rec</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord cjk_fallback">，</span></span></span></span></eq>DST_DIR为Destination Directory，编译后，Destination Directory将会有以下两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addressbook.pb.h：头文件，声明产生的类</span><br><span class="line">addressbook.pb.cc：cpp文件，实现产生的类。</span><br></pre></td></tr></table></figure>
<h3 id="protobuffer-api" tabindex="-1">ProtoBuffer API</h3>
<p>经过编译后我们能够得到下面这些消息API函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* name */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">has_name</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear_name</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> ::std ::<span class="function">string &amp; <span class="title">name</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_name</span> <span class="params">(<span class="type">const</span> ::std ::string &amp; value )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_name</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> * value )</span></span>;</span><br><span class="line"><span class="keyword">inline</span> ::std ::<span class="function">string * <span class="title">mutable_name</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">has_id</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear_id</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int32_t</span> <span class="title">id</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_id</span> <span class="params">(<span class="type">int32_t</span> value )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* email */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">has_email</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear_email</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> ::std ::<span class="function">string &amp; <span class="title">email</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_email</span> <span class="params">(<span class="type">const</span> ::std ::string &amp; value )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_email</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> * value )</span></span>;</span><br><span class="line"><span class="keyword">inline</span> ::std ::<span class="function">string * <span class="title">mutable_email</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* phone */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">phone_size</span> <span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear_phone</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> ::google ::<span class="function">protobuf::RepeatedPtrField&lt; ::tutorial::Person_PhoneNumber &gt;&amp; <span class="title">phone</span><span class="params">()</span> <span class="type">const</span> </span>;</span><br><span class="line"><span class="keyword">inline</span> ::google ::<span class="function">protobuf::RepeatedPtrField&lt; ::tutorial::Person_PhoneNumber &gt;* <span class="title">mutable_phone</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> ::<span class="function">tutorial::Person_PhoneNumber&amp; <span class="title">phone</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">inline</span> ::<span class="function">tutorial::Person_PhoneNumber* <span class="title">mutable_phone</span> <span class="params">(<span class="type">int</span> index )</span></span>;</span><br><span class="line"><span class="keyword">inline</span> ::<span class="function">tutorial::Person_PhoneNumber* <span class="title">add_phone</span> <span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%A0%87%E5%87%86message%E6%96%B9%E6%B3%95" tabindex="-1">标准Message方法</h3>
<p>每个消息都会包含一系列其他方法，允许你检查或者操作整个消息：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsInitialized</span> <span class="params">()</span> <span class="type">const</span> </span>; <span class="comment">/* 检查是否所有required field被设置 */</span></span><br><span class="line"><span class="function">string <span class="title">DebugString</span> <span class="params">()</span> <span class="type">const</span> </span>; <span class="comment">/* 返回一个有关消息的可读描述，对于调试很有用 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CopyFrom</span> <span class="params">(<span class="type">const</span> Person &amp; from )</span></span>; <span class="comment">/* 用给定的消息值来重写消息 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span> <span class="params">()</span></span>; <span class="comment">/* 将所有元素清空到empty state */</span></span><br></pre></td></tr></table></figure>
<h2 id="%E4%BD%BF%E7%94%A8%E4%BD%A0%E7%9A%84protocbuffer" tabindex="-1">使用你的ProtocBuffer</h2>
<h3 id="%E8%A7%A3%E6%9E%90%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88parsing-and-serialization%EF%BC%89" tabindex="-1">解析和序列化（Parsing and Serialization）</h3>
<p>每个Protocol buffer类都有若干函数，这些函数能使用Protocol buffer binary format，来写入和读取你所选择的信息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToString</span> <span class="params">(string * output )</span> <span class="type">const</span> </span>; <span class="comment">/* serializes the message and stores the bytes in the given string. Note that the bytes are binary, not text; we only use the string class as a convenient container. */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromString</span> <span class="params">(<span class="type">const</span> string &amp; data )</span></span>; <span class="comment">/* parses a message from the given string. */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToOstream</span> <span class="params">(ostream * output )</span> <span class="type">const</span> </span>; <span class="comment">/* writes the message to the given C++ ostream. */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromIstream</span> <span class="params">(istream * input )</span></span>; <span class="comment">/* parses a message from the given C++ istream. */</span></span><br></pre></td></tr></table></figure>
<h3 id="writing-a-message" tabindex="-1">Writing A Message</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;addressbook.pb.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This function fills in a Person message based on user input. */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PromptForAddress</span><span class="params">(tutorial::Person *person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter person ID number: &quot;</span>;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    person-&gt;<span class="built_in">set_id</span>(id);</span><br><span class="line">    cin.<span class="built_in">ignore</span>(<span class="number">256</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter name: &quot;</span>;</span><br><span class="line">    <span class="built_in">getline</span>(cin, *person-&gt;<span class="built_in">mutable_name</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter email address (blank for none): &quot;</span>;</span><br><span class="line">    string email;</span><br><span class="line">    <span class="built_in">getline</span>(cin, email);</span><br><span class="line">    <span class="keyword">if</span> (!email.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        person-&gt;<span class="built_in">set_email</span>(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Enter a phone number (or leave blank to finish): &quot;</span>;</span><br><span class="line">        string number;</span><br><span class="line">        <span class="built_in">getline</span>(cin, number);</span><br><span class="line">        <span class="keyword">if</span> (number.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tutorial::Person::PhoneNumber *phone_number = person-&gt;<span class="built_in">add_phone</span>();</span><br><span class="line">        phone_number-&gt;<span class="built_in">set_number</span>(number);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Is this a mobile, home, or work phone? &quot;</span>;</span><br><span class="line">        string type;</span><br><span class="line">        <span class="built_in">getline</span>(cin, type);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">&quot;mobile&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            phone_number-&gt;<span class="built_in">set_type</span>(tutorial::Person::MOBILE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;home&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            phone_number-&gt;<span class="built_in">set_type</span>(tutorial::Person::HOME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;work&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            phone_number-&gt;<span class="built_in">set_type</span>(tutorial::Person::WORK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Unknown phone type.  Using default.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Main function:  Reads the entire address book from a file,                  */</span></span><br><span class="line"><span class="comment">/*   adds one person based on user input, then writes it back out to the same  */</span></span><br><span class="line"><span class="comment">/*   file.                                                                     */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Verify that the version of the library that we linked against is */</span></span><br><span class="line">    <span class="comment">/* compatible with the version of the headers we compiled against. */</span></span><br><span class="line">    GOOGLE_PROTOBUF_VERIFY_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Usage:  &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; ADDRESS_BOOK_FILE&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tutorial::AddressBook address_book;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Read the existing address book. */</span></span><br><span class="line">        <span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!input)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;: File not found.  Creating a new file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!address_book.<span class="built_in">ParseFromIstream</span>(&amp;input))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Failed to parse address book.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Add an address. */</span></span><br><span class="line">    <span class="built_in">PromptForAddress</span>(address_book.<span class="built_in">add_person</span>());</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Write the new address book back to disk. */</span></span><br><span class="line">        <span class="function">fstream <span class="title">output</span><span class="params">(argv[<span class="number">1</span>], ios::out | ios::trunc | ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!address_book.<span class="built_in">SerializeToOstream</span>(&amp;output))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Failed to write address book.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Optional:  Delete all global objects allocated by libprotobuf. */</span></span><br><span class="line">    google::protobuf::<span class="built_in">ShutdownProtobufLibrary</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="reading-a-message" tabindex="-1">Reading A Message</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;addressbook.pb.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Iterates though all people in the AddressBook and prints info about them. */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListPeople</span><span class="params">(<span class="type">const</span> tutorial::AddressBook &amp;address_book)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; address_book.<span class="built_in">person_size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> tutorial::Person &amp;person = address_book.<span class="built_in">person</span>(i);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person ID: &quot;</span> &lt;&lt; person.<span class="built_in">id</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;  Name: &quot;</span> &lt;&lt; person.<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (person.<span class="built_in">has_email</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;  E-mail address: &quot;</span> &lt;&lt; person.<span class="built_in">email</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; person.<span class="built_in">phone_size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> tutorial::Person::PhoneNumber &amp;phone_number = person.<span class="built_in">phone</span>(j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (phone_number.<span class="built_in">type</span>())</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> tutorial::Person::MOBILE:</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;  Mobile phone #: &quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> tutorial::Person::HOME:</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;  Home phone #: &quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> tutorial::Person::WORK:</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;  Work phone #: &quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; phone_number.<span class="built_in">number</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Main function:  Reads the entire address book from a file and prints all */</span></span><br><span class="line"><span class="comment">/*   the information inside.                                                */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Verify that the version of the library that we linked against is */</span></span><br><span class="line">    <span class="comment">/* compatible with the version of the headers we compiled against.  */</span></span><br><span class="line">    GOOGLE_PROTOBUF_VERIFY_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Usage:  &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; ADDRESS_BOOK_FILE&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tutorial::AddressBook address_book;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Read the existing address book. */</span></span><br><span class="line">        <span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!address_book.<span class="built_in">ParseFromIstream</span>(&amp;input))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;Failed to parse address book.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ListPeople</span>(address_book);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Optional:  Delete all global objects allocated by libprotobuf. */</span></span><br><span class="line">    google::protobuf::<span class="built_in">ShutdownProtobufLibrary</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5" tabindex="-1">参考链接</h2>
<hr>
<ul>
<li><a class="link"   href="https://developers.google.com/protocol-buffers/" >官方网站<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/google/protobuf" >Github地址<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机世界中的时间</title>
    <url>/develop/time/</url>
    <content><![CDATA[<blockquote>
<p>时间永远不够用。</p>
</blockquote>
<p>长久以来，编程中遇到的时间概念，让我很迷惑。故而特定整理成此篇博文——浅析计算机世界中的时间。<span id="more"></span></p>
<h2 id="%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D" tabindex="-1">时间单位</h2>
<p>时间的单位可以为second、millisecond、microsecond、nanosecond，相互之间的关系如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int64_t</span> MillisecsPerSec = <span class="built_in">INT64_C</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int64_t</span> MicrosecsPerSec = <span class="built_in">INT64_C</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int64_t</span> NanosecsPerSec = <span class="built_in">INT64_C</span>(<span class="number">1000000000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="%E6%97%B6%E9%97%B4%E7%9A%84%E6%A0%87%E5%87%86" tabindex="-1">时间的标准</h2>
<h3 id="iat" tabindex="-1">IAT</h3>
<p>IAT，International Atomic Time，原子时，又称国际原子时，是一种通过原子钟得到的时间标准，原子钟是世界上已知最准确的时间测量和频率标准，原子钟在 37 亿年的误差不超过 1 秒。</p>
<p>原子时计量的基本单位是原子时秒，由原子钟导出定义为：在零磁场下，铯-133原子基态两个超精细能级间跃迁辐射9,192,631,770周所持续的时间。</p>
<h3 id="ut" tabindex="-1">UT</h3>
<p>UT，Universal Time，世界时，是一种以格林尼治子夜起算的平太阳时。世界时是以地球自转为基准得到的时间尺度,其精度受到地球自转不均匀变化和极移的影响，为了解决这种影响，1955年国际天文联合会定义了UT0、UT1和UT2三个系统。</p>
<h3 id="utc" tabindex="-1">UTC</h3>
<p><code>UTC Time</code>，Coordinated Universal Time，协调世界时或世界标准时间。协调世界时是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。国际原子时的误差为每日数纳秒，世界时的误差为每日数毫秒，UTC 便是这两种时标的一种折中。</p>
<p><code>UTC Time</code>被广泛应用于互联网标准中，<code>NTP</code>（网络时间协议）就是协调世界时在互联网中使用的一种方式。在计算机的世界中，<code>UTC Time</code>和<code>GMT</code>（Greenwich Mean Time，格林尼治平均时间）是相等的，都与英国伦敦的本地时间相同。</p>
<h3 id="gmt" tabindex="-1">GMT</h3>
<p>GMT，Greenwich Mean Time，格林尼治标准时间，指位于伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。 格林尼治时间已经不再被作为标准时间使用。现在的标准时间（UTC）由原子钟提供。</p>
<h3 id="dst" tabindex="-1">DST</h3>
<p>DST，Daylight Saving Time，夏令时与冬令时。又称“日光节约时制”和“夏令时间”，是一种为节约能源而人为规定地方时间的制度，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮早的夏季人为将时间提前一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。使用夏令时和冬令时即在夏季将时间拨快一个小时，等到冬季再将时间拨慢一个小时。</p>
<h2 id="%E6%97%B6%E9%97%B4%E7%9A%84%E8%A1%A8%E7%A4%BA" tabindex="-1">时间的表示</h2>
<h3 id="ntp-time" tabindex="-1">NTP Time</h3>
<p><code>NTP Time</code>，是以Network Time Protocol协议为基础的时间表示，也可以称为<code>NTP Timestamp</code>或<code>WallClock Time</code>。其值为从<strong>1900-01-01 00:00:00 UTC</strong>开始所经过的秒数。</p>
<p>NTP使用64比特的时间戳，其中32位表示秒，32位表示秒的小数，给出一个每2<sup>32秒（136年）才会翻转的时间尺度，理论分辨率2</sup>−32秒（233皮秒）。NTP以1900年1月1日作为开始时间，因此第一次翻转将在2036年2月7日发生。</p>
<h3 id="epoch-time" tabindex="-1">Epoch Time</h3>
<p><code>Epoch Time</code>，新纪元时间，其中，<code>Epoch</code>指的是一个特定的<code>UTC Time</code>：1970-01-01 00:00:00 UTC。</p>
<p>Unix/Linux的时间系统（Unix Time/POSIX Time/Unix TimeStamp）就是从<code>Epoch</code>开始计算的——是从Epoch开始所经过的秒数，不考虑闰秒。</p>
<p>32位的<code>Epoch Time</code>只能表示的时间领域为[1901~2038]，也就是当时间超过<strong>2038-01-18 22:14:07</strong>，时间会转为负数，负数意味着时间跑到1970年之前去了。</p>
<p>64位的<code>Epoch Time</code>并不会遇到这个问题，所以当2038年来临，要么升级到64位系统，要么穿越到1970年之前吧。</p>
<h3 id="wallclock-time" tabindex="-1">WallClock Time</h3>
<p><code>WallClock Time</code>为绝对日期和时间，使用NTP时间戳格式来表示，其值为从<strong>1900-01-01 00:00:00 UTC</strong>开始所经过的秒数。</p>
<p>NTP时间戳是64位无符号浮点数，其中高32位为整数部分，低32位为小数部分。与32位Epoch Time类似，NTP时间戳在2036年会变成零。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码Unicode、UTF-8和ANSI</title>
    <url>/develop/unicode-ansi-utf8-difference/</url>
    <content><![CDATA[<p>ANSI、UTF-8、Unicode为字符代码的三种编码格式，一个字符可以被编码成ANSI、UTF-8或Unicode格式，这三种格式只是表现形式不一样，其表示内容是一样的。<span id="more"></span></p>
<h2 id="ansi%E3%80%81utf-8%E3%80%81unicode" tabindex="-1">ANSI、UTF-8、Unicode</h2>
<p>ANSI、UTF-8、Unicode为字符代码的三种编码格式，一个字符可以被编码成ANSI、UT-F8或Unicode格式，这三种格式只是表现形式不一样，其表示内容是一样的。如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">char</th>
<th style="text-align:center">ANSI(GBK)</th>
<th style="text-align:center">Unicode</th>
<th style="text-align:center">UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">中</td>
<td style="text-align:center">0xD6D0</td>
<td style="text-align:center">0x4E2D</td>
<td style="text-align:center">0xE4B8AD</td>
</tr>
</tbody>
</table>
<h3 id="ansi%E7%BC%96%E7%A0%81" tabindex="-1">ANSI编码</h3>
<blockquote>
<p>ANSI表示英文字符时用一个字节，表示中文用两个字节</p>
</blockquote>
<p>为了使计算机支持多种语言，不同的国家和地区制定了不同的标准，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。在简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码。</p>
<p>对于ANSI编码而言，<code>0x00~0x7F</code>之间的字符，依旧是1个字节代表一个字符(<strong>ASCII编码</strong>)，而这之外的字符通常是使用<code>0x80~0xFF</code>范围内的两个字节来表示一个字符。比如汉字找那个的’中’在简体中文中使用<code>[0xD6, 0xD0]</code>这两个字节存储。</p>
<p>下表中展示了<strong>文</strong>在不同ANSI标准下的编码：</p>
<table>
<thead>
<tr>
<th style="text-align:center">char</th>
<th style="text-align:center">ANSI(GBK)</th>
<th style="text-align:center">ANSI(Big5)</th>
<th style="text-align:center">ANSI(JIS)</th>
<th style="text-align:center">Unicode</th>
<th style="text-align:center">UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">文</td>
<td style="text-align:center">0xCEC4</td>
<td style="text-align:center">0xA4E5</td>
<td style="text-align:center">0x95B6</td>
<td style="text-align:center">0x6587</td>
<td style="text-align:center">0xE69687</td>
</tr>
</tbody>
</table>
<p>可以看出，不同ANSI编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。<strong>需要将不同的ANSI编码都转换成UTF-8编码，进而存储</strong>。</p>
<h3 id="unicode%E7%BC%96%E7%A0%81" tabindex="-1">Unicode编码</h3>
<p>Unicode字符集编码全称：Universal Multiple-Octet Coded Character Set，通用多八位编码字符集。Unicode字符集是国际组织制定的可以容纳世界上所有文字和符号的编码方案。</p>
<p>Unicode编码使用两个字节（<code>0x0000－0xFFFF</code>）来表示一个字符，世界上任何文字和符号都对应于Unicode字符集中的一个二进制代码，但是：</p>
<blockquote>
<p>Unicode只是一个符号集, 它只规定了符号的二进制代码, 却没有规定这个二进制代码应该如何存储。</p>
</blockquote>
<p>Unicode编码的优点是覆盖了世界上所有的文字和符号，缺陷则是对于英文字符浪费了一个字节。例如：英文A在unicode中表示为0x0041。</p>
<h3 id="utf-8%E7%BC%96%E7%A0%81" tabindex="-1">UTF-8编码</h3>
<blockquote>
<p>UTF-8是Unicode的实现方式之一。</p>
</blockquote>
<p>UTF-8全称：8bit Unicode Transformation Format，8比特Unicode通用转换格式。UTF-8是一种针对Unicode的可变长度字符编码。可以表示Unicode标准中的任何一个字符，且其编码中的第一个字节仍然与ASCII兼容。</p>
<p>UTF-8是一种变长的编码方式，可以使用1~6个字节对Unicode字符集进行编码，编码规则如下：</p>
<ol>
<li>
<p>对于单字节的符号, 字节的第一位设为0, 后面7位为这个符号的unicode码. 因此对于<br>
英语字母, UTF-8编码和ASCII码是相同的.</p>
</li>
<li>
<p>对于n字节的符号(n&gt;1), 第一个字节的前n位都设为1, 第n+1位设为0, 后面字节的前<br>
两位一律设为10. 剩下的没有提及的二进制位, 全部为这个符号的unicode码.</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>n</th>
<th>Unicode符号范围</th>
<th style="text-align:right">UTF-8编码方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0000 0000 - 0000 007F</td>
<td style="text-align:right">0xxxxxxx</td>
</tr>
<tr>
<td>2</td>
<td>0000 0080 - 0000 07FF</td>
<td style="text-align:right">110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>3</td>
<td>0000 0800 - 0000 FFFF</td>
<td style="text-align:right">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>4</td>
<td>0001 0000 - 0010 FFFF</td>
<td style="text-align:right">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>5</td>
<td>0020 0000 - 03FF FFFF</td>
<td style="text-align:right">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>6</td>
<td>0400 0000 - 7FFF FFFF</td>
<td style="text-align:right">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>注：在UTF-8编码中，英文字符占一个字节，中文字符占用3个字节。</p>
<h3 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h3>
<p>1、中文操作系统默认ansi编码，生成的txt文件默认为ansi编码。</p>
<p>2、国际文档（txt和xml）使用unicode编码是正宗做法；操作系统和浏览器都能够“理解”unicode编码。浏览器“迫于压力”才“理解”utf-8编码。但是，操作系统有时只认unicode编码。</p>
<p>3、Windows记事本有四个编码选项：ANSI、Unicode、Unicode Big Endian和UTF-8。</p>
<ul>
<li>ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。</li>
<li>Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。</li>
<li>Unicode big endian编码与上一个选项相对应。采用big endian格式。</li>
<li>UTF-8指带BOM 的UTF-8。</li>
</ul>
<h2 id="ansi%E3%80%81utf-8%E3%80%81unicode%E8%BD%AC%E6%8D%A2" tabindex="-1">ANSI、UTF-8、Unicode转换</h2>
<h3 id="windows-unicode-and-character-sets" tabindex="-1">Windows Unicode and Character Sets</h3>
<p>Unicode编码字符集是最通用的字符编码标准，Windows应用程序使用Unicode字符集的UTF-16实现版本。同时，Windows也支持传统的字符集：单字节字符集（Single-byte character sets, SBCS）和多字节字符集（Multibyte character sets）。</p>
<p>很多Windows API函数拥有“A”和“W”版本，“A”版本基于Windows Code Page，而“W”版本则基于Unicode字符。应用程序可以通过<strong>WideCharToMultiByte</strong>和<strong>MultiByteToWideChar</strong>两个函数来转换Unicode字符串和基于Windows Code Page字符串。虽然函数名中含有“MultiByte”，这些函数实际上能处理SBCS、DBCS和multibyte character set Code page。</p>
<h3 id="%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" tabindex="-1">编码转换</h3>
<p>在Windows平台下，ANSI、UTF-8、Unicode三者之间的转换主要依赖于<strong>WideCharToMultiByte</strong>和<strong>MultiByteToWideChar</strong>两个函数。</p>
<ul>
<li>Unicode转UFT-8：设置<code>WideCharToMultiByte</code>的CodePage参数为CP_UTF8；</li>
<li>UTF-8转Unicode：设置<code>MultiByteToWideChar</code>的CodePage参数为CP_UTF8</li>
<li>Unicode转ANSI：设置<code>WideCharToMultiByte</code>的CodePage参数为CP_ACP；</li>
<li>ANSI转Unicode：设置<code>MultiByteToWideChar</code>的CodePage参数为CP_ACP；</li>
<li>UTF-8转ANSI：先将UTF-8转换为Unicode，再将Unicode转换成ANSI；</li>
<li>ANSI转UTF-8：先将ANSI转换为Unciode，再将Unicode转换成ANSI。</li>
</ul>
<h2 id="%E6%B3%A8" tabindex="-1">注</h2>
<p>本文内容应该存在错误或者是以偏概全的问题，后续会继续深入了解。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Computer</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC编译必知必会</title>
    <url>/develop/webrtc-compile/</url>
    <content><![CDATA[<p>任何想入手WebRTC的人，都必须要先过编译大魔王这一关。大魔王精通各种故障制造手法，随便来个网络故障就要折腾我们半天，一些初出茅庐的新手，可能就因此放弃了。本文将笔者编译过程中遇到的坑坑点点记录下来，以飨读者。<span id="more"></span></p>
<h2 id="%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87" tabindex="-1">前置准备</h2>
<h3 id="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" tabindex="-1">开发环境</h3>
<p>在开始WebRTC之旅前，我们要做好充足的准备，才能游刃有余。编译设备和工具的选用：</p>
<ul>
<li>CPU建议8代I7起步，Win10/11 64bits专业版系统，16/32GB内存，NTFS格式磁盘，空间至少剩余250GB。</li>
</ul>
<blockquote>
<p>FAT32不起作用，因为某些Git包文件大于4GB。</p>
</blockquote>
<ul>
<li>Google的编译工具更新十分的快，要想使用最新版本的WebRTC，则必须要更新Visual Studio到2019版本。</li>
</ul>
<blockquote>
<p>Visual Studio必须安装“Desktop development with C++”组件和“MFC/ATL support”子组件。</p>
</blockquote>
<ul>
<li>更新Windows SDK到最新版本，本文撰写时最新版本号为：10.0.22621.0，地址<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>见<a class="link"   href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-sdk/" >Windows开发人员中心<i class="fas fa-external-link-alt"></i></a>。</li>
</ul>
<h3 id="%E8%B0%B7%E6%AD%8C%E5%B7%A5%E5%85%B7" tabindex="-1">谷歌工具</h3>
<p>在准备好基础设施后，在正式启动WebRTC编译工作前，还需要安装Google的开发工具<a class="link"   href="https://storage.googleapis.com/chrome-infra/depot_tools.zip" >depot tools<i class="fas fa-external-link-alt"></i></a><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。按照下面步骤执行：</p>
<p>步骤一：将<code>depot_tools</code>下载后解压到某个目录，这里需要注意两点：</p>
<ul>
<li>为了保留目录里的.git文件夹，必须要使用右键菜单的<code>全部解压缩</code>或者解压软件来提取到目录中。</li>
<li>depot_tools不能保存在*C:\Program Files (x86)*文件夹下，否则后续操作会报错。</li>
</ul>
<p>步骤二：将depot_tools路径增加到系统环境变量PATH中，增加系统环境变量<code>DEPOT_TOOLS_WIN_TOOLCHAIN=0</code>，告诉depot_tools使用本地安装的Visual Studio。两个注意项：</p>
<ul>
<li>建议两个环境变量设置成系统环境变量，不要放到用户环境变量里；</li>
<li>depot_tools路径环境变量必须要在任何安装的Python/Git路径前。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ setx PATH=e:\depot_tools;%PATH% /m</span><br><span class="line">$ <span class="built_in">set</span> DEPOT_TOOLS_WIN_TOOLCHAIN 0 /m</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/webrtc-compile-env-variable.png"
                        alt="webrtc-compile-env-variable"
                 ></p>
<p>步骤三：通过cmd运行<code>gclient</code>命令去更新<code>depot_tools</code>及其依赖项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gclient</span><br></pre></td></tr></table></figure>
<p>行文至此，准备工作的最后提醒，FBI Warning：考虑到一些网络因素，建议科学上网。</p>
<h2 id="%E7%BC%96%E8%AF%91%E4%BB%A3%E7%A0%81" tabindex="-1">编译代码</h2>
<h3 id="%E4%B8%8B%E8%BD%BD%E4%BB%A3%E7%A0%81" tabindex="-1">下载代码</h3>
<p>下载代码步骤虽然简单，但是出错的可能性很大，出错的最大原因在于前置准备不够充分，重新看看哪里没有搞对。按照下面脚本执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> webrtc-checkout</span><br><span class="line"><span class="built_in">cd</span> webrtc-checkout</span><br><span class="line">fetch --nohooks webrtc <span class="comment"># 第一次才用这个</span></span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line"></span><br><span class="line">git checkout master   </span><br><span class="line">git pull origin master <span class="comment"># 更新代码用这个</span></span><br><span class="line">gclient</span><br></pre></td></tr></table></figure>
<p>由于WebRTC代码在谷歌的仓库里，想要拉到这些代码是一个非常漫长的过程，<strong>Please Keep Patience</strong>。</p>
<h3 id="%E7%94%9F%E6%88%90%E7%BC%96%E8%AF%91" tabindex="-1">生成编译</h3>
<p>WebRTC的默认构建系统为Ninja，Ninja工程文件通过GN（Google构建配置工具Google’s Ninja）来生成。按照下面脚本执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gn gen out/Default --ide=<span class="string">&quot;vs2017&quot;</span> <span class="comment"># 参照GN Reference IDE Flag来更改对应的IDE</span></span><br><span class="line">$ autoninja -C out/Default</span><br></pre></td></tr></table></figure>
<p>建议直接使用<em>Developer Command Prompt for VS 2019</em>来执行命令，而不是直接使用cmd——可能会出现报错，但是也不一定，如果出错了可以试试。</p>
<h3 id="%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95" tabindex="-1">错误记录</h3>
<p>错误一：<strong>IOError: [Errno 2] No such file or directory: ‘webrtc-checkout\src\build\util\LASTCHANGE.committime’</strong></p>
<p>解决方案<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>见连接：<a class="link"   href="https://groups.google.com/a/chromium.org/g/chromium-discuss/c/9-clGIeN7bI?pli=1" >https://groups.google.com/a/chromium.org/g/chromium-discuss/c/9-clGIeN7bI?pli=1<i class="fas fa-external-link-alt"></i></a></p>
<p>步骤如下：</p>
<ul>
<li>检查webrtc-checkout\src\build\util目录下是否存在LASTCHANGE.committime文件</li>
<li>若不存在，执行命令&quot;<a class="link"   href="http://lastchange.py" >lastchange.py<i class="fas fa-external-link-alt"></i></a> LASTCHANGE.dummy&quot; or “python <a class="link"   href="http://lastchange.py" >lastchange.py<i class="fas fa-external-link-alt"></i></a> LASTCHANGE.dummy”</li>
<li>将生成的LASTCHANGE.dummy.committime重命名为LASTCHANGE.committime</li>
</ul>
<p>错误二：<strong>VS2019提醒未识别的命令ninja.exe</strong></p>
<p>这是因为VS2019没有办法直接识别Ninja.exe，因此需要将ninja.exe放到环境变量里面，其目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja</span><br></pre></td></tr></table></figure>
<h2 id="%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F" tabindex="-1">运行程序</h2>
<h3 id="%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" tabindex="-1">单元测试</h3>
<p>WebRTC的单元测试大部分是编译在.lib文件中，然后链接到同一个exe文件，以module为例就是modules_unittests.exe。如果想要使用resharper C++的单元测试工具直接调试某个.lib文件中的单元测试用例，需要将modules_unittests.exe的路径增加到对应的工程–&gt;配置属性–&gt;调试–&gt;命令中。</p>
<h3 id="%E8%B0%83%E8%AF%95%E6%9B%B4%E6%94%B9" tabindex="-1">调试更改</h3>
<p>WebRTC的demo PeerConnectionClient/Service已经不再维护，如果想要在本地回环使用peerconnection_client可以按照下列更改。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api/peerconnection_interface.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeerConnectionFactoryInterface</span> &#123;</span><br><span class="line">  <span class="type">bool</span> disable_encryption = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// examples/peerconnection/client/conductor.cc</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Conductor::ReinitializePeerConnectionForLoopback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  options.disable_encryption = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Conductor::StartLogin</span><span class="params">(<span class="type">const</span> std::string&amp; server, <span class="type">int</span> port)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">InitializePeerConnection</span>();</span><br><span class="line">  <span class="built_in">ReinitializePeerConnectionForLoopback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modules/video_capture/windows/sink_filter_ds.cc</span></span><br><span class="line">CaptureInputPin::<span class="built_in">Receive</span>(IMediaSample* media_sample) &#123;</span><br><span class="line">  <span class="comment">//RTC_DCHECK_RUN_ON(&amp;capture_checker_);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a class="link"   href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-sdk/" >Windows开发人员中心<i class="fas fa-external-link-alt"></i></a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a class="link"   href="https://webrtc.github.io/webrtc-org/native-code/" >WebRTC Native Code<i class="fas fa-external-link-alt"></i></a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a class="link"   href="https://groups.google.com/a/chromium.org/g/chromium-discuss/c/9-clGIeN7bI?pli=1" >Error gn gen on win10<i class="fas fa-external-link-alt"></i></a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC拥塞控制策略</title>
    <url>/develop/webrtc-gcc/</url>
    <content><![CDATA[<blockquote>
<p>你只是看起来很努力。</p>
</blockquote>
<p>影响视频会议质量的因素主要在于<code>视频图像质量</code>和<code>传输时延</code>。视频图像质量对于视频会议的影响不在此赘述。视频会议等实时流媒体应用对于实时性的要求很高，实时性要求我们必须要有较低的时延（<code>时延敏感</code>）。<span id="more"></span>影响时延的因素包含：</p>
<ul>
<li>媒体数据在收发端的处理速度</li>
<li>网络拥塞</li>
</ul>
<p>网络拥塞是本文的研究重点，TCP协议拥有完善的拥塞控制机制，UDP则没有在拥塞控制方面有所规定。由于目前大多实时流媒体应用都是基于UDP传输，所以高效的拥塞控制算法是保证实时流媒体应用QoS的重要手段。</p>
<blockquote>
<p>基于丢包的TCP协议无法满足实时流媒体应用的低时延需求。</p>
</blockquote>
<p>WebRTC里针对拥塞控制，采用了谷歌拥塞控制算法（Google Congestion Control，GCC），该算法包含两部分：发送端基于丢包的码率控制和接收端基于延迟的码率控制。这两种部分都是通过调节数据发送端码率来达到拥塞控制的目的。GCC算法架构如下：</p>
<img lazyload="" alt="GCC Architecture" data-src="../../assets/webrtc-gcc.png" width="700">
<h2 id="%E5%8F%91%E9%80%81%E7%AB%AF%E5%9F%BA%E4%BA%8E%E4%B8%A2%E5%8C%85%E7%9A%84%E7%A0%81%E7%8E%87%E6%8E%A7%E5%88%B6" tabindex="-1">发送端基于丢包的码率控制</h2>
<p>发送端的码率控制是根据丢包率来计算预期的发送码率，丢包率的信息包含在接收到的RTCP报告报文中。计算公式如下，其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>l</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{f}_{l}({t}_{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 表示 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">{t}_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 时刻的丢包率，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{A}_{s}({t}_{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 表示 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">{t}_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 时刻发送端的码率：</p>
<img lazyload="" alt="GCC Loss-based Controller" data-src="../../assets/webrtc-loss-based-controller.png" width="500">
<h2 id="%E6%8E%A5%E6%94%B6%E7%AB%AF%E5%9F%BA%E4%BA%8E%E5%BB%B6%E8%BF%9F%E7%9A%84%E7%A0%81%E7%8E%87%E6%8E%A7%E5%88%B6" tabindex="-1">接收端基于延迟的码率控制</h2>
<p>发送端的码率控制是根据延迟来计算预期的发送码率，计算出来的码率信息会通过RTCP REMB报文反馈给发送端。计算公式如下，其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{t}_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示第<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq>个视频帧被接收的时间，<code>η=1.05</code>，<code>α=0.85</code>，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{R}_{r}({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 表示接收端在最近500ms中测量的接收码率：</p>
<img lazyload="" alt="GCC Delay-based Controller" data-src="../../assets/webrtc-delay-based-controller.png" width="380">
<p>如GCC算法结构图所示，基于延迟的码率控制包含五个模块：Arrival-time Filter、Overuse Detector、Remote Rate Controller、Adaptive Threshold、Remb Processing。GCC论文中给出了这五个模块的关系：</p>
<blockquote>
<p>The remote rate controller is a finite state machine in which the state of <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">σ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></eq> is changed by the signal <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></eq> produced by the over-use detector based on the output <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> of the arrival-time filter. The adaptive threshold block dynamically sets the threshold <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> used by the over-use detector. The REMB Processing decides when to send a REMB message based on the value of the rate <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">{A}_{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>. Finally, it is important to notice that <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{A}_{r}({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> is upper bounded by 1.5${R}<em i="">{r}({t}</em>)$.</p>
</blockquote>
<h3 id="arrival-time-filter" tabindex="-1">Arrival-time Filter</h3>
<p>Arrival-time Filter模块用来计算网络延迟<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>，GCC算法采用Kalman Filter来估算该值。Kalman Filter采用单程帧间延迟差值<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>m</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{d}_{m}({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>，单程帧间延迟差值表示两个数据帧到达接收端的延迟差值。如下图所示：</p>
<img lazyload="" alt="GCC One Way Delay Gradient Measurement" data-src="../../assets/webrtc-one-way-delay-gradient-measurement.png" width="500">
<p>根据该图，我们可以得出 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>m</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{d}_{m}({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 的计算公式如下：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>d</mi><mi>m</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>t</mi><mi>i</mi></msub><mo>−</mo><msub><mi>t</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mi>i</mi></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">
{d}_{m}({t}_{i})={t}_{i}-{t}_{i-1})-({T}_{i}-{T}_{i-1})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section><h3 id="overuse-detector" tabindex="-1">Overuse Detector</h3>
<p>Overuse Detector根据Arrival-time Filter计算出的网络延时<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>以及Adaptive Threshold提供的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>值来判断当前网络是否过载，并告知Remote Rate Controller对应的信号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></eq>——<code>overuse</code>、<code>normal</code>、<code>underuse</code>。下图表明Overuse Detector是如何工作的：</p>
<img lazyload="" alt="GCC Overuse Detector Signalling" data-src="../../assets/webrtc-overuse-detector-signalling.png" width="500">
<p>产生<code>overuse</code>、<code>normal</code>、<code>underuse</code>三种信号的条件如下：</p>
<ul>
<li>overuse: <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> &gt; <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>and keep 100ms</li>
<li>underuse: <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> &lt; -<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> and keep 100ms</li>
<li>normal: -<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> &lt; <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> &lt; <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">γ({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li>
</ul>
<h3 id="remote-rate-controller" tabindex="-1">Remote Rate Controller</h3>
<p>Remote Rate Controller模块根据上文提到的接收端码率计算公式来计算接收端预估码率。该模块是个无线状态机，其状态变动如下图所示：</p>
<img lazyload="" alt="GCC Overuse Detector Signalling" data-src="../../assets/webrtc-remote-rate-controller-fsm.png" width="500">
<p>结合上文中的公式，我们可以得出：</p>
<ul>
<li>当<code>s=overuse</code>，预估码率降低为接收码率的85%，处于<code>decrease</code>状态;</li>
<li>当<code>s=underuse</code>，预估码率保持和上次预估码率一样，处于<code>hold</code>状态；</li>
<li>当<code>s=normal</code>，预估码率上升为上次预估码率的105%，处于<code>increase</code>状态。</li>
</ul>
<h3 id="adaptive-threshold" tabindex="-1">Adaptive Threshold</h3>
<p>Adaptive Threshold模块用来使算法适应延迟变化的灵敏性。</p>
<h3 id="remb-processing" tabindex="-1">Remb Processing</h3>
<p>Remb Processing模块用于通知发送端来自接收端预估的码率。该码率通过RTCP REMB报文反馈给发送端。正常情况下，该报文每隔1s发送一次，但如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{A}_{r}({t}_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> &lt; 0.97${A}<em i-1="">{r}({t}</em>)$，该报文立马发送。</p>
<h2 id="%E6%9C%80%E7%BB%88%E7%A0%81%E7%8E%87%E8%AE%A1%E7%AE%97" tabindex="-1">最终码率计算</h2>
<p>一旦发送端接收到RTCP报告报文，或是接收到携带接收端预估码率<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">{A}_{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的REMB报文，发送端执行对应的码率控制算法——发送端根据发送端预估码率<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{A}_{s}({t}_{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>、接收端预估<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{A}_{r}({t}_{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>、最大允许码率<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{A}_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>最小允许码率<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{A}_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，计算出最终的发送码率<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{R}_{s}({t}_{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>。</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>A</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>A</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>A</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">
{R}_{s}({t}_{k})=max(min(min({A}_{s}({t}_{k}), {A}_{r}({t}_{k})), {A}_{max}), {A}_{min})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section><h2 id="webrtc%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9D%97" tabindex="-1">WebRTC拥塞控制模块</h2>
<p>WebRTC中实现了Google GCC算法，该实现包含发送端和接收端两部分。发送端负责发送端码率预估和计算最终目标码率；接收端负责接收端码率预估和统计丢包信息，并通过REMB报文和RTCP RR反馈给发送端。其总体模块图如下：</p>
<img lazyload="" alt="WebRTC GCC Implementation" data-src="../../assets/webrtc-gcc-implementation.png" width="700">
<h3 id="%E8%BF%9C%E7%AB%AF%E6%AF%94%E7%89%B9%E7%8E%87%E9%A2%84%E4%BC%B0%E6%A8%A1%E5%9D%97" tabindex="-1">远端比特率预估模块</h3>
<img lazyload="" alt="WebRTC GCC Remote Bitrate Calculate" data-src="../../assets/webrtc-gcc-remote-bitrate-caculate.png" width="1000">
<h3 id="%E6%9C%AC%E5%9C%B0%E6%AF%94%E7%89%B9%E7%8E%87%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9D%97" tabindex="-1">本地比特率计算模块</h3>
<img lazyload="" alt="WebRTC GCC Local Bitrate Calculate" data-src="../../assets/webrtc-gcc-local-bitrate-caculate.png" width="1000">
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" tabindex="-1">参考文献</h2>
<ul>
<li><a class="link" href="http://c3lab.poliba.it/images/6/65/Gcc-analysis.pdf">Analysis and Design of the Google Congestion Control for Web Real-time Communication (WebRTC)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC-GCC两种实现方案对比</title>
    <url>/develop/webrtc-tcc-vs-gcc/</url>
    <content><![CDATA[<blockquote>
<p>越过山丘，才发现无人等候。</p>
</blockquote>
<p>WebRTC为了防止网络拥塞结合了Loss-based BWE和Delay-based BWE两种算法，其中Loss-based BWE算法较为复杂。<span id="more"></span>WebRTC中提出了两种方案来处理Loss-based BWE：</p>
<ul>
<li>Recv-side Delay-based BWE：REMB-based GCC</li>
<li>Send-side Delay-based BWE：TransportFB-based GCC</li>
</ul>
<p>本文着重于两种方案的不同点，并分析二者的区别，进而确定在实际应用中应该选择哪一种方案。同时本文也会通过仿真结果，来给出GCC算法的性能分析。</p>
<blockquote>
<p>本文按照其实现机制称：REMB-based GCC为REMB、TransportFB-based GCC为TCC。</p>
</blockquote>
<h2 id="bwe-evolution" tabindex="-1">BWE Evolution</h2>
<p>带宽预估算法的演进经过两个阶段：</p>
<ul>
<li>
<p>Loss-based BWE</p>
</li>
<li>
<p>Delay-based BWE</p>
</li>
</ul>
<p>Loss-based BWE通过RTCP-RR报文来检测丢包率，然后根据丢包率来调整对应的带宽。Delay-based BWE通过分析包之间的延时来预测拥塞，在路由器丢弃数据包之前尝试降低带宽。</p>
<p>Loss-based BWE和Delay-based BWE的可行性都是基于网络路由器的特性：</p>
<ul>
<li>Loss-based BWE：当网络发生拥塞时，路由器缓冲区被填满，后续的数据包会被丢弃。</li>
<li>Delay-based BWE：当网络开始出现拥塞时，路由器缓冲区数据逐渐增加，数据包之间的延迟变化加剧。</li>
</ul>
<p>相对于Loss-based BWE，Delay-based BWE能够更早的发现网络的拥塞状况，进而提前调整码率，防止拥塞加重。</p>
<p>因此，在WebRTC中使用Loss-based BWE来适应丢包情况和探测带宽，而使用Delay-based BWE来提前发现网络拥塞，降低队列延迟，提高实时音视频通信的质量。</p>
<h2 id="send-side-delay-based-bwe" tabindex="-1">Send-side Delay-based BWE</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-tcc.png"
                        alt=""
                 ></p>
<p>Transport-CC将接收端的延迟信息通过RTCP-TCC反馈给发送端，然后在发送端进行Delay-based BWE。WebRTC通过以下两步来实现该方案：</p>
<ul>
<li><strong>Transport wide sequence numbers header extension</strong></li>
</ul>
<p>x所有的RTP包额外的增加一个头部扩展项，该扩展项用来表示发送序列号。通过SDP来协商是否打开该扩展项：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a=extmap:5 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Transport Feedback</strong></li>
</ul>
<p>接收方向媒体发送方定期发送反馈，提供有关接收到的数据包的信息以及它们之间的延迟。反馈信息通过RTCP-Transport-FB反馈给发送端。通过SDP来协商是否启用：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a=rtcp-fb:100 transport-cc </span><br></pre></td></tr></table></figure>
<p>RTCP-Transport-FB默认发送频率1time/100ms，同时其动态适应使用5％的可用带宽，最大频率值为1time/50ms、最小频率值为1time/250ms。以1time/100ms的频率发送，其最大需要耗费16kbps带宽。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-tcc-frequency.png"
                        alt=""
                 ></p>
<h2 id="recv-side-delay-based-bwe" tabindex="-1">Recv-side Delay-based BWE</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-remb.png"
                        alt=""
                 ></p>
<p>Recv-side Delay-based BWE在接收端计算预估码率结果，并通过RTCP-REMB反馈给发送端。实现Recv-side Delay-based BWE需要两步：</p>
<ul>
<li><strong>Transport with Absolute Send Time</strong></li>
</ul>
<p>绝对发送时间用于表示发送端发送该包的时间，在RTP报头的扩展中发送。需要在SDP中协商是否启用该扩展：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>REMB Feedback</strong></li>
</ul>
<p>接收端通过RTCP-REMB反馈预估的码率值，需要在SDP中协商是否启动该反馈：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a=rtcp-fb:&lt;payload type&gt; goog-remb</span><br></pre></td></tr></table></figure>
<p>在REMB方案中，其他厂商也给出了一些优化思路：</p>
<ul>
<li>WebRTC Gateway反馈的REMB码率结果需要综合考虑同一个会议中其他用户的下行带宽和丢包。</li>
<li>在REMB方案中引入TCC方案中的一些优点，譬如线性滤波器。</li>
</ul>
<h2 id="comparison" tabindex="-1">Comparison</h2>
<h3 id="%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94" tabindex="-1">方案对比</h3>
<p>WebRTC实现了两种滤波器来进行延迟增长趋势的评估。Send-side Delay-based BWE采用Trendline Filter，而Recv-side Delay-based BWE采用了Kalman Filter。</p>
<h3 id="%E6%95%88%E6%9E%9C%E5%AF%B9%E6%AF%94" tabindex="-1">效果对比</h3>
<p>暂未发现效果对比的论文或博客，后续会自行研究对比。</p>
<h3 id="pros-and-cons" tabindex="-1">Pros and Cons</h3>
<p>TCC的优点在于无需依赖于两个端点——方便BWE算法测试，更易改进算法。发送端知道其使用了何种算法，进而按照场景的不同，切换BEW算法。来自Google Group的讨论：</p>
<blockquote>
<ul>
<li>Easier to roll out improvements if the logic is located on one side and the other side is kept dumb.</li>
<li>Having the logic on the send-side means you know more about what has been sent. For instance, you know if the source is very bursty (screencasts) which can help us make better decisions.</li>
</ul>
</blockquote>
<p>TCC的缺点在于浪费了一定的带宽，同时Firefox目前还不支持TCC。</p>
<p>REMB的优点在于码率的控制权在服务端（接收端），没有额外的带宽浪费。</p>
<p>REMB的缺点在于调试起来不方便，需要同时关注两个端，同时WebRTC已经不对REMB提供支持——这意味着当下的REMB实现版本可能存在不少BUG，同时BWE的新特性也不会加入到当前的REMB实现。</p>
<blockquote>
<p>Google从Chrome55开始支持Send-side Delay-based BWE。查了下WebRTC的代码提交，REMB方案几乎没有实质性修改，而TCC针对性做了优化。</p>
</blockquote>
<p>在采用TCC方案后，接收也可以利用REMB来通知发送端码率发送上限。</p>
<h3 id="which-one%3F" tabindex="-1">Which One?</h3>
<p>从优缺点可以明显的看出，我们应该选择TCC。但这里还是要结合场景，如果服务端对码率的控制权十分重要，还是有必要使用REMB的，只是后续的BUG只能自己解了。</p>
<h2 id="performance" tabindex="-1">Performance</h2>
<p>TCC和GCC本质上都是使用了GCC算法。GCC算法的设计目的是为了达到：</p>
<ul>
<li>最大化利用可利用的带宽</li>
<li>带宽瓶颈时能够公平共享带宽（TCP流、GCC流）</li>
<li>最小化队列延迟</li>
</ul>
<p>本节引用了多篇研究论文的结果，试图挖掘GCC方案的性能优点和漏洞。其中一些变量的含义如下：</p>
<blockquote>
<p>Channel Utilization：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><mi>R</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">U = R/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span></eq>，R为预估码率</p>
<p>Good Channel Utilization：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mi>v</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">G = v/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span></eq>，v为rtp发送码率</p>
<p>Loss Ratio：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">l=(lost\_bytes)/(received\_bytes)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">os</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal">rece</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span><span class="mclose">)</span></span></span></span></eq></p>
<p>Number of Delay-based Decrease Events：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>d</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{dd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">dd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，降低码率的REMB包数量</p>
</blockquote>
<h3 id="single-gcc-flow-with-constant-avaliable-bandwidth" tabindex="-1">Single GCC Flow with Constant Avaliable Bandwidth</h3>
<p>设置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><mn>50</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RTT_{m}=50ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></eq>，可利用带宽为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2000</mn><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b(t)=2000kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2000</span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-flow.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>GCC预估码率从300kbps上升到2000kbps需要30s左右</li>
<li>GCC预估码率在带宽阈值时波动严重，波动幅值最大可达1000Mpbs</li>
<li>GCC预估码率会经常超过带宽阈值进而导致严重丢包</li>
<li>GCC出现严重带宽时会大大提高FEC的比例，最大可达50%</li>
<li>当码率接近带宽上限时，RTT增大导致REMB发送频率增加，进而降低码率</li>
</ul>
<p>设置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><msub><mi>T</mi><mrow><mi>m</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>∈</mo><mrow><mo fence="true">{</mo><mn>30</mn><mo separator="true">,</mo><mn>50</mn><mo separator="true">,</mo><mn>80</mn><mo separator="true">,</mo><mn>120</mn><mo fence="true">}</mo></mrow><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RTT_{m, j} \in \left \{ 30, 50, 80, 120 \right \}ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">30</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">50</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">80</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">120</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></eq>，可利用带宽<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>∈</mo><mrow><mo fence="true">{</mo><mn>500</mn><mo separator="true">,</mo><mn>1000</mn><mo separator="true">,</mo><mn>1500</mn><mo separator="true">,</mo><mn>2000</mn><mo fence="true">}</mo></mrow><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b_{i} \in \left \{ 500, 1000, 1500, 2000 \right \}kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">500</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1500</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2000</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-flow-multi-bandwidth-and-delay.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>信道利用率几乎不受带宽和延迟影响，维持在80%左右</li>
<li>丢包率并不受RTR变化的影响，丢包率随着带宽的增加而增加，最高达到2.8%</li>
<li>随着带宽的增加，丢包率随着增加，进而导致FEC的比例逐步增加，最高达到20%</li>
<li>采用GCC算法后，队列延迟中位数近似于0，90%样本值小于0.25m</li>
</ul>
<h3 id="single-gcc-flow-with-variable-available-bandwidth" tabindex="-1">Single GCC Flow with Variable Available Bandwidth</h3>
<p>设置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><mn>50</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RTT_{m}=50ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></eq>，可利用带宽先阶梯递增后阶梯递减，增减可选值为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>∈</mo><mrow><mo fence="true">{</mo><mn>500</mn><mo separator="true">,</mo><mn>1000</mn><mo separator="true">,</mo><mn>1500</mn><mo separator="true">,</mo><mn>2000</mn><mo fence="true">}</mo></mrow><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b_{i} \in \left \{ 500, 1000, 1500, 2000 \right \}kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">500</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1500</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2000</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-flow-step-bandwidth.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>随着码率阶梯递增或递减，GCC预估码率能够随之快速递增递减</li>
<li>码率增长到较高码率时，码率波动明显增加，FEC比例随着增加</li>
<li>码率从高位下降时，瞬间丢包率增加，会导致发送端码率严重下降，远低于接收端预估码率</li>
</ul>
<h3 id="multiple-gcc-flow" tabindex="-1">Multiple GCC Flow</h3>
<p>设置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><mn>50</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RTT_{m}=50ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></eq>，可利用带宽<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mn>1000</mn><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b_{i}  = 1000kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1000</span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-multiple-gcc.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>两个GCC流之间的码率竞争呈现无规律性</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-multiple-gcc-channel.png"
                        alt=""
                 ></p>
<p>从上图可以看出：</p>
<ul>
<li>在1000kbps和2000kbps时，码率分配十分不公平</li>
<li>在3000kbps时，码率分配相对公平，但先启动的GCC流仍然分配较多的码率</li>
</ul>
<h3 id="single-gcc-flow-and-single-tcp-flow" tabindex="-1">Single GCC Flow and Single TCP Flow</h3>
<p>设置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><mn>50</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RTT_{m}=50ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></eq>，可利用带宽<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mn>1000</mn><mo separator="true">,</mo><mn>2000</mn><mo separator="true">,</mo><mn>3000</mn><mo fence="true">}</mo></mrow><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b_{i}  = \left \{ 1000, 2000, 3000 \right \}kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">1000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3000</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>，考虑两种场景：先启动GCC流，100s后启动TCP流、先启动TCP流，100s后启动GCC流，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-and-single-tcp.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>GCC流的信道利用率随着带宽的增加而增加，且普遍低于TCP流的带宽占用率</li>
<li>GCC流后启动能够帮助GCC流获取到更高的带宽占用率</li>
</ul>
<p>将先启动TCP流后启动GCC流这种场景抽出来分析，考虑可利用带宽为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1000</mn><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b(t)=1000kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1000</span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3000</mn><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b(t)=3000kbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">3000</span><span class="mord mathnormal">kb</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>两种情况，仿真结果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-and-single-tcp-detail.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>在较低带宽时，GCC流会出现饥饿现象，无法上升到较高的码率</li>
<li>GCC流启动后一开始能够和TCP公平分配带宽，后续一直收到REMB包进而限制了带宽上升</li>
<li>若没有REMB包的影响，GCC流的带宽增长会比TCP流更加激进（图b）</li>
</ul>
<h3 id="conclusion" tabindex="-1">Conclusion</h3>
<p>GCC算法能够较好的处理单个GCC流，但是一旦和其他GCC流或TCP流共存时，GCC算法无法提供公平的带宽分配。</p>
<h2 id="improvement" tabindex="-1">Improvement</h2>
<p>如何解决与TCP流共存时的饥饿问题是后续的优化关键。有研究表明：GCC流与TCP流共存时的饥饿问题，是由于GCC算法的自适应门限机制导致的。</p>
<p>当GCC算法采用较小的阈值时，Delay-based BWE优于Loss-based BWE。然而当GCC流和TCP流码率达到瓶颈时，较小的阈值会导致GCC流出现饥饿问题。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-and-single-tcp-starvation.png"
                        alt=""
                 ></p>
<p>下图给出了自适应门限值对单个GCC流的影响：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-flow-threshold.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>随着门限值的增加，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>d</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{dd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">dd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>数量减少，这是因为较大的门限值，导致在不触发<strong>OVERUSE</strong>信号的情况下，允许更大的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m(t_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>变化。</li>
<li>随着门限值的增加，GCC算法偏向于Loss-based BWE，进而带宽占用率逐渐增加，其后果是更大的丢包率和队列延迟。</li>
<li>随着带宽的增加，带宽占用率逐渐增加，Delay-based-Decrease REMB逐渐减少，队列延时逐渐减小。</li>
</ul>
<p>从上图中展示Loss信息的图标，可以看出带宽的增加会导致更大的丢包率，这是为何？假设队列大小为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></eq>，带宽为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></eq>，那么我们可以将队列延迟抽象为如下模型：<br>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mi>q</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">
T_{q}(t) = \frac{q(t)}{b(t)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section><br>
当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></eq>较小时，譬如500kbps，那么队列延迟变化变大；当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></eq>较大时，譬如2000kbps，那么队列延迟变化变小。因此对于较高带宽，Delay-based-Decrease REMB较少，而对于较低带宽，Delay-based-Decrease REMB较多。当带宽较高时，以Loss-based BWE为主，带宽的调整主要是依据丢包信息，因此此时势必会触发更高的丢包率。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-flow-queue-delay.png"
                        alt=""
                 ></p>
<p>下图给出了自适应门限值对GCC流和TCP流并发时的影响：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/gcc-single-gcc-and-single-tcp-influence.png"
                        alt=""
                 ></p>
<p>从仿真结果可以看出：</p>
<ul>
<li>随着门限值的增加，GCC流的带宽占用率逐步增加</li>
<li>随着门限值的增加，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>d</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{dd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">dd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>数量减少，相对于单个GCC流，此时的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>d</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{dd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">dd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>数量不在一个数量级</li>
</ul>
<p>对比单GCC流和并发GCC/TCP流可以看出：</p>
<ul>
<li>当单GCC流时，较小的门限值能够提供更好的带宽占用率，同时维持较低的丢包率和延迟</li>
<li>当并发GCC/TCP流时，较小的门限值会导致Delay-based BWE占主导地位，进而导致GCC流饥饿。</li>
</ul>
<p>因此针对于不同的场景，我们必须要针对性的调整门限值。</p>
<p>本节主要分析了TCP流和GCC共存时的饥饿问题，两个GCC流共存时的无规律性也需要进一步研究。现阶段未找到相关资料，后续深入后继续撰写。</p>
<h2 id="reference" tabindex="-1">Reference</h2>
<ul>
<li><a class="link"   href="https://tools.ietf.org/html/draft-holmer-rmcat-transport-wide-cc-extensions-01" >RTP Extensions for Transport-wide Congestion Control draft-holmer-rmcat-transport-wide-cc-extensions-01<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.rtcbits.com/2017/01/bandwidth-estimation-in-webrtc-and-new.html" >Bandwidth Estimation in WebRTC (and the new Sender Side BWE)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tools.ietf.org/html/draft-alvestrand-rmcat-congestion-03" >A Google Congestion Control Algorithm for Real-Time Communication draft-ietf-rmcat-gcc-03<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://c3lab.poliba.it/MultimediaCC" >Congestion Control for Real-time Communication<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://c3lab.poliba.it/images/6/65/Gcc-analysis.pdf" >Analysis and Design of the Google Congestion Control for Web Real-time Communication (WebRTC)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://c3lab.poliba.it/images/d/d2/Skype_wwic07.pdf" >An Experimental Investigation of the Congestion Control Used by Skype VoIP<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.researchgate.net/publication/260200748_Understanding_the_Dynamic_Behaviour_of_the_Google_Congestion_Control_for_RTCWeb" >Understanding the Dynamic Behaviour of the Google Congestion Control for RTCWeb<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://conferences.sigcomm.org/sigcomm/2013/papers/fhmn/p21.pdf" >Experimental Investigation of the Google Congestion Control for Real-Time Flows<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.sciencedirect.com/science/article/pii/S1389128610002914" >Skype Video congestion control: An experimental investigation<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://c3lab.poliba.it/images/7/73/Cdc08_slides.pdf" >A Mathematical Model of the Skype VoIP Congestion Control Algorithm<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://eeweb.poly.edu/faculty/yongliu/docs/imc12tech.pdf" >Video Telephony for End-consumers: Measurement Study of Google+, iChat, and Skype<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给应用程序加版本信息</title>
    <url>/develop/win-add-version-info-to-app/</url>
    <content><![CDATA[<blockquote>
<p>如果某个想法是你唯一的想法，再也没有比这个更危险的事情了。</p>
</blockquote>
<p>右键应用程序的可执行文件，查看详细信息，能够看到应用程序的详细描述，这是怎么加的呢？<span id="more"></span></p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/app-version-info.jpg"
                          alt="应用程序详细信息" 
                 >
<h2 id="%E5%88%9B%E5%BB%BA%E8%B5%84%E6%BA%90%EF%BC%88rc%EF%BC%89%E6%96%87%E4%BB%B6" tabindex="-1">创建资源（rc）文件</h2>
<p>在Visual Studio 2014中，按照下面顺序：右键项目→Add→Resource，我们就可以在Solution Explorer中看到多了一个<code>resource.h</code>和<code>project.rc</code>文件。project.rc包含了项目的资源信息，包括版本号、icon等。</p>
<h2 id="%E7%94%9F%E6%88%90%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF" tabindex="-1">生成版本信息</h2>
<p>目前大多数应用程序的版本号都是4位，前三位手动设置，最后一位根据git提交次数来设置。git计算提交次数的指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;%git_path%&quot;\git rev-list --count HEAD &gt;&gt; version.h</span><br></pre></td></tr></table></figure>
<p>上面这句命令会将git提交次数写入到version.h文件的最后面，我们在version.h中只需要#define某个宏，然后不给值，用上面这条命令生成git提交次数。等值生成后，包含version.h就可以使用相应的版本号了。譬如下面：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> version_one 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> version_two 99</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> version_three 98</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> version_four <span class="comment">// 在这儿我们将要填充git提交辞书，譬如97</span></span></span><br></pre></td></tr></table></figure>
<h2 id="%E5%B0%86%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E5%86%99%E5%85%A5%E5%88%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AF%A6%E6%83%85" tabindex="-1">将版本信息写入到应用程序详情</h2>
<p>在<code>resource.h</code>中包含<code>version.h</code>，按照下面模板填写信息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Microsoft Visual C++ generated resource script.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;version.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APSTUDIO_READONLY_SYMBOLS</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from the TEXTINCLUDE 2 resource.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;winres.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> APSTUDIO_READONLY_SYMBOLS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 中文(简体，中国) resources</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_CHS)</span></span><br><span class="line">LANGUAGE LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> APSTUDIO_INVOKED</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// TEXTINCLUDE</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> TEXTINCLUDE</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="string">&quot;resource.h\0&quot;</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> TEXTINCLUDE</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="string">&quot;#include &quot;</span><span class="string">&quot;winres.h&quot;</span><span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\0&quot;</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> TEXTINCLUDE</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\0&quot;</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>    <span class="comment">// APSTUDIO_INVOKED</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Version</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">VS_VERSION_INFO VERSIONINFO</span><br><span class="line">FILEVERSION version_one, version_two, version_three, version_four</span><br><span class="line">PRODUCTVERSION version_one, version_two, version_three, version_four</span><br><span class="line"> FILEFLAGSMASK <span class="number">0x3fL</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"> FILEFLAGS <span class="number">0x1L</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"> FILEFLAGS <span class="number">0x0L</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> FILEOS <span class="number">0x40004L</span></span><br><span class="line"> FILETYPE <span class="number">0x2L</span></span><br><span class="line"> FILESUBTYPE <span class="number">0x0L</span></span><br><span class="line">BEGIN</span><br><span class="line">    BLOCK <span class="string">&quot;StringFileInfo&quot;</span></span><br><span class="line">    BEGIN</span><br><span class="line">        BLOCK <span class="string">&quot;080404b0&quot;</span></span><br><span class="line">        BEGIN</span><br><span class="line">            VALUE <span class="string">&quot;CompanyName&quot;</span>, <span class="string">&quot;Google China Inc.&quot;</span></span><br><span class="line">            VALUE <span class="string">&quot;FileDescription&quot;</span>, <span class="string">&quot;Chrome&quot;</span></span><br><span class="line">			VALUE <span class="string">&quot;FileVersion&quot;</span>, <span class="built_in">version</span>(version_one, version_two, version_three, version_four)</span><br><span class="line">            VALUE <span class="string">&quot;InternalName&quot;</span>, <span class="string">&quot;Chrome.exe&quot;</span></span><br><span class="line">            VALUE <span class="string">&quot;LegalCopyright&quot;</span>, <span class="string">&quot;Copyright (C) Google China Inc. 2016&quot;</span></span><br><span class="line">            VALUE <span class="string">&quot;OriginalFilename&quot;</span>, <span class="string">&quot;Chrome.exe&quot;</span></span><br><span class="line">            VALUE <span class="string">&quot;ProductName&quot;</span>, <span class="string">&quot;Chrome&quot;</span></span><br><span class="line">			VALUE <span class="string">&quot;ProductVersion&quot;</span>, <span class="built_in">version</span>(version_one, version_two, version_three, version_four)</span><br><span class="line">        END</span><br><span class="line">    END</span><br><span class="line">    BLOCK <span class="string">&quot;VarFileInfo&quot;</span></span><br><span class="line">    BEGIN</span><br><span class="line">        VALUE <span class="string">&quot;Translation&quot;</span>, <span class="number">0x804</span>, <span class="number">1200</span></span><br><span class="line">    END</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Icon</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Icon with lowest ID value placed first to ensure application icon</span></span><br><span class="line"><span class="comment">// remains consistent on all systems.</span></span><br><span class="line">IDI_ICON1               ICON                    <span class="string">&quot;ic_pen.ico&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>    <span class="comment">// 中文(简体，中国) resources</span></span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> APSTUDIO_INVOKED</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from the TEXTINCLUDE 3 resource.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>    <span class="comment">// not APSTUDIO_INVOKED</span></span></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Win32</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理中当前目录两种表示方式的区别</title>
    <url>/develop/win-dos-current-path/</url>
    <content><![CDATA[<p>Windows下批处理中<code>%cd%</code>和<code>%~dp0</code>都能用来表示当前目录，但是他们在不同的使用场景下，功能却不相同。<span id="more"></span></p>
<h2 id="%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" tabindex="-1">问题描述</h2>
<p>假设我们要在批处理a.bat里调用执行批处理b.bat，b.bat需要知道b.bat的当前位置，并执行run.exe，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * directory structure</span><br><span class="line"> * c:</span><br><span class="line"> * -a.bat</span><br><span class="line"> * -program</span><br><span class="line"> *        -b.bat</span><br><span class="line"> *        -run.exe</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* a.bat */</span><br><span class="line">call <span class="string">&quot;%cd%\program\b.bat&quot;</span></span><br><span class="line"></span><br><span class="line">/* b.bat */</span><br><span class="line"><span class="string">&quot;%cd%\run.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>那么现在能不能成功执行run.exe呢？</p>
<h2 id="%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" tabindex="-1">问题分析</h2>
<p><code>%cd%</code>和<code>%~dp0</code>都能用来表示当前目录，但是他们在不同的使用场景下，功能却不相同：</p>
<ul>
<li><code>%cd%</code>代表的是当前工作目录（current working directory，variable）；</li>
<li><code>%~dp0</code>代表的是当前批处理文件所在完整目录（the batch file’s directory，fixed）。</li>
</ul>
<p>我们来看看下面的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * directory structure</span><br><span class="line"> * c:</span><br><span class="line"> * -c.bat</span><br><span class="line"> * -program</span><br><span class="line"> *        -d.bat</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* c.bat */</span><br><span class="line">call <span class="string">&quot;%cd%\program\d.bat&quot;</span></span><br><span class="line"></span><br><span class="line">/* d.bat */</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">cd</span> = %<span class="built_in">cd</span>%</span><br><span class="line"><span class="built_in">echo</span> dp0 = %~dp0</span><br></pre></td></tr></table></figure>
<p>直接运行d.bat，结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> = C:\program</span><br><span class="line">dp0 = C:\program\</span><br></pre></td></tr></table></figure>
<p>直接运行c.bat，结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> = C:\</span><br><span class="line">dp0 = C:\program\</span><br></pre></td></tr></table></figure>
<p>从上面的结果可以看出：</p>
<ul>
<li>执行d.bat时，当前工作目录为d.bat所在目录；</li>
<li>执行c.bat时，当前工作目录为c.bat所在目录，即使在调用d.bat后，该工作目录依旧是c.bat所在目录。</li>
</ul>
<h2 id="%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3" tabindex="-1">问题解决</h2>
<p>让我们再来看看问题描述中提及的问题——能不能成功执行run.exe呢？</p>
<p>答案是：<strong>不能</strong>。“%cd%\run.exe”表示的是“C:\run.exe”，并非“C:\program\run.exe”。那么如何更改呢？有两种方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* plan A */</span><br><span class="line">/*  change the current working directory */</span><br><span class="line"></span><br><span class="line">/* a.bat */</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line">call <span class="string">&quot;%cd%\program\b.bat&quot;</span></span><br><span class="line"></span><br><span class="line">/* b.bat */</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line"><span class="string">&quot;%cd%\run.exe&quot;</span></span><br><span class="line"></span><br><span class="line">/* plan B */</span><br><span class="line">/*  using %~dp0 directly */</span><br><span class="line"></span><br><span class="line">/* a.bat *、</span><br><span class="line">call <span class="string">&quot;%~dp0program\b.bat&quot;</span></span><br><span class="line"></span><br><span class="line">/* b.bat */</span><br><span class="line"><span class="string">&quot;%~dp0run.exe&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="%E9%97%AE%E9%A2%98%E5%BB%B6%E4%BC%B8" tabindex="-1">问题延伸</h2>
<p>上面的解决方案中plan A通过更改当前目录来解决该问题，可以这里面也存在另外一个问题，让我们看下面的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * directory structure</span><br><span class="line"> * c:</span><br><span class="line"> * -program</span><br><span class="line"> *        -f.bat</span><br><span class="line"> * d:</span><br><span class="line"> * -e.bat</span><br><span class="line"></span><br><span class="line"> * plan A</span><br><span class="line"> *  change the current working directory</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* e.bat */</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line">call <span class="string">&quot;c:\program\f.bat&quot;</span></span><br><span class="line"></span><br><span class="line">/* f.bat */</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line"><span class="string">&quot;%cd%\run.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>现在e.bat和f.bat不在同一个盘符了，从e.bat切换当前工作目录到f.bat直接使用cd是不行的，必须要使用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;%~dp0&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>这个地方容易疏忽，切记不要犯错</strong>。</p>
<h2 id="%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93" tabindex="-1">问题总结</h2>
<p>我们来重申下<code>%~dp0</code>和<code>%cd%</code>的区别，<code>%cd%</code>和<code>%~dp0</code>都能用来表示当前目录，但是他们在不同的使用场景下，功能却不相同：</p>
<ul>
<li><code>%cd%</code>代表的是当前工作目录（current working directory，variable）；</li>
<li><code>%~dp0</code>代表的是当前批处理文件所在完整目录（the batch file’s directory，fixed）。</li>
</ul>
<p>从目前我们的使用情况来看，尽量使用<code>%~dp0</code>，不建议使用<code>%cd%</code>，有其他需求除外。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Win32</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下使用netsh管理无线承载网络</title>
    <url>/develop/win-hostednetwork-netsh/</url>
    <content><![CDATA[<blockquote><p>人世间所有的伟大行动都是默默无闻地完成的，而人世间所有具有智慧的人总是能够把握机会，取得成功</p>
<footer><strong>斯蒂芬·茨威格</strong><cite>人类群星闪耀时</cite></footer></blockquote>
<p>无线承载网络是Windows7和之后的操作系统所支持的新特性，其主要是实现物理网卡虚拟化和软件AP。本文主要是用netsh命令来管理无线承载网络。<span id="more"></span></p>
<h2 id="%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E7%AE%A1%E7%90%86" tabindex="-1">无线网卡驱动管理</h2>
<p>netsh命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan show drivers</span><br></pre></td></tr></table></figure>
<p>该命令能够检测出：<br>
1、系统上是否有无线网卡，如果没有无线网卡会提示<em>系统上没有无线接口</em></p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/netsh-wlan-no-drivers.png"
                          alt="无线网卡驱动" 
                 >
<p>2、无线网卡驱动是否支持无线承载网络功能，以及支持的无线电类型</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/netsh-wlan-drivers-info.png"
                          alt="无线网卡驱动" 
                 >
<h2 id="%E6%97%A0%E7%BA%BF%E6%89%BF%E8%BD%BD%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86" tabindex="-1">无线承载网络管理</h2>
<p>1、设置无线承载网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan <span class="built_in">set</span> hostednetwork mode=allow ssid=hotspot key=12345678</span><br><span class="line">承载网络模式已设置为允许。</span><br><span class="line">已成功更改承载网络的 SSID。</span><br><span class="line">已成功更改托管网络的用户密钥密码。</span><br></pre></td></tr></table></figure>
<p>2、启动无线承载网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan start hostednetwork</span><br></pre></td></tr></table></figure>
<p>3、停止无限承载网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan stop hostednetwork</span><br></pre></td></tr></table></figure>
<p>4、查看无线承载网络设置和状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan show hostednetwork</span><br></pre></td></tr></table></figure>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/netsh-wlan-hostednetwork-state.png"
                          alt="无线承载网络设置和状态" 
                 >
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan show hostednetwork setting=security</span><br></pre></td></tr></table></figure>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/netsh-wlan-hostednetwork-security.png"
                          alt="无线承载网络安全设置" 
                 >
<p>5、刷新无限承载网络安全密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh wlan refresh hostednetwork key</span><br><span class="line">已成功刷新承载网络的安全密钥。</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Win32</tag>
        <tag>WiFi</tag>
      </tags>
  </entry>
  <entry>
    <title>区分物理IP和虚拟机IP</title>
    <url>/develop/win-virtual-ip/</url>
    <content><![CDATA[<blockquote>
<p>生活的意义在于对人类全体发生兴趣，并与之合作，为我们的世界作出贡献，他们也在努力地培养着爱情和对社会的兴趣。</p>
</blockquote>
<p>工作中遇到一个问题，如何从Windows平台下众多的IP中找到所需要的物理IP？<span id="more"></span></p>
<h2 id="%E6%89%8B%E5%8A%A8%E6%9F%A5%E6%89%BE" tabindex="-1">手动查找</h2>
<p>通过手动查找的方式，是可以很轻松的找到该IP：<code>ipconfig /all</code>。执行该命令后，我们能看到下列数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   物理地址. . . . . . . . . . . . . : FC-AA-14-14-5D-1F</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 172.77.167.37(首选)</span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet1:</span><br><span class="line"></span><br><span class="line">   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-01</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.73.1(首选)</span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   物理地址. . . . . . . . . . . . . : 00-50-56-C0-00-08</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.50.1(首选)</span><br></pre></td></tr></table></figure>
<p>通过名称，就可以看出以太网对应的IPv4地址<code>172.77.167.37</code>就是我们需要的物理IP地址。</p>
<h2 id="%E7%A8%8B%E5%BA%8F%E6%9F%A5%E6%89%BE" tabindex="-1">程序查找</h2>
<p>然而如何通过程序区分呢？在我的Windows电脑上，存在8个网络接口，其中包括：</p>
<ul>
<li>回环地址</li>
<li>虚拟机地址</li>
<li>IPv4地址</li>
<li>IPv6地址</li>
</ul>
<p>如果找到我们需要的物理IPv4地址呢？需要一一筛选。</p>
<ul>
<li>回环地址：127.0.0.1</li>
<li>虚拟机地址：通过Mac地址来区分，虚拟机Mac地址的格式为<code>00-50-56</code>（十六进制）</li>
<li>IPv6地址：很长很长的一撮，很好区分</li>
<li>IPv4地址：剩下的就是IPv4地址了</li>
</ul>
<p>使用第三方库Poco的区分代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Poco::Net::NetworkInterface;</span><br><span class="line">std::string address;</span><br><span class="line">NetworkInterface::NetworkInterfaceList list = NetworkInterface::<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = list.<span class="built_in">begin</span>(); iter != list.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    NetworkInterface::MACAddress mac = iter-&gt;<span class="built_in">macAddress</span>();</span><br><span class="line">    <span class="keyword">if</span> (!iter-&gt;<span class="built_in">address</span>().<span class="built_in">isLoopback</span>() &amp;&amp;</span><br><span class="line">        !(mac[<span class="number">0</span>] == <span class="number">0x00</span> &amp;&amp; mac[<span class="number">1</span>] == <span class="number">0x50</span> &amp;&amp; mac[<span class="number">2</span>] == <span class="number">0x56</span>) &amp;&amp;</span><br><span class="line">        iter-&gt;<span class="built_in">address</span>().<span class="built_in">isIPv4Compatible</span>()) &#123;</span><br><span class="line">        address = iter-&gt;<span class="built_in">address</span>().<span class="built_in">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Win32</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Windows共享网络热点开发</title>
    <url>/develop/win-wifi/</url>
    <content><![CDATA[<blockquote>
<p>思考比工具更重要，发挥才智远优于理性，行动比分析更为迫切。</p>
</blockquote>
<p>市面上WiFi热点软件竞争激烈，猎豹WiFi、360WiFi、WiFi共享精灵等等产品在WiFi热点方面已经做得很成熟。但这总是其他人家的产品，对于一个新手来说，如何很快的开发出一款稳定的WiFi热点产品呢？基于分享互助的观点，这里将自己从事WiFi热点开发的经验写成博文。<span id="more"></span></p>
<h2 id="%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%82%B9" tabindex="-1">几个基本知识点</h2>
<p>开发一款WiFi热点软件需要知道哪些知识？我们先来看看这几个基本知识点，帮助我们更快的上手。</p>
<h3 id="windows%E6%97%A0%E7%BA%BF%E6%89%BF%E8%BD%BD%E7%BD%91%E7%BB%9C" tabindex="-1">Windows无线承载网络</h3>
<p>如果不需要连接外部网络的功能，实现Windows无线承载网络，就已经实现了一款WiFi热点软件了。多简单，从百度上搜搜别人博客上实现的代码，从谷歌上搜搜开源的代码——有一个C#开源项目已经实现该功能。的确很简单，不过即使是不需要连接外部网络，这点实现也是不够的。</p>
<h3 id="ics" tabindex="-1">ICS</h3>
<p>Internet Connection Sharing，网络连接共享，为WiFi热点提供连接外部热点的功能。大多数人使用WiFi热点软件，主要就是为了方便移动设备连接网络。</p>
<blockquote>
<p>MSDN的Native WiFi一节给出了Windows无线承载网络和ICS的详尽讲解，读懂了这里的讲解，也就能实现最简单的WiFi热点功能。</p>
</blockquote>
<p>为什么说是最简单的呢？那是因为你还会遇到下面问题：</p>
<ul>
<li>你可能开启不了热点</li>
<li>移动端可能连接不上该热点</li>
<li>移动端连接上了却没法上网</li>
<li>连接上了一直掉线</li>
<li>…</li>
</ul>
<p>这些问题，都会在本文后面给出解决方案或者原因分析——解决不了呀。</p>
<h3 id="dhcp" tabindex="-1">DHCP</h3>
<p>ICS提供了基本的DHCP功能，不过千万不要太指望它，我们还是老老实实的自己实现一个DHCP服务。DHCP协议内容，网络上很多，开源的DHCP服务器代码不稳定，自己实现DHCP服务更能保证正确性。</p>
<h3 id="nat" tabindex="-1">NAT</h3>
<p>NAT，Network Address Translator，网络地址转换，主要作用是把内网IP地址转换成为全球唯一的可定位的外部IP地址，从而使得局域网内的所有用户可以通过一个或者少数几个IP地址与全球的Internet通信——不仅节约了IP地址，而且在一定程度上保护了内部网络。</p>
<p>我们这儿使用NAT也是为了提供一个类似ICS的功能，实际上微软的ICS也是简版的NAT。</p>
<h2 id="%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91" tabindex="-1">基本的网络共享功能开发</h2>
<p>Windows无线承载网络提供最基本的网络共享功能，然而由于未加入ICS/NAT，这里仅仅是一个局域网络，实现这个基本功能，我们仍然是不能使用其来连接外网的。可是实现这一步也是必须的一步。</p>
<h3 id="%E5%90%AF%E5%8A%A8%E5%89%8D%E5%87%86%E5%A4%87" tabindex="-1">启动前准备</h3>
<p>在启动无线承载网络之前，需要有一些准备步骤，用来确定当前系统环境适合无线承载网络的启动。</p>
<blockquote>
<p>这些准备步骤是重中之重，如果没有这些准备步骤，启动失败的概率会大大提高。</p>
</blockquote>
<p>启动前准备一：开启无线承载网络所需服务，这些服务有可能会被关闭，必须要主动检测服务是否正常运行。具体服务包括：</p>
<ul>
<li>Winmgmt</li>
<li>ALG</li>
<li>BFE</li>
<li>Wlansvc</li>
<li>MpsSvc</li>
<li>iphlpsvc</li>
<li>dot3svc</li>
<li>WwanSvc</li>
<li>SharedAccess</li>
<li>WZCSVC</li>
</ul>
<p>启动前准备二：启动DHCP服务，并检测服务是否正常运行。DHCP服务后文会提及。</p>
<p>启动前准备三：判断是否存在无线网卡，如果没有无线网卡，网络共享功能只是空谈。</p>
<p>启动前准备四：检测无线网卡是否支持无限承载网络。</p>
<p>启动前准备五：检测无线网卡是否被禁用，如果被禁用就重启。</p>
<h3 id="%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B" tabindex="-1">调用流程</h3>
<p>基本功能的实现主要依赖于对MSDN相关文档的深入阅读，本节不会翻译这篇文章，本节的重点是基本功能实现的调用流程。</p>
<blockquote>
<p><a class="link"   href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd815252" >MSDN: Using Wireless Hosted Network and Internet Connection Sharing<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>调用流程一：初始化无线承载网络信息。</p>
<ul>
<li>设置无线承载网络可开启：调用WlanHostedNetworkSetProperty函数设置wlan_hosted_network_opcode_enable属性为TRUE；</li>
<li>设置无线承载网络基本信息：调用WlanHostedNetworkSetProperty函数设置wlan_hosted_network_opcode_connection_settings属性，需要设置SSID、连接用户数；</li>
<li>设置密码键值：调用WlanHostedNetworkSetSecondaryKey设置密码信息</li>
</ul>
<p>调用流程二：启动无线承载网络。</p>
<ul>
<li>关闭已经启动的无线承载网络：调用WlanHostedNetworkForceStop函数；</li>
<li>启动无线承载网络：调用WlanHostedNetworkStartUsing函数；</li>
<li>保存无线承载网络GUID信息：调用WlanHostedNetworkQueryStatus函数获取PWLAN_HOSTED_NETWORK_STATUS信息中的IPDeviceID值</li>
</ul>
<p>调用流程三：启动失败自修复。</p>
<ul>
<li>使用SetupAPI禁用设备并重新打开设备：这段可能需要百度/谷歌/MSDN寻找SetupAPI的使用方法，有可能需要多次禁用和启动，直到网络状态非wlan_hosted_network_unavailable；</li>
<li>重新启动无线承载网络</li>
</ul>
<p>上述流程没有涉及到具体代码的撰写，主要阐述需要调用的函数和操作。</p>
<h2 id="dhcp-1" tabindex="-1">DHCP</h2>
<p>在启动无限承载网络后，如果这时用手机连接热点，会发现手机无线网络一直都卡在获取IP地址的地方。这是因为这个时候无线承载网络并没有提供DHCP功能——ICS能够提供该功能，如果已经开启ICS，是能够获取到IP的，缺陷是不稳定，很有可能无法分配IP。</p>
<p>所以就需要我们自己实现一个DHCP服务，Google一下你就会发现不少开源的服务，选择一个仔细调试。否则你很有可能被这个水土不服的家伙坑了。你必须要了解DHCP的原理、能够分析抓包获取的数据。（推荐博文<a class="link"   href="http://blog.163.com/hlz_2599/blog/static/14237847420134139541993/" >DHCP协议原理及报文分析  <i class="fas fa-external-link-alt"></i></a>以及<a class="link"   href="https://wenku.baidu.com/view/7aee72277375a417866f8fe6.html" >DHCP报文精细分析_加上wireshark抓包<i class="fas fa-external-link-alt"></i></a>）</p>
<p>DHCP服务需要绑定一个静态IP，这个静态IP的设定必须要正确。可以设置一个IP库，防止IP和主机IP冲突。具体静态IP的设置方法，可以通过命令行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh interface ip <span class="built_in">set</span> address ..。</span><br></pre></td></tr></table></figure>
<p>不过这个设置是需要找到对于那个的无限承载网络命名信息，这个信息定义在&quot;SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\{GUID Get Before}\Connection&quot;下。</p>
<p>DHCP实现的最终效果要能满足下面需求：</p>
<ul>
<li>无线承载网络开启时，能够给移动端快速的分配IP地址；</li>
<li>不能影响电脑本身所在局域网中的DHCP服务；</li>
<li>不能导致IP分配冲突</li>
</ul>
<h2 id="ics-1" tabindex="-1">ICS</h2>
<p>Windows通过ICS提供基本的网络共享功能。ICS共享网络的流程如下：</p>
<ul>
<li>通过获取HostedNetwork接口GUID</li>
<li>获取外网接口GUID，需要判断该网络是否能够连接外部网络</li>
<li>通过调用EnableSharing开启ICS网络共享</li>
</ul>
<h2 id="nat-1" tabindex="-1">NAT</h2>
<p>首先，我们需要知道NAT的原理，具体参考<a class="link"   href="http://www.cnblogs.com/bo083/articles/2170189.html" >NAT原理与NAT穿越<i class="fas fa-external-link-alt"></i></a>。</p>
<p>然后，需要对中间层驱动有一定的了解。参考下列文献：</p>
<ul>
<li><a class="link"   href="http://www.xfocus.net/articles/200307/568.html" >基于IMD的包过滤防火墙原理与实现<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://wenku.baidu.com/view/3ae23920915f804d2b16c12c.html" >基于PassThru的NDIS中间层驱动程序扩展1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bbs.pediy.com/thread-191434.htm" >如何把NDIS Filter框架利用到日常的Windows驱动开发工作中<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://blog.csdn.net/yxyhack/article/details/6060999" >NDIS中间层的驱动包截获技术教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.xfocus.net/articles/200605/865.html" >基于PassThru的NDIS中间层驱动程序扩展<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bbs.pediy.com/thread-137545.htm" >NDIS中间层驱动开发在Win7系统下和Windows XP系统下的区别<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.xfocus.net/articles/200606/870.html" >NAT在NDIS中间层驱动中的实现<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.cnblogs.com/wubiyu/archive/2008/08/01/1257801.html" >NDIS开发[网络驱动开发]<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.cnblogs.com/LittleHann/p/4844874.html" >Windows网络驱动、NDIS驱动(微端口驱动、中间层驱动、协议驱动)、TDI驱动(网络传输层过滤)、WFP(Windows Filtering Platform)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bbs.csdn.net/topics/348555" >用NDIS中的passthru实现NAT的若干问题<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>这一块的代码我也只实现了一半，仅列出参考的一些文献。</p>
<h2 id="%E4%B8%80%E4%BA%9B%E9%9A%BE%E4%BB%A5%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">一些难以解决的问题</h2>
<p>最重要的问题就是稳定性问题，经过多方求证，目前主要和系统以及无线网卡驱动有关。此问题暂时不可解。</p>
<h2 id="some-tips" tabindex="-1">Some Tips</h2>
<p>下面是一些有用的链接，帮助我们完成可能存在的额外工作：</p>
<ul>
<li><a class="link"   href="http://stackoverflow.com/questions/31249684/how-to-change-the-network-name-shown-in-windowss-ncpa-cpl-using-c" >How to change the Network name shown in Windows’s ncpa.cpl using C++?<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bbs.csdn.net/topics/390864539/" >如何判断网卡是有线网卡还是无线网卡<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://superuser.com/questions/618908/how-does-windows-know-which-network-adapter-is-a-wireless-device" >How does Windows know which network adapter is a wireless device?<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/network/configuring-an-inf-file-for-a-modifying-filter-driver" >Configuring an INF File for a Modifying Filter Driver<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://blog.csdn.net/woshinia/article/details/10631483" >寻找正在连接中的网络连接，并开启网络连接的网络连接共享功能<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Win32</tag>
        <tag>WiFi</tag>
      </tags>
  </entry>
  <entry>
    <title>昨日书单，今日人生，明日憧憬</title>
    <url>/reading/booklist-yesterday/</url>
    <content><![CDATA[<center><b>子曰：“学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知而不愠，不亦君子乎？”</b></center>
<p>很少会把一本书看完，经常是看到一半就看不下去了。是书不好，还是人不好？花开堪折直须折，学习的年龄莫辜负大好青春。<span id="more"></span></p>
<h2 id="%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE%EF%BC%9A%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4%E6%8C%87%E5%8D%97" tabindex="-1">学会提问：批判性思维指南</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/asking-the-right-questions.png"
                        alt=""
                 ></p>
<p>点评：学会思考，掌握思考的艺术。读完之后，生活中需要思考的地方不在小白。书中内容较多，需多深度阅读，深度思考，反复实践，才能融会贯通。</p>
<h2 id="%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88" tabindex="-1">刻意练习：如何从新手到大师</h2>
<h2 id="%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%EF%BC%9A%E7%94%A8%E8%BE%93%E5%87%BA%E5%80%92%E9%80%BC%E8%BE%93%E5%85%A5" tabindex="-1">费曼学习法：用输出倒逼输入</h2>
<h2 id="%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%EF%BC%9A%E6%80%9D%E8%80%83%E3%80%81%E8%A1%A8%E8%BE%BE%E5%92%8C%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E9%80%BB%E8%BE%91" tabindex="-1">金字塔原理：思考、表达和解决问题的逻辑</h2>
<h2 id="%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6" tabindex="-1">如何阅读一本书</h2>
<h2 id="%E8%BF%99%E6%A0%B7%E8%AF%BB%E4%B9%A6%E5%B0%B1%E5%A4%9F%E4%BA%86" tabindex="-1">这样读书就够了</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/zhe-yang-du-shu-jiu-gou-le.png"
                        alt=""
                 ></p>
<p>点评：拆书帮的经典之作，对于致用类图书的阅读有很大的启发作用。不过这种读书方法最好还是现场读书。对于一个人读书，这本书也告诉我们一个道理：学到就是赚到，不必强求掌握所有。</p>
<h2 id="%E6%9C%80%E4%BC%98%E8%A7%A3%E4%BA%BA%E7%94%9F" tabindex="-1">最优解人生</h2>
<h2 id="%E9%87%91%E9%92%B1%E5%BF%83%E7%90%86%E5%AD%A6" tabindex="-1">金钱心理学</h2>
<h2 id="%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E4%BD%9C%E6%9C%8B%E5%8F%8B" tabindex="-1">把时间当作朋友</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/ba-shi-jian-dang-zuo-peng-you.png"
                        alt=""
                 ></p>
<p>点评：李笑来的力作，对我影响很大的一本书，这本书是真正的提升了我个人的内驱力。似乎是忽然，我从曾经的懒散，变得自律。</p>
<h2 id="%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83---%E4%B8%8D%E6%96%AD%E9%80%BC%E8%BF%91%E9%97%AE%E9%A2%98%E7%9A%84%E6%9C%AC%E8%B4%A8" tabindex="-1">深度思考 - 不断逼近问题的本质</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/deep-thinking.png"
                        alt=""
                 ></p>
<p>点评：感觉书名取巧了，如果他要是写成某某某自传我是不会去看的。这本书可以让女性借鉴如何在职场上更进一步。但所谓的深度思考，逼近问题的本质缺少更加普遍的适应能力。</p>
<h2 id="%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%EF%BC%9A%E7%9C%8B%E6%B8%85%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E7%9A%84%E5%BA%95%E7%89%8C" tabindex="-1">底层逻辑：看清这个世界的底牌</h2>
<h2 id="%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92-%3A-%E5%BC%80%E5%90%AF%E8%87%AA%E6%88%91%E6%94%B9%E5%8F%98%E7%9A%84%E5%8E%9F%E5%8A%A8%E5%8A%9B" tabindex="-1">认知觉醒 : 开启自我改变的原动力</h2>
<h2 id="%E8%A7%81%E8%AF%86" tabindex="-1">见识</h2>
<h2 id="effective-c%2B%2B" tabindex="-1">Effective C++</h2>
<h2 id="%E9%87%8D%E6%9E%84%EF%BC%9A%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1" tabindex="-1">重构：改善既有代码的设计</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/refactor.png"
                        alt=""
                 ></p>
<p>点评：一本程序员需要反复阅读的书，之前阅读过其中部分内容，这一次下定决心全部读完。受益匪浅，需要改进的地方还有很多。</p>
<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1" tabindex="-1">面向对象分析与设计</h2>
<h2 id="head-first-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" tabindex="-1">Head First 设计模式</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/head-first-design-pattern.png"
                        alt=""
                 ></p>
<p>点评：一直没有系统的阅读过设计模式的书，这本书寓学于乐，读起来一点不枯燥。其可能的缺点在于不够聚焦，有点啰嗦，进而看了后面忘了前面。</p>
<h2 id="%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8" tabindex="-1">代码大全</h2>
<h2 id="%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93" tabindex="-1">代码整洁之道</h2>
<h2 id="%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF" tabindex="-1">修改代码的艺术</h2>
<h2 id="%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91" tabindex="-1">测试驱动开发</h2>
<h2 id="c%2B%2B-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91" tabindex="-1">C++ 程序设计实践与技巧：测试驱动开发</h2>
<h2 id="%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5" tabindex="-1">敏捷软件开发：原则、模式与实践</h2>
<h2 id="%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF" tabindex="-1">软件测试的艺术</h2>
<h2 id="google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93" tabindex="-1">Google软件测试之道</h2>
<h2 id="%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5" tabindex="-1">分布式服务框架原理与实践</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/distributed-structure.png"
                        alt=""
                 ></p>
<p>点评：之前一直做基础开发，对于架构方面了解很少，这本书算是我架构的启蒙书籍。虽然目前的开发中还没有应用到相关知识，相信后续一定有所帮助。</p>
<h2 id="%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84" tabindex="-1">大型网站技术架构</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/large-network-arch.png"
                        alt=""
                 ></p>
<p>点评：按照高并发、高可用、可扩展等多个维度娓娓道来，从整体出发介绍了方方面面，对入门分布式相关架构知识很有帮助。主要问题在于，过于泛，要想掌握还需要针对每个内容点，重新寻找更深入的学习资料深入研究。</p>
<h2 id="%E8%82%A1%E7%A5%A8%E5%A4%A7%E4%BD%9C%E6%89%8B%E5%9B%9E%E5%BF%86%E5%BD%95" tabindex="-1">股票大作手回忆录</h2>
<h2 id="%E6%9C%89%E7%9F%A5%E6%9C%89%E8%A1%8C%E6%8A%95%E8%B5%84%E7%AC%AC%E4%B8%80%E8%AF%BE" tabindex="-1">有知有行投资第一课</h2>
<h2 id="%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8" tabindex="-1">穷爸爸富爸爸</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/rich-dad-poor-dad.png"
                        alt=""
                 ></p>
<p>点评：给自己多一条出路，能够从容的面对程序员的中年危机。印象最深刻的是：工作不为钱，而为学习某项技能，学习最终产生价值。</p>
<h2 id="%E6%88%B4%E7%BB%B4%E6%96%AF%E7%8E%8B%E6%9C%9D" tabindex="-1">戴维斯王朝</h2>
<h2 id="%E9%82%BB%E5%AE%B6%E7%9A%84%E7%99%BE%E4%B8%87%E5%AF%8C%E7%BF%81" tabindex="-1">邻家的百万富翁</h2>
<h2 id="%E4%B8%80%E4%B8%AA%E6%8A%95%E8%B5%84%E5%AE%B6%E7%9A%84%E4%BA%8C%E5%8D%81%E5%B9%B4" tabindex="-1">一个投资家的二十年</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/a-invester-20.png"
                        alt=""
                 ></p>
<p>点评：虽然无法完全借鉴，但是书中确是有不说真知灼见。重要是学习与参与，然后在实践中检验成果。不一定在股票上，在技术等其他方面，也是能够有一点的借鉴。</p>
<h2 id="%E9%9F%AD%E8%8F%9C%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB" tabindex="-1">韭菜的自我修养</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/jucai.png"
                        alt=""
                 ></p>
<p>点评：大鱼吃小鱼，小鱼吃虾米。知识+谋略+坚持，韭菜也有春天。这本书看样子像是李笑来的辩解，不过还是挺有道理的。</p>
<h2 id="%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF" tabindex="-1">高效能人士的七个习惯</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/the-seven-habits-of-highly-effective-people.png"
                        alt=""
                 ></p>
<p>点评：一本常读常新的书，以前对成功学嗤之以鼻，从这本书后对其有了改观。这本书也反映了我阅读方面的一个问题——读了就忘。因此，我自己开始从宏观的角度来记录所读所思。</p>
<h2 id="%E6%88%90%E5%B0%B1" tabindex="-1">成就</h2>
<h2 id="%E8%BF%99%E5%B0%B1%E6%98%AFokr" tabindex="-1">这就是OKR</h2>
<h2 id="%E7%90%86%E5%BF%B5%E5%88%B6%E5%BA%A6%E4%BA%BA%EF%BC%9A%E5%8D%8E%E4%B8%BA%E7%BB%84%E7%BB%87%E4%B8%8E%E6%96%87%E5%8C%96%E7%9A%84%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91" tabindex="-1">理念制度人：华为组织与文化的底层逻辑</h2>
<h2 id="%E4%BB%8E%E5%81%B6%E7%84%B6%E5%88%B0%E5%BF%85%E7%84%B6%EF%BC%9A%E5%8D%8E%E4%B8%BA%E7%A0%94%E5%8F%91%E6%8A%95%E8%B5%84%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5" tabindex="-1">从偶然到必然：华为研发投资与管理实践</h2>
<h2 id="%E6%8A%80%E6%9C%AF%E9%A2%86%E5%AF%BC%E5%8A%9B%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E6%89%8D%E8%83%BD%E5%B8%A6%E5%9B%A2%E9%98%9F" tabindex="-1">技术领导力：程序员如何才能带团队</h2>
<h2 id="%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%EF%BC%9A%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%9836%E8%AE%B2" tabindex="-1">极客时间：技术管理实战36讲</h2>
<h2 id="%E5%BE%AE%E4%B9%A0%E6%83%AF" tabindex="-1">微习惯</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/micro-hobit.png"
                        alt=""
                 ></p>
<p>点评：此类书籍看了很多，就是为何对我不起作用。书中作者都说看得人都感同身受，觉得起了很大的改变。但我觉得这似乎是故意对自己的欺骗，可是我无法欺骗自己。</p>
<h2 id="%E6%80%AA%E8%AF%9E%E5%BF%83%E7%90%86%E5%AD%A6" tabindex="-1">怪诞心理学</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/grotesque-psychology.png"
                        alt=""
                 ></p>
<p>点评：并不觉得有多怪诞，只是比较有意思，关注的是一些平时不会关心的地方。按照我们平民百姓的说法，就是吃饱着撑了瞎想。不过还是挺有意思的。</p>
<h2 id="%E5%85%BB%E8%82%B2%E7%94%B7%E5%AD%A9" tabindex="-1">养育男孩</h2>
<h2 id="%E4%BD%95%E4%BB%A5%E4%B8%BA%E7%88%B6" tabindex="-1">何以为父</h2>
<h2 id="%E5%85%A8%E7%90%83%E9%80%9A%E5%8F%B2" tabindex="-1">全球通史</h2>
<h2 id="%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2" tabindex="-1">人类简史</h2>
<h2 id="%E8%B4%A7%E5%B8%81%E6%88%98%E4%BA%89" tabindex="-1">货币战争</h2>
<h2 id="%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%EF%BC%9A1840-1937" tabindex="-1">中国近代史：1840-1937</h2>
<h2 id="%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0" tabindex="-1">乔布斯传</h2>
<h2 id="%E9%A9%AC%E6%96%AF%E5%85%8B%E4%BC%A0" tabindex="-1">马斯克传</h2>
<h2 id="%E4%BF%9E%E6%95%8F%E6%B4%AA%E4%BC%A0%EF%BC%9A%E6%88%91%E6%9B%BE%E8%B5%B0%E5%9C%A8%E5%B4%A9%E6%BA%83%E7%9A%84%E8%BE%B9%E7%BC%98" tabindex="-1">俞敏洪传：我曾走在崩溃的边缘</h2>
<h2 id="%E9%9B%B7%E5%86%9B%E4%BC%A0" tabindex="-1">雷军传</h2>
<h2 id="%E5%B7%B4%E8%8F%B2%E7%89%B9%E4%BC%A0" tabindex="-1">巴菲特传</h2>
<h2 id="%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85" tabindex="-1">浪潮之巅</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/lang-chao-zhi-dian.png"
                        alt=""
                 ></p>
<p>点评：讲述高新科技成败历史的书籍，从本书能够看出一家百年企业应该必须的元素，以及优秀的领导人的重要性。基因决定命运。</p>
<h2 id="%E8%85%BE%E8%AE%AF%E4%BC%A0" tabindex="-1">腾讯传</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/tencent.png"
                        alt=""
                 ></p>
<p>点评：腾讯的历史，是中国互联网二十年的历史。书中可以看出商场就是战场，没有永恒的敌人，也没有永远的朋友。再大的公司也可能在危机面前瞬间坍塌。</p>
<h2 id="%E6%BF%80%E8%8D%A1%E4%B8%89%E5%8D%81%E5%B9%B4%EF%BC%9A%E4%B8%AD%E5%9B%BD%E4%BC%81%E4%B8%9A1978-2008" tabindex="-1">激荡三十年：中国企业1978-2008</h2>
<h2 id="%E4%B8%89%E4%BD%93" tabindex="-1">三体</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/three-body.png"
                        alt=""
                 ></p>
<p>点评：除了早期沉迷的网络小说，三体是我今年来最投入的一本书。不光光是科幻，书中对人性的思考更让人深思。</p>
<h2 id="%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA" tabindex="-1">禅与摩托车维修艺</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/zen-and-the-art-of-motocyle-maintanance.png"
                        alt=""
                 ></p>
<p>点评：因为对摩托车感兴趣而看这本书，尚未看完，也不确定以后会不会看完。当作者开始反复的想出去阐述良质这个概念的时候，我开始对其丧失了兴趣。有可能现在的觉悟不够。</p>
<h2 id="%E5%9F%BA%E7%9D%A3%E5%B1%B1%E4%BC%AF%E7%88%B5" tabindex="-1">基督山伯爵</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/le-comte-de-monte-rristo.png"
                        alt=""
                 ></p>
<p>点评：只看了一半，喜欢看简练的文章，这种名著总是让我感觉冗余过度。前半部分看的觉得还算紧凑，后半部分就如裹脚布一样长了。三个火枪手也是只看了前半部分，看样子和大仲马无缘。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>BookList</tag>
      </tags>
  </entry>
  <entry>
    <title>三月：迟来的总结和反思</title>
    <url>/timecapsule/2017-improve/</url>
    <content><![CDATA[<blockquote>
<p>吾十有五而志于学，三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲不逾矩。</p>
</blockquote>
<p>看似繁忙的日子，充满了战术上的偷懒，仍然没有找到适合自己的那套方法论。<span id="more"></span>想把一些东西刻在骨头上，然而这不仅需要时间的帮助，还需要强大的意志力。想完全按照自己的想法和规划来行事，其难度远超制定想法和规划时所能想到的。</p>
<p>过去的一年，工作、学习、读书、生活，都未能达到开始期望的目标。虽然有一定的进步，但离走出沼泽泥泞还有很远的一段路。坚信人生存在一些壁障，没穿过一个壁障都能发现全新的世界，我离最近的壁障越来越近了。似乎只需要踏出一步，就能越过他，可惜这一步很难跨过。以前一直想借助外力，总希望发生点什么来让我顿悟。却不知道，最终一切都要靠自己的内驱力。形成正向激励，做好以前偷懒不愿做的事，现在的我的内驱力也越来越强。只是，离想要的还是很远。是不是成长，提升了自己对自己的要求？</p>
<p>令行禁止，是否要成长为有灵魂的机器人？什么时候能够不害怕死去？人生是否是一场赌注，掷骰子的那个人是不是我自己？</p>
<p>突破自己，走出舒适区，做以前不敢做的事，给自己画一个大饼，然后忘记生活的苟且。树立正确的金钱观、家庭观和工作观。金钱为我所用，家庭为我所托，工作为我所梦。从现在起，阅读、思考、成长，做条有梦想的咸鱼。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>TimeCapsule</category>
      </categories>
      <tags>
        <tag>DailyLife</tag>
        <tag>Introspection</tag>
      </tags>
  </entry>
  <entry>
    <title>总结与展望：成长的2015与努力的2016</title>
    <url>/timecapsule/goodbye-2015-hey-2016/</url>
    <content><![CDATA[<blockquote><p>劝君莫惜金缕衣，劝君惜取少年时。花开堪折直须折，莫待无花空折枝。</p>
<footer><strong>杜十娘</strong><cite>金缕衣</cite></footer></blockquote>
<p>2015年已经过去了三个月，在公司的网页上也做了三到五年的规划。2106都开始了一个季度，我才着手写去年的总结和今年的展望。不过总归是开始写了，这也将是我重新更改博客主题之后的第一篇正式博客。之前的博客，写的质量很差，也应该都删去。<span id="more"></span></p>
<h2 id="%E6%88%90%E9%95%BF%E7%9A%842015" tabindex="-1">成长的2015</h2>
<p>2014年结束的时候，没有给2015年做什么规划，现在也就无法找到一个书面的标准来衡量自己是否达到了自己的预期。总结这一年：离开学校、步入社会。</p>
<h3 id="%E7%A6%BB%E5%BC%80%E5%AD%A6%E6%A0%A1%E3%80%81%E6%AD%A5%E5%85%A5%E7%A4%BE%E4%BC%9A" tabindex="-1">离开学校、步入社会</h3>
<p>2015年4月之前，我在学校待了18年，2015年4月，我结束了18年的学生生涯。这可以说是可喜可贺，参照我在公司新人感言上所说的：</p>
<blockquote>
<p>2015年，我开始工作，开始赚钱养活自己，开始可以给父母和女朋友买点什么东西，我很开心。</p>
</blockquote>
<p>我的确很开心，两年半的读研旅程一直都很压抑，所做的事情不过是满足老师的需求。你无法做自己想做的，你无法在做的不开心的时候直接辞职走人，你只能按照毕业需要走的路走下去。走不下去的有些人离开了校园，也有些人直接离开了这个世界（希望现在还在读研的兄弟姐妹么找到好的导师，找不到也不要犯傻）。不过还是很感谢我的导师，他有缺点，也有优点，这些伴随我度过两年半。</p>
<p>伴随我两年半的还有东大的校园，还有走了之后忽然怀念的东大桃园餐厅，以及东门东大东的酸菜鱼。不知道下一次去，是什么时候了。</p>
<p>四月份答辩完，办完离校手续，在北京、南京、西塘、杭州转悠了一圈，最后踏上了南下的火车，来到了广州。我从来没想过要去离家这么远的地方，可是又似乎必须要来这边。</p>
<p>来到这么远的地方，享受着长时间的高温，享受着三四月份的潮湿，享受着荔枝与龙眼，享受着工作的喜悦与烦恼，享受着这个新的城市带给我新的感触。</p>
<p>工作总是辛苦的，但也是快乐的。不停的学习，不停的犯错，不停的改进，明显能看到自己的成长。从毫无经验到独立胜任工作，我经历了六个月。</p>
<p>之前一直要写半年总结、八月总结，一直没有动笔，还是要分析下自己做了什么、学了什么、还有哪些缺点。不能让迷迷糊糊的过去延续到迷迷糊糊的未来。</p>
<h3 id="2015%E5%B9%B4%E6%88%91%E8%AF%BB%E4%BA%86%E5%93%AA%E4%BA%9B%E4%B9%A6" tabindex="-1">2015年我读了哪些书</h3>
<p>说起来很惭愧，我没读多少书，我把大把时间花费在了网络小说上，陶冶情操，培养气质的书籍，没读过几本；提高技能，增加专业知识的书籍也只读了几本。只能用五个字来总结：任重而道远。</p>
<p>看完本的专业书籍竟然只有Effective C++，看完本的非专业非网络书籍竟然也只有三体一二两部。这实在是不该！！！</p>
<h3 id="2015%E5%B9%B4%E6%88%91%E5%8E%BB%E8%BF%87%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9" tabindex="-1">2015年我去过哪些地方</h3>
<p>我去了北京，正好北京降温，我窝在出租屋里待了一个星期，除了圆明园离得近稍微逛了下。</p>
<p>我去了西塘与杭州，商业化的西塘没有那么美，傍晚的西湖真的很诱人。</p>
<p>我去了深圳，下着雨，冒着烈日，吵着架，走到腿断，没去东部华侨城，去了锦绣中华和民俗村，并不是多么美好的体验。</p>
<p>我去了香港，去香港不过是买买买，手机、化妆品、手表。</p>
<p>我去了厦门，走马观花，我并没有看到厦门的美，是不是厦门不美，还是我没了发现美得眼光？</p>
<p>我还是渴望沐浴在午后的阳光里，躺在山坡上，看一望无际的稻田，碧波荡漾，随风摇曳。</p>
<h3 id="2015%E5%B9%B4%E6%88%91%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E8%B6%B3" tabindex="-1">2015年我还有哪些不足</h3>
<p>如果让我自己说我的缺点，我几乎能一直说下去，如果让我说我的优点，我一点也挤不出来。我好像全是缺点，少了很多优点。</p>
<ul>
<li>2015年有了成长，但还是努力不够，容易懈怠。</li>
<li>2015年还是和女朋友经常吵架，磨合不够融洽。</li>
<li>2015年还是不能严格要求自己，作息不规律，缺少运动。</li>
<li>2015年还是太胆小，放不开，不能争取自己想要的。</li>
<li>…</li>
</ul>
<p><strong>2015年，我是为了工作而工作，为了生活而生活，这不够。</strong></p>
<h2 id="%E5%8A%AA%E5%8A%9B%E7%9A%842016" tabindex="-1">努力的2016</h2>
<p>2016年已经开始了三个月了，算是开了个好头，努力去阅读各种著作、专业技能书籍。只能说相对于2015年略好，但也远远达不到我想要的那样。</p>
<p>时间是挤出来的，把上厕所、睡觉前玩手机的时间都挤出来，每个月至少都能看完一本书。这也将是我今年的目标。今年的主要目标就是<strong>提高个人修养，增强处世能力，加强专业知识，加强体能锻炼</strong>。以前不想做、不敢做、怕做错的事情，也要努力激流而上。如果不克服自己的缺点，怎么去成长？</p>
<h3 id="2016%E5%B9%B4%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92" tabindex="-1">2016年阅读计划</h3>
<p>专业书籍6本、各种著作12本，每晚保证两个小时以上的专业技能书籍阅读，每晚睡前保证一个小时的文学著作阅读，将碎片化时间利用起来。</p>
<table>
<thead>
<tr>
<th style="text-align:center">月份</th>
<th style="text-align:center">专业</th>
<th style="text-align:center">著作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Win32多线程编程</td>
<td style="text-align:center">简单逻辑学</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Windows驱动开发技术详解</td>
<td style="text-align:center">人类简史，从动物到上帝</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Windows内核安全编程</td>
<td style="text-align:center">none</td>
</tr>
</tbody>
</table>
<h3 id="2016%E5%B9%B4%E5%8D%9A%E5%AE%A2%E8%AE%A1%E5%88%92" tabindex="-1">2016年博客计划</h3>
<p>博客除了一些细节还需要维护，其他方面不打算再做大的修改。保证每周输出一篇博客，自认为还不错的会放在首页，质量不行的学习心得会放在Home Navigation的Studying链接下。</p>
<h3 id="2016%E5%B9%B4%E9%94%BB%E7%82%BC%E8%AE%A1%E5%88%92" tabindex="-1">2016年锻炼计划</h3>
<p>每晚7点到9点之间抽出半个到一个小时的时间去健身房锻炼，每周不低于三次。周末羽毛球运动一次。</p>
<h3 id="2016%E5%B9%B4%E6%97%85%E6%B8%B8%E8%AE%A1%E5%88%92" tabindex="-1">2016年旅游计划</h3>
<p>不知道该去哪，似乎总是在看人，我想去僻静优美的地方，安安静静的躺着，看风起云涌，潮起潮落，夕阳西下，朝日初生。</p>
<p><strong>2016年，我要为了事业而工作，为了梦想而生活</strong></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>TimeCapsule</category>
      </categories>
      <tags>
        <tag>DailyLife</tag>
        <tag>Introspection</tag>
      </tags>
  </entry>
  <entry>
    <title>我不在等以后了</title>
    <url>/timecapsule/no-more-waiting/</url>
    <content><![CDATA[<blockquote><p>绿草是无愧于它所生长的伟大世界的。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<p>活了二十几年，我似乎一直在等，等我买房了就不省钱，等我准备好了就去做那件事，等我有钱了就帮助穷苦人民…万事都在等，万事成蹉跎。<span id="more"></span></p>
<p>我每天按照同样的轨迹，做着同样的事情，不去做任何改变，似乎所有改变都需要等我准备好了才可能改变。我才二十五岁，人生才过去了四分之一，我已经开始害怕死亡了。我那么害怕也是因为我没有过好这一生，我在等。我以为我等到了就可以不害怕，永远都在等的我永远在等，试着去改变，试着去接受没有准备好的人生，试着给自己压力，让自己在不完美的时候做的最好。</p>
<p>我每天所做的，和一个碌碌无为的人没有什么区别，我看似很努力，只是是害怕被落下。如果周边人都和我一样，我会一直做个庸人，不去尝试更进一步。我应该做些什么？我可以做哪些，让我不惧死亡？我渴望成为路飞，即使面对死亡，也能无悔，也能坦然，也能大笑。</p>
<p>我觉得我可以活到一百岁，可现实却有可能只让我活到三十岁。等到三十岁之后，再去做三十岁以后的事，是不是太迟了？在我们那儿中年就嗝屁的人，是不会有葬礼的，我会被埋在一个小山坡上，难道我还要在那个山坡上等着复活，然后再去做三十岁以后应该做的事？</p>
<p>没有人给我等的机会了，离十八岁那年，已经过去了七年了。七年之痒，我要从这七年的生活出轨到新的世界。人的一生中，需要面临两件最重要的事情：事业和家庭，这也是两件最不能等的事情，尝试去做不敢做的事情，在这两件事中无悔。如果我三十岁死去，是不是就没有遗憾了？</p>
<p>我要改变，没有人会给我机会，除非是我争取的。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>TimeCapsule</category>
      </categories>
      <tags>
        <tag>Introspection</tag>
      </tags>
  </entry>
  <entry>
    <title>H.264/MPEG-4 AVC学习</title>
    <url>/develop/codec-h264/</url>
    <content><![CDATA[<blockquote>
<p>任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。</p>
</blockquote>
<p>H.264，又称为 MPEG-4 第10部分，高级视频编码（英语：MPEG-4 Part 10, Advanced Video Coding，缩写为 MPEG-4 AVC）是一种面向块的基于运动补偿的视频编码标准 。<span id="more"></span></p>
<p>对于视频序列样本来说，使用 H.264 编码器能够比使用有运动补偿的 MPEG-4 编码器降低50%的比特率(bps)。在没有运动补偿的情况下，H.264 编码器的效率至少比 MPEG-4 编码器高3倍，比 M-JPEG 编码器高6倍。除了能够显著的提高编码效率外，H.264的优点还包括：提供高质量的图像、容错能力强、网络适应性强、低时延等。</p>
<p>有关 H264 详细的介绍可以参考</p>
<ul>
<li><strong>维基百科：H.264/MPEG-4 AVC</strong>，<a class="link"   href="https://zh.wikipedia.org/wiki/H.264/MPEG-4_AVC" >中文地址<i class="fas fa-external-link-alt"></i></a>/<a class="link"   href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC" >英文地址<i class="fas fa-external-link-alt"></i></a></li>
<li><strong>H264相关标准</strong>，中英对照版本见<a class="link"   href="https://wenku.baidu.com/view/b650103310661ed9ad51f381.html" >文献<i class="fas fa-external-link-alt"></i></a>。</li>
</ul>
<h2 id="h.264%E5%8E%9F%E7%90%86" tabindex="-1">H.264原理</h2>
<p>视频编码的核心思想是是去除冗余信息，冗余信息包括以下几个方面：</p>
<ul>
<li>空间冗余：图像相邻像素之间有较强的相关性</li>
<li>时间冗余：视频序列的相邻图像之间内容相似</li>
<li>编码冗余：不同像素值出现的概率不同</li>
<li>视觉冗余：人的视觉系统对某些细节不敏感</li>
<li>知识冗余：规律性的结构可由先验知识和背景知识得到</li>
</ul>
<p>视频编解码器（编码器/解码器）是指两个协同运行的压缩-解压算法。使用不同标准的视频编解码器通常彼此之间互不兼容。</p>
<p>H.264压缩方法如下：</p>
<ul>
<li>分组：把几帧图像分为一组(<strong>GOP</strong>，也就是一个序列)，为防止运动变化，帧数不宜取多；</li>
<li>定义帧：将每组内各帧图像定义为三种类型，即I帧、B帧和P帧；</li>
<li>预测帧：以I帧做为基础帧，以I帧预测P帧，再由I帧和P帧预测B帧;</li>
<li>数据传输：最后将I帧数据与预测的差值信息进行存储和传输。</li>
</ul>
<p>H.264编解码流程如下：</p>
<ul>
<li>H.264编码流程</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-encoder-block-diagram.png"
                        
                 >
<ul>
<li>H.264解码流程</li>
</ul>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-decoder-block-diagram.png"
                        
                 >
<h2 id="h.264%E5%B8%A7%E5%9C%BA" tabindex="-1">H.264帧场</h2>
<h3 id="%E5%B8%A7%E4%B8%8E%E5%9C%BA" tabindex="-1">帧与场</h3>
<p>要想了解帧与场的概念，需先掌握<strong>逐行扫描</strong>和<strong>隔行扫描</strong>的区别。在英语中，逐行扫描为<em>Progressive Scanning</em>，隔行扫描为<em>Interlace Scanning</em>。</p>
<p>逐行比较好理解，假设一帧图像的大小是704x576，那么逐行的话就是576行。隔行图像，是早期电视信号中引入的概念，把一帧图像分为上下两场，两场图像在时间上具有先后，但传输时同时传送到显示端，显示端在显示按各自的时间分开进行显示。该方式主要是利用了人眼的余辉效应，通过隔行显示，提高了显示的流畅性。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/auvi-interlace-scanning.png"
                        alt="隔行扫描"
                 ></p>
<p><strong>场</strong>（Field）和<strong>帧</strong>（Frame）的概念一目了然：</p>
<ul>
<li>隔行扫描得到场，场分为底场和顶场，底场包含偶数行数据，顶场包含奇数行数据；</li>
<li>逐行扫描得到帧，帧包含一张图片完整的信息，底场和顶场一起包含完整的一帧信息。</li>
</ul>
<p>对于一个具体的序列参数集来说，编码场的宽度和编码帧的宽度是相同的，而编码场的高度是是编码帧的高度的一半。</p>
<h3 id="%E5%B8%A7%E7%BB%84%E6%88%90" tabindex="-1">帧组成</h3>
<p>H.264多了个图像组成一个<strong>视频系列</strong>（GOP），每个图像由一<strong>帧</strong>（Frame）组成。帧又可以分成一个或几个<strong>片</strong>（Slice）。片由<strong>宏块</strong>（Macro Block）组成，一帧中每个片的宏块数不一定相同。每个宏块由一个16×16的亮度数组和两个8×8的色差数组组成。一个720×480分辨率的图像可以被划分为1350（45×30）个宏块。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-slice.png"
                        alt="SLICE"
                 ></p>
<p>宏块是编码处理的基本单元。一个帧是可以分割成多个片来编码的，构成I_Slice、P_Slice、B_Slice、SP_Slice和SI_Slice，而一个片编码之后被打包进一个NAL单元。编码片相互间独立，这样做的目的是为了限制误码的扩散和传输。</p>
<p>I_Slice、P_Slice和B_Slice对应于I帧、P帧和B帧，三者之区别如下：</p>
<ul>
<li>I_slice ：只使用当前片中已解码的像素进行帧内预测。</li>
<li>P_slice：可能使用当前片中的像素进行帧内预测，也可能使用前面参考帧进行帧间预测。</li>
<li>B_slice：可能使用当前片中的象素进行帧内预测，也可能使用前后参考帧进行帧间预测。</li>
</ul>
<h3 id="%E5%B8%A7%E5%88%86%E7%B1%BB" tabindex="-1">帧分类</h3>
<p>根据H.264的不同类别，编码器会使用不同类型的帧，例如I帧、P帧和B帧。</p>
<ul>
<li>
<p><strong>I帧</strong>（帧内编码帧）是一种自带全部信息的独立帧，无需参考其它图像便可独立进行解码。</p>
<p>视频序列中的第一个帧始终都是I帧。如果所传输的比特流遭到破坏，则需要将I帧用作新查看器的起始点或重新同步点。I帧可以用来实现快进、快退以及其它随机访问功能。如果新的客户端将参与查看视频流，编码器将以相同的时间间隔或者根据要求自动插入I帧。I帧的缺点在于它们会占用更多的数据位，但从另一方面看，I帧不会产生可觉察的模糊现象。</p>
</li>
<li>
<p><strong>P帧</strong>（帧间预测编码帧）需要参考前面的I帧和/或P帧的不同部分才能进行编码。</p>
<p>与I帧相比，P帧通常占用更少的数据位，但其缺点是，由于P帧对前面的P和I参考帧有着复杂的依赖性，因此对传输错误非常敏感。</p>
</li>
<li>
<p><strong>B帧</strong>（双向预测编码帧）需要同时以前面的帧和后面的帧作为参考帧。</p>
</li>
</ul>
<p>下图为带有I帧、B帧和P帧的典型视频序列。P帧只需要参考前面的I帧或P帧，而B帧则需要同时参考前面和后面的I帧或P 帧。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-i-p-b.png"
                        alt="带有I帧、B帧和P帧的典型视频序列"
                 ></p>
<p>当视频解码器逐个帧地对比特流进行解码以便重构视频时，必须始终从I帧开始解码。如果使用了P帧和B帧，则必须与参考帧一起解码。在H.264基准类中，仅使用I帧和P帧。由于基准类没有使用B帧，所以可以实现低延时，因此是网络摄像机和视频编码器的理想选择。</p>
<h2 id="h.264%E5%AE%9E%E7%8E%B0" tabindex="-1">H.264实现</h2>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-overall.png"
                        alt="H.264实现流程"
                 ></p>
<h3 id="%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B" tabindex="-1">帧内预测</h3>
<p>在H.264中，将通过新的高级帧内预测方法对I帧进行编码。这种方法通过对帧中每个宏块内较小的像素块进行连续预测，通过一组不同方向上的相邻块来预测当前块，可以大大减少I帧所占的数据位并保持较高的质量。这一点可通过在与进行帧内编码的新4×4像素块相邻接的前几个编码像素中，寻找匹配的像素来实现。通过重复利用已编码的像素值，可以极大地减少需要编码的位数。</p>
<p>帧内预测编码的是预测块和实际块差值，这种方法能够有效减少平滑背景小的空间冗余。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-intra-estimation.png"
                        alt="差分编码"
                 ></p>
<h3 id="%E5%B8%A7%E9%97%B4%E9%A2%84%E6%B5%8B" tabindex="-1">帧间预测</h3>
<p>H.264 通过差分编码来减少视频数据量，大多数视频压缩标准都采用这种方法：在差分编码中，会将一个帧与参考帧（即前面的 I 帧或 P 帧）进行对比，然后只对那些相对于参考帧来说发生了变化的像素进行编码。通过这种方法，可以降低需要进行编码和发送的像素值。</p>
<p>对差分编码（包括H.264在内的大多数视频压缩标准都采用这种方法）来说，只有第一个图像（I帧）是将全帧图像信息进行编码。在后面的两个图像（P帧）中，其静态部分（即房子）将参考第一个图像，而仅对运动部分（即正在跑步的人）使用运动矢量进行编码，从而减少发送和存储的信息量。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-diff-encode.png"
                        alt="差分编码"
                 ></p>
<p>然而，如果视频中存在大量物体运动的话，差分编码将无法显著减少数据量。这时，可以采用基于块的<strong>运动补偿</strong>技术。基于块的运动补偿考虑到视频序列中构成新帧的大量信息都可以在前面的帧中找到，但可能会在不同的位置上。所以，这种技术将一个帧分为一系列的宏块。然后，通过在参考帧中查找匹配块的方式，逐块地构建或者&quot;预测&quot;一个新帧（例如P帧）。如果发现匹配的块，编码器只需要对参考帧中发现匹配块的位置进行编码。与对块的实际内容进行编码相比，只对运动矢量进行编码可以减少所占用的数据位。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-motion-compesation.png"
                        alt="运动补偿"
                 ></p>
<p>为了提高编码效率，宏块被分割成更小的子块，下图给出了 H.264、MPEG-4和MPEG-2运动补偿技术特性对比：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-motion-estimation.png"
                        alt="运动补偿"
                 ></p>
<p>同时，由于运动是个持续的过程，拍摄运动图像时可能会出现偏移和遮挡，拍摄角度会不停的来回切换，H.264引入了多参考帧的概念。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-multi-reference-frame.png"
                        alt="多参考帧"
                 ></p>
<h3 id="%E6%95%B4%E6%95%B0%E5%8F%98%E6%8D%A2" tabindex="-1">整数变换</h3>
<p>从帧间预测和帧内预测得到的结果需要从空域转换成频域，H.264/MPEG-4 AVC采用<strong>4×4 DCT-like</strong>整数变换。相对于MPEG-2和MPEG-4基于浮点系数的<strong>8×8 DCT</strong>变换，整数系数能够消除浮点系数固有的舍入误差，进而消除浮点系数引起的<code>drifting artifacts</code>。同时，H.264/MPEG-4 AVC较小的块大小也减少了阻塞和<code>ringing artifacts</code>。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-transform.png"
                        alt="整数变换"
                 ></p>
<p>H.264协议中的变化方式主要有三种：4×4残差变化（整数DCT变换）、16×16帧内模式下4×4亮度直流系数变化（离散哈达玛变化）、2×2色度直流系数变化（离散哈达玛变化）。</p>
<h3 id="%E9%87%8F%E5%8C%96" tabindex="-1">量化</h3>
<p>从<strong>整数变化</strong>阶段得到的系数需要被<a href="https://www.vcodex.com/h264avc-4x4-transform-and-quantization/"><strong>量化</strong></a>，用以减少整数系数的整体精度，并趋向于消除高频系数，保持感知质量。量化的原则是在不降低视觉效果的前提下尽量减少图像编码长度，减少视觉恢复中不必要的信息。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-quantization.png"
                        alt="量化"
                 ></p>
<p>一般的标量量化器原理如下：<br>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mi>Q</mi><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">
{Z}_{ij} = round({Y}_{ij}/{Q}_{step})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section><br>
其中，<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Y</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Y}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>表示一个宏块经过整数DCT转换后的系数，<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Z}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>是输出的量化系数，<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Q</mi><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Q}_{step}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>是量化步长。<strong>量化步长</strong>决定了量化器的编码压缩率以及图像精度。如果量化步长较大，则量化值<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Z}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>动态范围较小，其相应的编码长度较小，但反量化会损失较多的图像细节信息；如果量化步长较小，则量化值<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Z}_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>动态范围较大，其相应的编码长度较大，但图像损失较少。H.264编码器根据图像值实际动态范围自动改变量化步长值，在编码长度和图像精度之间折衷，达到整体最佳效果。</p>
<p>在H.264中，使用量化参数QP（Quantization Parameter）来标识量化步长的序号，亮度编码的量化步长<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Q</mi><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Q}_{step}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>共有52个值，QP为0-51；色度编码的量化步长<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Q</mi><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Q}_{step}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>共有39个值，QP为0-39。QP取最小值0 时，表示量化最精细；相反，QP取最大值51/39时，表示量化是最粗糙的。亮度编码的QP每增加6，量化步长<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Q</mi><mrow><mi>s</mi><mi>t</mi><mi>e</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{Q}_{step}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">Q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section>增加一倍。亮度编码的量化步长信息如下表：</p>
<table>
<thead step="">
<tr>
<th style="text-align:center">QP</th>
<th style="text-align:center" step=""><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 4: {Q}_̲" style="color:#cc0000">{Q}_</span></eqn></section></th>
<th style="text-align:center">QP</th>
<th style="text-align:center" step=""><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 4: {Q}_̲" style="color:#cc0000">{Q}_</span></eqn></section></th>
<th style="text-align:center">QP</th>
<th style="text-align:center" step=""><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 4: {Q}_̲" style="color:#cc0000">{Q}_</span></eqn></section></th>
<th style="text-align:center">QP</th>
<th style="text-align:center" step=""><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 4: {Q}_̲" style="color:#cc0000">{Q}_</span></eqn></section></th>
<th style="text-align:center">QP</th>
<th style="text-align:center"><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 4: {Q}_̲" style="color:#cc0000">{Q}_</span></eqn></section></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0.625</td>
<td style="text-align:center">13</td>
<td style="text-align:center">2.25</td>
<td style="text-align:center">22</td>
<td style="text-align:center">8</td>
<td style="text-align:center">33</td>
<td style="text-align:center">28</td>
<td style="text-align:center">44</td>
<td style="text-align:center">104</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0.6875</td>
<td style="text-align:center">12</td>
<td style="text-align:center">2.5</td>
<td style="text-align:center">23</td>
<td style="text-align:center">9</td>
<td style="text-align:center">34</td>
<td style="text-align:center">32</td>
<td style="text-align:center">45</td>
<td style="text-align:center">112</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">0.8125</td>
<td style="text-align:center">13</td>
<td style="text-align:center">2.75</td>
<td style="text-align:center">24</td>
<td style="text-align:center">10</td>
<td style="text-align:center">35</td>
<td style="text-align:center">36</td>
<td style="text-align:center">46</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">0.875</td>
<td style="text-align:center">14</td>
<td style="text-align:center">3.25</td>
<td style="text-align:center">25</td>
<td style="text-align:center">11</td>
<td style="text-align:center">36</td>
<td style="text-align:center">40</td>
<td style="text-align:center">47</td>
<td style="text-align:center">144</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">1</td>
<td style="text-align:center">15</td>
<td style="text-align:center">3.5</td>
<td style="text-align:center">26</td>
<td style="text-align:center">13</td>
<td style="text-align:center">37</td>
<td style="text-align:center">44</td>
<td style="text-align:center">48</td>
<td style="text-align:center">160</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1.125</td>
<td style="text-align:center">16</td>
<td style="text-align:center">4</td>
<td style="text-align:center">27</td>
<td style="text-align:center">14</td>
<td style="text-align:center">38</td>
<td style="text-align:center">52</td>
<td style="text-align:center">49</td>
<td style="text-align:center">176</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">1.25</td>
<td style="text-align:center">17</td>
<td style="text-align:center">4.5</td>
<td style="text-align:center">28</td>
<td style="text-align:center">16</td>
<td style="text-align:center">39</td>
<td style="text-align:center">56</td>
<td style="text-align:center">50</td>
<td style="text-align:center">208</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">1.375</td>
<td style="text-align:center">18</td>
<td style="text-align:center">5</td>
<td style="text-align:center">29</td>
<td style="text-align:center">18</td>
<td style="text-align:center">40</td>
<td style="text-align:center">64</td>
<td style="text-align:center">51</td>
<td style="text-align:center">224</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">1.625</td>
<td style="text-align:center">19</td>
<td style="text-align:center">5.5</td>
<td style="text-align:center">30</td>
<td style="text-align:center">20</td>
<td style="text-align:center">41</td>
<td style="text-align:center">72</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">1.75</td>
<td style="text-align:center">20</td>
<td style="text-align:center">6.5</td>
<td style="text-align:center">31</td>
<td style="text-align:center">22</td>
<td style="text-align:center">42</td>
<td style="text-align:center">80</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">2</td>
<td style="text-align:center">21</td>
<td style="text-align:center">7</td>
<td style="text-align:center">32</td>
<td style="text-align:center">26</td>
<td style="text-align:center">43</td>
<td style="text-align:center">88</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="%E5%BE%AA%E7%8E%AF%E6%BB%A4%E6%B3%A2" tabindex="-1">循环滤波</h3>
<p>H.264 / MPEG-4 AVC定义了一种<strong>去块滤波器</strong>（de-blocking filter ），其对16×16宏块和4×4块边界进行操作。 在宏块的情况下，滤波器旨在去除可能由具有不同估计类型（例如，运动与帧内估计）的相邻宏块和/或不同的量化尺度产生的<strong>伪像</strong>。 在块的情况下，滤波器旨在去除可能由变换/量化引起的伪像和相邻块之间的<strong>运动矢量差异</strong>。 循环滤波器通常使用内容自适应非线性滤波器来修改宏块/块边界的任一侧上的两个像素。</p>
<h3 id="%E7%86%B5%E7%BC%96%E7%A0%81" tabindex="-1">熵编码</h3>
<p>在进行熵编码之前，必须对4x4量化系数进行序列化。 根据这些系数是否是原始的运动估计或帧内估计，选择不同的扫描模式来创建串行化流。 扫描模式将系数从低频到高频排列。 然后，由于较高频率的量化系数趋向于零，所以使用游程长度编码来分组尾随零，导致更有效的熵编码。</p>
<p>熵编码将表示运动矢量、量化系数和宏块头的符号映射到实际位中，熵编码通过将较少数量的比特分配给频繁使用的符号和较大数量的比特到较不频繁使用的符号来提高编码效率。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-entropy-coding.png"
                        alt="熵编码"
                 ></p>
<p>下列表格描述了两种主要类型的熵编码：<strong>Variable Length Coding (VLC)<strong>和</strong>Context Adaptive Binary Arithmetic Coding (CABAC)</strong>。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-entropy-coding-comparison.png"
                        alt="熵编码比较"
                 ></p>
<h2 id="level-%E5%92%8C-profile" tabindex="-1">Level 和 Profile</h2>
<p>H.264 标准的一个重要方面是通过级别（Level）和档次（Profile）中提供的功能，以最佳的方式支持常见应用和通用格式。Profile 是对视频压缩特性的描述（CABAC 呀、颜色采样数等等），Level 是对视频本身特性的描述（码率、分辨率、帧率）。简单来说，Profile 越高，就说明采用了越高级的压缩特性。Level 越高，视频的码率、分辨率、帧率越高。</p>
<p>H.264 从低到高划分了很多 Profile 和 Level，在维基百科英文版中能够看到详细的表格，在本节末尾会贴出相关表格内容。</p>
<p>H.264 支持四个 Profile，分别为：</p>
<ul>
<li>BP（Baseline Profile）：提供I/P帧，仅支持Progressive和CAVLC，多应用于&quot;视频会话&quot;，如可视电话、会议电视、远程教学、视频监控等实时通信领域；</li>
<li>XP（Extended profile）提供I/P/B/SP/SI帧，仅支持Progressive和CAVLC，多应用于流媒体领域，如视频点播、基于网络的视频监控等；</li>
<li>MP（Main profile）提供I/P/B帧，支持Progressive和Interlaced，提供CAVLC和CABAC。多应用于数字电视广播、数字视频存储等领域；</li>
<li>HiP（High profile）在Main profile基础上新增8*8帧内预测，像素精度提高到10位或14位。多应用于对高分辨率和高清晰度有特别要求的领域。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-profile-classification.jpg"
                        alt="H.264 Profile"
                 ></p>
<p>至于Level和Profile的相关表格如下：</p>
<ul>
<li>H.264 Profile</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-profile.jpg"
                        alt="H.264 Profile"
                 ></p>
<ul>
<li>H.264 Level</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-level.jpg"
                        alt="H.264 Level"
                 ></p>
<h2 id="h.264%E6%9E%B6%E6%9E%84" tabindex="-1">H.264架构</h2>
<h3 id="%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84" tabindex="-1">分层架构</h3>
<p>制定H.264的主要目标有两个：</p>
<ul>
<li>得到高的视频压缩比；</li>
<li>具有良好的网络亲和性。</li>
</ul>
<p>为此，H.264的功能分为两层：视频编码层（VLC，Video Coding Layer）和网络抽象层（NAL，Network Abstraction Layer）。</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-layered-architecture.png"
                        
                 >
<h3 id="%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F" tabindex="-1">数据格式</h3>
<p>视频编码层进行视频数据压缩、解压缩操作，而网络抽象层专门为视频编码信息提供头文件信息，安排格式以方便网络传输和介质存储。VCL数据即编码处理的输出，它表示被压缩编码后的视频数据序列。在VCL数据传输或存储之前，这些编码的VCL数据，先被映射或封装进NAL单元中。每个NAL单元包含一个原始字节序列负载（RBSP，Raw Byte Sequence Payload）、一组对应于视频编码数据的NAL头信息。其具体结构如下图：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="../../assets/h264-nal.jpg"
                        alt=""
                 ></p>
<p>在H.264编码过程中，存在三种不同的数据形式：</p>
<ul>
<li>
<p>SODB， String of Data Bits，数据比特串，是最原始的编码数据，即VCL数据；VCL层是对核心算法引擎，块，宏块及片的语法级别的定义，他最终输出编码完的数据SODB</p>
</li>
<li>
<p>RBSP，Raw Byte Sequence Payload，原始字节序列载荷，在SODB的后面填加了结尾比特（RBSP trailing bits 一个bit&quot;1&quot;）若干比特&quot;0&quot;,以便字节对齐；</p>
</li>
<li>
<p>EBSP，Encapsulation Byte Sequence Packets，扩展字节序列载荷，在RBSP基础上填加了仿校验字节（0X03）。</p>
</li>
</ul>
<blockquote>
<p>加上仿校验字节的原因是：EBSP被封装为NALU时，需要为其添加开始前缀，如果该NALU对应的Slice为一帧的开始，则用’0x000000001’，否则使用’0x000001’。为了使NALU主体中不包括与开始码相冲突的，在编码时，每遇到两个字节连续为0，就插入一个字节的0x03。解码时将0x03去掉。也称为脱壳操作。</p>
</blockquote>
<h3 id="%E7%A0%81%E6%B5%81%E7%BB%93%E6%9E%84" tabindex="-1">码流结构</h3>
<p>在H.264中图像以序列为单位进行组织，一个序列是一段图像编码后的数据流，以IDR帧开始，到下一个IDR帧结束，中间包含若干<strong>访问单元</strong>（Access Unit）。从宏观上来说，SPS、PPS、IDR 帧（包含一个或多个I-Slice）、P 帧（包含一个或多个P-Slice ）、B 帧（包含一个或多个B-Slice ）共同构成典型的H.264码流结构。</p>
<h3 id="sps%2Fpps" tabindex="-1">SPS/PPS</h3>
<p>SPS，Sequence Parameter Sets，序列参数集，是H.264码流序列的第一个NALU，PPS，Picture Parameter Set，图像参数集，是H.264码流序列的第二个NALU。</p>
<p>SPS和PPS中包含了初始化H.264解码器所需要的信息参数，包括编码所用的profile、level、图像的宽和高、deblock滤波器等。SPS语法单元存放一个视频序列共同特征，而PPS语法单元各个图像的典型特征。SPS和PPS都各自对应于一个NALU。</p>
<p>只有视频序列之间才能切换SPS，即只有IDR帧的第一个slice才可以切换SPS；只有图像之间才能切换PPS，即只有每帧图像的第一个slice才能切换PPS。</p>
<h3 id="idr%2Fp%2Fb" tabindex="-1">IDR/P/B</h3>
<p>IDR，Instantaneous Decoder Refresh，即时解码器刷新，是H.264码流序列的第三个NALU。</p>
<p>IDR帧都是I帧，但是I帧并不一定是IDR帧。H.264 引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR 图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列。这样，如果前一个序列出现重大错误，在这里可以获得重新同步的机会。IDR图像之后的图像永远不会使用IDR之前的图像的数据来解码。</p>
<p>在IDR帧之后可能存在I帧、P帧和B帧，这个具体看使用的是哪种Profile。</p>
<h2 id="h.264%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84" tabindex="-1">H.264语法结构</h2>
<p>NALU，Network Abstract Layer Unit，是H.264的最高抽象层，H.264的所有语法结构最终都被封装成NALU，同时会加入一些网络相关信息。码流中的NALU单元必须定义合适的分隔符，否则无法区分。H.264 视频压缩标准的附录B采用前缀码<code>“00 00 01”/“00 00 00 01”</code>作为NALU的分隔符，可以通过搜索前缀码<code>“00 00 01”/“00 00 00 01”</code>来识别一个NALU。</p>
<p>H.264视频流是以NAL单元传送的，但在一个NAL单元里面，可能既存放I-Slice（P-Slice或B-Slice），也可能存放图像的其他信息，比如SPS、PPS。根据H.264语法结构，根据的NAL类型可以分为：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">NAL_SLICE     = 1   SLICE非IDR不分割</span><br><span class="line">NAL_SLICE_DPA = 2   SLICE数据分割块A</span><br><span class="line">NAL_SLICE_DPB = 3   SLICE数据分割快B</span><br><span class="line">NAL_SLICE_DPC = 4   SLICE数据分割块C</span><br><span class="line">NAL_SLICE_IDR = 5   SLICE关键帧</span><br><span class="line">NAL_SEI       = 6   补充增强信息单元帧</span><br><span class="line">NAL_SPS       = 7   序列参数集</span><br><span class="line">NAL_PPS       = 8   图像参数集</span><br><span class="line">NAL_AUD       = 9   分界符</span><br><span class="line">NAL_EOSEQ     = 10  序列结束</span><br><span class="line">NAL_EOSTREAM  = 11  码流结束</span><br><span class="line">NAL_FILLER    = 12  填充</span><br><span class="line">              = 13</span><br><span class="line">              = ...</span><br><span class="line">              = 23  13~23保留</span><br><span class="line">              = 24</span><br><span class="line">              = ...</span><br><span class="line">              = 31  24~32不保留，RTP打包时会用到</span><br></pre></td></tr></table></figure>
<p>将数据块分割为A、B、C，主要目的是为了对重要程度不同的数据进行不同程度的保护。其中24~32类型是不保留的，其在RTP打包时会用到：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型取值</th>
<th style="text-align:center">对应类型</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">STAP-A</td>
<td style="text-align:center">Single-time aggregation packet</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">STAP-B</td>
<td style="text-align:center">Single-time aggregation packet</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">MTAP16</td>
<td style="text-align:center">Multi-time aggregation packet</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">MTAP24</td>
<td style="text-align:center">Multi-time aggregation packet</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">FU-A</td>
<td style="text-align:center">Fragmentation unit</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td style="text-align:center">FU-B</td>
<td style="text-align:center">Fragmentation unit</td>
</tr>
<tr>
<td style="text-align:center">30-31</td>
<td style="text-align:center">undefined</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="fu_a" tabindex="-1">FU_A</h3>
<p>对于比较大的NALU单元，是无法一次通过RTP发送的（RTP的MTU为1500），所以必须要拆包，将较大的NALU拆分为FU-A包。这里面有拆包和解包两个概念：</p>
<ul>
<li>拆包：当编码器在编码时需要将原有一个NAL按照FU-A进行分片，原有的NAL的单元头与分片后的FU-A的单元头有如下关系：</li>
</ul>
<blockquote>
<p>原始的NAL头的前三位为FU indicator的前三位，原始的NAL头的后五位为FU header的后五位，FU indicator与FU header的剩余位数根据实际情况决定。</p>
</blockquote>
<ul>
<li>解包：当接收端收到FU-A的分片数据，需要将所有的分片包组合还原成原始的NAl包时，FU-A的单元头与还原后的NAL的关系如下：</li>
</ul>
<blockquote>
<p>还原后的NAL头的八位是由FU indicator的前三位加FU header的后五位组成，即：nal_unit_type = (fu_indicator &amp; 0xe0) | (fu_header &amp; 0x1f)</p>
</blockquote>
<h2 id="%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0" tabindex="-1">开源实现</h2>
<p>H.264 的开源实现包括：OpenH264 和 x264。OpenH264 是思科实现的开源 H.264 编码，OpenH264 是思科实现的开源 H.264 编码。两者的对比如下：</p>
<ul>
<li>OpenH264 CPU 的占用相对 x264 低很多；</li>
<li>OpenH264 只支持 baseline profile，x264 支持更多 profile；</li>
<li>x264 需要专利费用，而 OpenH264 不需要专利费用；</li>
<li>x264 的主要功能在于进行 H.264 的视频编码，而不是作为解码器之用。</li>
</ul>
<h2 id="%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86" tabindex="-1">其他标准</h2>
<p>目前能与H.264相提并论的编码算法包括：</p>
<ul>
<li>HEVC/H.265：开源实现包括 libde265 和 x265，需专利费；</li>
<li>VP8：开源实现为 libvpx，无专利费；</li>
<li>VP9：开源实现为 ibvpx，无专利费。</li>
</ul>
<p>几种编码方案中，HEVC 对 VP9 和 H.264 在码率上有较大优势，在相同 PSNR 下分别节省了 48.3% 和 75.8%。H.264 在编码时间上有巨大优势，对比 VP9 和 HEVC(H.265) ，HEVC 是 VP9 的 6 倍，VP9 是 H.264 的将近 40 倍。</p>
<p>在H.264之前，还有一些前辈算法，包括：</p>
<ul>
<li>H.261、H.263</li>
<li>MPEG-1、MPEG-2、MPEG-4</li>
<li>JPEG、JPEG2000</li>
<li>AVS</li>
</ul>
<h2 id="%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3" tabindex="-1">参考文档</h2>
<ul>
<li><a class="link"   href="http://web.cs.ucla.edu/classes/fall03/cs218/paper/H.264_MPEG4_Tutorial.pdf" > H.264/MPEG-4 AVC Video Compression Tutorial<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://lib.mdp.ac.id/ebook/Karya%20Umum/Video-Compression-Video-Coding-for-Next-generation-Multimedia.pdf" >Video Compression Video Coding for Next Generation Multimedia<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.cc.ntut.edu.tw/~shyang/Journal%20Papers/H264_AVC.pdf" >H.264/AVC 技術與應用簡介<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://iphome.hhi.de/wiegand/assets/pdfs/h264-AVC-Standard.pdf" >The H.264/MPEG4 Advanced Video Coding Standard and its Applications<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://tcs.rwth-aachen.de/lehre/Komprimierung/SS2012/ausarbeitungen/H264-MPEG4.pdf" >H.264/MPEG-4 Advanced Video Coding<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.springer.com/cda/content/document/cda_downloaddocument/9781461422297-c1.pdf" >Understanding the Application: An Overview of the H.264 Standard<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ittiam.com/wp-content/knowledge-center/publications/2005/H.264_Advanced_video_compression_standard.pdf" >H.264 Advanced Video Compression Standard<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.142.1068&amp;rep=rep1&amp;type=pdf" >Video coding with H.264/AVC: Tools, Performance, and Complexity<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://engineering.purdue.edu/~ace/thesis/igarta/thesis-igarta.pdf" >A STUDY OF MPEG-2 AND H.264 VIDEO CODING<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://lib.mdp.ac.id/ebook/Karya%20Umum/Video-Compression-Video-Coding-for-Next-generation-Multimedia.pdf" >H.264 and MPEG-4 Video Compression Video Coding for Next-generation Multimedia<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://files.cnblogs.com/files/irish/The_H.264_advanced_video_compression_standard.pdf" >The H.264 Advanced Video Compression Standard, Second Edition<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.itu.int/rec/T-REC-H.264" >H.264 : Advanced video coding for generic audiovisual services<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Codec</tag>
        <tag>Video</tag>
      </tags>
  </entry>
  <entry>
    <title>C++并发编程2——为共享数据加锁</title>
    <url>/develop/cpp-thread-data-sharing/</url>
    <content><![CDATA[<blockquote>
<p>找到问题的解决办法，而不是找蹩脚的接口。</p>
</blockquote>
<p>在应届生面试的时候，很多面试官都会问——“多线程如何共享资源”。在操作系统层面上可以给出若干关键词答案，但是在语言层面，这个问题考虑的就没有那么简单了。<span id="more"></span>同时，很多人会将多线程数据共享和线程同步混淆。有关线程同步，我们会在接下来的章节里着重阐述。本文主要聚焦于保护共享数据，首先从加锁入手，进而扩展到加锁无法解决的问题，最后会给出一些其他保护方案。</p>
<h2 id="%E5%8F%82%E6%95%B0%E5%85%A5%E6%A0%88" tabindex="-1">参数入栈</h2>
<p>一个存放参数的栈数据结构，相同函数的参数必须要在栈中相连，我们来实现这个功能，看下面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexTest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexTest</span>(): <span class="built_in">m_charStack</span>() &#123; &#125;</span><br><span class="line">    ~<span class="built_in">MutexTest</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            m_charStack.<span class="built_in">push</span>(c);</span><br><span class="line">            std::cout &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; m_charStack;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MutexTest test;</span><br><span class="line"><span class="function">std::thread <span class="title">mutexTestThread1</span><span class="params">(&amp;MutexTest::Push, &amp;test, <span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">mutexTestThread2</span><span class="params">(&amp;MutexTest::Push, &amp;test, <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">mutexTestThread<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">mutexTestThread<span class="number">2.</span><span class="built_in">join</span>();</span><br></pre></td></tr></table></figure>
<p>上面这段代码的执行结果是不确定的，这是因为**我们无法预测线程的执行顺序，多个线程共享同一个数据栈存在竞态条件（Race Condition）。**所以我们可能得到下面的执行结果，所有的参数都是交叉在一起的，这不是我们想要的结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aabbbbbbbaaaaaaaabbb</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>竞态条件</code>是多线程编程的噩梦，为什么会出现竞态条件可以自行百度，我们主要是为了解决这个问题。让最终执行的结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">bbbbbbbbbb</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%82%E6%95%B0%E5%85%A5%E6%A0%88%E4%BF%9D%E6%8A%A4" tabindex="-1">参数入栈保护</h2>
<p><code>std::mutex</code>是C<ins>11提供的数据加锁类，C</ins>中通过实例化 std::mutex 创建互斥量，通过调用成员函数lock()进行上锁，unlock()进行解锁。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MutexTest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexTest</span>(): <span class="built_in">m_mutex</span>(), <span class="built_in">m_charStack</span>() &#123; &#125;</span><br><span class="line">    ~<span class="built_in">MutexTest</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">m_mutex</span>().<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            m_charStack.<span class="built_in">push</span>(c);</span><br><span class="line">            std::cout &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">m_mutex</span>().<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::mutex       m_mutex;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; m_charStack;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这段代码和上面的不同点就是使用std::mutex，在访问m_charStack之前上锁，其他线程就必须要等待解锁后才能访问m_charStack。如果我们忘记解锁，那么m_charStack就再也无法被访问了，所以有必要用RAII类<code>std::lock_guard</code>进行封装——构造时上锁，析构时解锁。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexTest::Push</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lg</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        m_charStack.<span class="built_in">push</span>(c);</span><br><span class="line">        std::cout &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C++还提供了<code>std::unique_lock</code>锁，相对于<code>std::lock_guard</code>，该锁提供了更好地上锁和解锁灵活性控制。<code>std::unique_lock</code>以独占所有权的方式来管理mutex对象的上锁和解锁操作。我们来看看其用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;   </span><br><span class="line">#include &lt;thread&gt;   </span><br><span class="line">#include &lt;mutex&gt;      </span><br><span class="line"></span><br><span class="line">std::mutex foo,bar;</span><br><span class="line"></span><br><span class="line">void task_a () &#123;</span><br><span class="line">  /* simultaneous lock (prevents deadlock) */</span><br><span class="line">  std::lock (foo,bar);         </span><br><span class="line">  std::unique_lock&lt;std::mutex&gt; lck1 (foo,std::adopt_lock);</span><br><span class="line">  std::unique_lock&lt;std::mutex&gt; lck2 (bar,std::adopt_lock);</span><br><span class="line">  std::cout &lt;&lt; &quot;task a\n&quot;;</span><br><span class="line">  /* (unlocked automatically on destruction of lck1 and lck2) */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void task_b () &#123;</span><br><span class="line">  /* foo.lock(); bar.lock(); // replaced by: */</span><br><span class="line">  std::unique_lock&lt;std::mutex&gt; lck1, lck2;</span><br><span class="line">  lck1 = std::unique_lock&lt;std::mutex&gt;(bar,std::defer_lock);</span><br><span class="line">  lck2 = std::unique_lock&lt;std::mutex&gt;(foo,std::defer_lock);</span><br><span class="line">  /* simultaneous lock (prevents deadlock) */</span><br><span class="line">  std::lock (lck1,lck2);       </span><br><span class="line">  std::cout &lt;&lt; &quot;task b\n&quot;;</span><br><span class="line">  /* (unlocked automatically on destruction of lck1 and lck2) */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">  std::thread th1 (task_a);</span><br><span class="line">  std::thread th2 (task_b);</span><br><span class="line"></span><br><span class="line">  th1.join();</span><br><span class="line">  th2.join();</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们终于得到了我们想要的结果，可惜在很多时候加锁并不是解决数据共享的万能药。std::mutex并不能完全解决保护数据的问题。存在好几种情况，即使我们已经使用了互斥量，数据还是被破坏了。</p>
<ul>
<li>将被保护数据暴露到互斥量作用域之外</li>
<li>被保护数据的访问接口本身就存在竞态条件（条件竞争）</li>
</ul>
<h2 id="%E4%B8%8D%E8%A6%81%E6%9A%B4%E9%9C%B2%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE" tabindex="-1">不要暴露你的数据</h2>
<p>来看下面例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct protected_data</span><br><span class="line">&#123;</span><br><span class="line">    char data[100];</span><br><span class="line">&#125;</span><br><span class="line">class MutexTest</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    template&lt;typename Function&gt;</span><br><span class="line">    void process(Function func)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; guard&lt;m_dataMutex&gt;;        </span><br><span class="line">        func(m_data);</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    std::mutex            m_dataMutex;</span><br><span class="line">    struct protected_data m_data;</span><br><span class="line">&#125;</span><br><span class="line">struct protected_data *pData;</span><br><span class="line">void inject(Data &amp;data)</span><br><span class="line">&#123;</span><br><span class="line">    pData = &amp;data;</span><br><span class="line">&#125;</span><br><span class="line">/* 即使process没有显式传出，但是还是被inject传出 */</span><br><span class="line">/* process执行完后，pData能在无锁的情况下访问数据 */</span><br><span class="line">void Test()</span><br><span class="line">&#123;</span><br><span class="line">    process(inject);</span><br><span class="line">    for(int i = 0; i &lt; 100; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pData.data[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">std::thread mutexTestThread1(Test);</span><br><span class="line">std::thread mutexTestThread2(Test);</span><br></pre></td></tr></table></figure>
<p>我想不到比较好的例子来说明这个问题，上面的例子是基于C++并发编程上面改编的例子，其也能说明问题：<strong>在上锁后执行了用户定义的函数，将被保护数据传递到互斥锁作用域之外</strong>。</p>
<p>这个场景，<code>mutexTestThread1</code>解锁，<code>mutexTestThread2</code>上锁后，<code>mutexTestThread2</code>仍然无法独占被保护数据。pData总是获取到了被保护的数据，并在<code>mutexTestThread2</code>访问数据时修改该数据。</p>
<p>这种代码看起来很正常，也很不容易被发现，但是背后的错误逻辑是致命的，数据常常被莫名修改，奔溃也有可能随之而来。</p>
<blockquote>
<p><strong>切勿将受保护数据的指针或引用传递到互斥锁作用域之外，无论是函数返回值，还是存储在外部可见内存，亦或是以参数的形式传递到用户提供的函数中去。</strong></p>
</blockquote>
<h2 id="%E8%B0%A8%E6%85%8E%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3" tabindex="-1">谨慎的设计你的数据接口</h2>
<p>来看下面例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::deque&lt;int&gt; intDeque(1, 10);</span><br><span class="line">std::stack&lt;int&gt; intStack(intDeque);</span><br><span class="line">void Process()</span><br><span class="line">&#123;</span><br><span class="line">    if(!intStack.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        const int value = intStack.top();</span><br><span class="line">        intStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">std::thread t1(Process);</span><br><span class="line">std::thread t2(Process);</span><br></pre></td></tr></table></figure>
<p>即使top()操作和pop()操作都已经上锁，也无法解决条件竞争的问题。</p>
<p>假设栈的实现中对数据的访问已加锁，在单线程情况下，上面程序可以无误执行，但是在多线程情况下，就有可能出现异常。**调用空stack的top()是未定义行为。**在多线程情况下，intStack.empty()操作获取的结果是不可靠的。</p>
<p>上述例子中intStack栈只有一个元素，如果线程t1和t2的执行顺序如下，就会出现未定义行为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// example 1</span><br><span class="line">t1: intStack.empty() /* one element in intStack */</span><br><span class="line">t1: intStack.top()   /* one element in intStack */</span><br><span class="line">t2: intStack.empty() /* one element in intStack */</span><br><span class="line">t1: intStack.pop()   /* no element in intStack  */</span><br><span class="line">t2: intStack.top()   /* undefined behavior, intStack is empty() */</span><br></pre></td></tr></table></figure>
<p>即使不出现未定义行为，也有可能出现非预期行为——处理同一份数据多次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* example 2 */</span><br><span class="line">t1: intStack.empty() /* one element in intStack */</span><br><span class="line">t2: intStack.empty() /* one element in intStack */</span><br><span class="line">t1: intStack.top()   /* handle this data */</span><br><span class="line">t2: intStack.top()   /* handle this data again */</span><br></pre></td></tr></table></figure>
<p>要解决上述问题，就需要接口设计上有较大的改动，最好的操作是重新设计接口</p>
<ul>
<li>1、重新设计接口实现：top()接口内提供异常机制，当栈大小为零时，抛出异常</li>
<li>2、重新设计接口功能：将pop()和top()操作合并</li>
</ul>
<p>第1种方案并不能解决example 2，所以推荐重新设计接口功能。一个线程安全的栈类定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Stack</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    std::stack&lt;T&gt;      m_data;</span><br><span class="line">    mutable std::mutex m_mutex;</span><br><span class="line">public:</span><br><span class="line">    Stack(): m_data(std::stack&lt;int&gt;())&#123;&#125;</span><br><span class="line">    Stack(const Stack&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(other.m);</span><br><span class="line">        data = other.data;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&amp; operator=(const Stack&amp;) = delete;</span><br><span class="line">    void push(T new_value)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m);</span><br><span class="line">        data.push(new_value);</span><br><span class="line">    &#125;</span><br><span class="line">    std::shared_ptr&lt;T&gt; pop()</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m);</span><br><span class="line">        if(data.empty()) nullptr;</span><br><span class="line">        const std::shared_ptr&lt;T&gt; res(std::make_shared&lt;T&gt;(data.top()));</span><br><span class="line">        data.pop();</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void pop(T&amp; value)</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m);</span><br><span class="line">        if(data.empty()) return nullptr;</span><br><span class="line">        value=data.top();</span><br><span class="line">        data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    bool empty() const</span><br><span class="line">    &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m);</span><br><span class="line">        return data.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>栈操作为什么需要先top()后pop()，而不直接pop()时返回数据？这是为了防止pop()时的拷贝操作失败，导致数据丢失。</p>
</blockquote>
<p>如果不重新设计接口，在使用的时候加锁也能解决这个问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::mutex stackMutex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::lock_gurad&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(statckMutex)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!intStack.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> value = intStack.<span class="built_in">top</span>();</span><br><span class="line">        intStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述两种可能导致加锁失效的竞态条件场景，需要我们在组织代码或设计接口时精雕细琢，在很多场景下，提供线程安全的代码是很有必要的。</p>
<h2 id="%E6%AD%BB%E9%94%81" tabindex="-1">死锁</h2>
<p>使用多线程，我们会遇到死锁问题，即使没有加锁，也是有可能出现死锁，必须要按照一定的规范来涉及代码，才能有效的避免死锁问题。</p>
<p>死锁的概念略去不说，死锁有可能发生在使用多个互斥量的场景下，也可能存在没有使用互斥量的场景：</p>
<ul>
<li>两个线程都在等待对方释放互斥量</li>
<li>两个线程都调用了对方的join()函数</li>
</ul>
<p>为了解决<strong>两个线程都在等待对方释放互斥量</strong>导致的死锁问题，C++11提供了若干机制：</p>
<ul>
<li>std::lock()函数</li>
<li>std::unique_lock类</li>
</ul>
<h2 id="%E9%94%81%E4%BD%8F%E6%89%80%E6%9C%89%E4%BA%92%E6%96%A5%E9%87%8F" tabindex="-1">锁住所有互斥量</h2>
<p>只要将互斥量作为参数传递给std::lock()，std::lock()就能够锁住多个互斥量。std::lock()并未指定解锁和上锁的顺序，其能够保证：</p>
<ul>
<li>std::lock()执行成功时，所有互斥量都已经被上锁，并且没有死锁问题</li>
<li>std::lock()执行失败时，已被其上锁的互斥量都会被解锁</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>       <span class="comment">/* std::cout */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>         <span class="comment">/* std::thread */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span>          <span class="comment">/* std::mutex, std::lock */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">some_big_object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">some_big_object</span>(<span class="type">int</span> a) :<span class="built_in">x</span>(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123; std::cout &lt;&lt; x &lt;&lt; std::endl; &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  some_big_object&amp; some_detail;</span><br><span class="line">  std::mutex m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">X</span>(some_big_object &amp; sd):<span class="built_in">some_detail</span>(sd)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;lhs==&amp;rhs)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    std::<span class="built_in">lock</span>(lhs.m,rhs.m);</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock_a</span><span class="params">(lhs.m,std::adopt_lock)</span></span>;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock_b</span><span class="params">(rhs.m,std::adopt_lock)</span></span>;</span><br><span class="line">    std::<span class="built_in">swap</span>(lhs.some_detail,rhs.some_detail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; lhs,T&amp; rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">swap</span>&lt;some_big_object&gt;(some_big_object &amp;x, some_big_object &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">X <span class="title">a</span><span class="params">(x)</span>, <span class="title">b</span><span class="params">(y)</span></span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">some_big_object <span class="title">a</span><span class="params">(<span class="number">1</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">Print</span>(), b.<span class="built_in">Print</span>();</span><br><span class="line">    <span class="built_in">swap</span>(a,b);</span><br><span class="line">    a.<span class="built_in">Print</span>(), b.<span class="built_in">Print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面一段代码使用了模板的偏特化特性，这里不需要深究，只需要知道swap(a, b)最终会调用X类的swap友元函数。在该友元函数中，std::lock()函数锁住两个互斥量，std::lock_guard负责unlock两个互斥量，如果不调用std::lock_guard()，需要手动unlock()。<code>std::adopt_lock</code>参数表示互斥量已经上锁，这里仅仅是不会重复上锁。下面两个例子起到相同作用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* example 1 */</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::<span class="built_in">lock</span>(mtx); <span class="comment">// have to lock before the next sentence</span></span><br><span class="line"><span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(mtx, std::adopt_lock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* example 2 */</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::<span class="built_in">lock</span>(mtx);</span><br><span class="line">mtx.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure>
<h2 id="%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E7%9A%84%E4%B8%80%E7%82%B9%E5%BB%BA%E8%AE%AE" tabindex="-1">避免死锁的一点建议</h2>
<p>C++并发编程中给出了几点避免死锁的进阶指导：</p>
<ul>
<li>1、避免嵌套锁</li>
<li>2、避免在持有锁时调用用户提供的代码</li>
<li>3、使用固定顺序获取锁</li>
<li>4、使用锁的层次结构</li>
</ul>
<p>前三个建议看字面意思就可以了，我们这里主要阐述锁的层次结构。层次锁需要遵守如下原则：</p>
<blockquote>
<p>当代码试图对一个互斥量上锁，在该层锁已被低层持有时，上锁是不允许的。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">hierarchical_mutex <span class="title">high_level_mutex</span><span class="params">(<span class="number">10000</span>)</span></span>;</span><br><span class="line"><span class="function">hierarchical_mutex <span class="title">low_level_mutex</span><span class="params">(<span class="number">7000</span>)</span></span>;</span><br><span class="line"><span class="function">hierarchical_mutex <span class="title">low_level_mutex</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">do_low_level_stuff</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low_level_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(low_level_mutex)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">do_low_level_stuff</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">high_level_stuff</span><span class="params">(<span class="type">int</span> some_param)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">high_level_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(high_level_mutex)</span></span>;</span><br><span class="line">  <span class="built_in">high_level_stuff</span>(<span class="built_in">low_level_func</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">middle_level_stuff</span><span class="params">(<span class="type">int</span> some_param)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">middle_level_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(middle_level_mutex)</span></span>;</span><br><span class="line">  <span class="built_in">middle_level_stuff</span>(<span class="built_in">high_level_stuff</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">high_level_func</span>();</span><br><span class="line">    <span class="built_in">middle_level_func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照层次锁的原则，high_level_func()能够正确执行，而middle_level_func()不能正确执行：</p>
<ul>
<li>high_level_func()先获取到高层级的锁，然后获取到低层级的锁，符合原则</li>
<li>middle_level_func()先获取低层级的锁，然后获取到高层级的锁，不符合原则</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">hierarchical_mutex</span></span><br><span class="line">&#123;</span><br><span class="line">  std::mutex internal_mutex;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">const</span> hierarchy_value;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> previous_hierarchy_value;</span><br><span class="line">  <span class="type">static</span> <span class="keyword">thread_local</span> <span class="type">unsigned</span> <span class="type">long</span> this_thread_hierarchy_value;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">check_for_hierarchy_violation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(this_thread_hierarchy_value &lt;= hierarchy_value)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(“mutex hierarchy violated”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">update_hierarchy_value</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    previous_hierarchy_value=this_thread_hierarchy_value;</span><br><span class="line">    this_thread_hierarchy_value=hierarchy_value;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">hierarchical_mutex</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> value)</span>:</span></span><br><span class="line"><span class="function">      hierarchy_value(value),</span></span><br><span class="line"><span class="function">      previous_hierarchy_value(<span class="number">0</span>)</span></span><br><span class="line"><span class="function">  &#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">check_for_hierarchy_violation</span>();</span><br><span class="line">    internal_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="built_in">update_hierarchy_value</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    this_thread_hierarchy_value=previous_hierarchy_value;</span><br><span class="line">    internal_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">try_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">check_for_hierarchy_violation</span>();</span><br><span class="line">    <span class="keyword">if</span>(!internal_mutex.<span class="built_in">try_lock</span>())</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">update_hierarchy_value</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">thread_local</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">hierarchical_mutex::this_thread_hierarchy_value</span><span class="params">(ULONG_MAX)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="%E4%BF%9D%E6%8A%A4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B" tabindex="-1">保护共享数据的初始化过程</h2>
<p>为了防止共享数据初始化时数据被破坏，C++提供了std::once_flag和std::call_once来保证共享数据初始化的正确性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* using mutex */</span><br><span class="line">std::shared_ptr&lt;some_resource&gt; resource_ptr;</span><br><span class="line">std::mutex resource_mutex;</span><br><span class="line">void foo()</span><br><span class="line">&#123;</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lk(resource_mutex);</span><br><span class="line">    if(!resource_ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        resource_ptr.reset(new some_resource);</span><br><span class="line">    &#125;</span><br><span class="line">    lk.unlock();</span><br><span class="line">    resource_ptr-&gt;do_something();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* using call_once */</span><br><span class="line">std::shared_ptr&lt;some_resource&gt; resource_ptr;</span><br><span class="line">std::once_flag resource_flag;</span><br><span class="line"></span><br><span class="line">void int_resource()</span><br><span class="line">&#123;</span><br><span class="line">    resource_ptr.reset(new some_resource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void foo()</span><br><span class="line">&#123;</span><br><span class="line">    std::call_once(resource_flag, init_resource);</span><br><span class="line">    resource_ptr-&gt;do_something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E4%BF%9D%E6%8A%A4%E5%BE%88%E5%B0%91%E6%9B%B4%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F" tabindex="-1">保护很少更新的数据量</h2>
<p>对于这种共享数据可以采用“读者-写着锁”，其允许两种不同的使用方式：一个作者线程独占访问和共享访问，让多个读者线程并发访问。</p>
<p>C++标准并没有提供相关的解决方案，我们可以使用boost::shared_mutex来做同步。对于更新操作，可以使<br>
用<code>std::lock_guard&lt;boost::shared_mutex&gt;</code>和<code>std::unique_lock&lt;boost::shared_mutex&gt;</code>进行上锁；对于访问操作，可以使用<code>boost::shared_lock&lt;boost::shared_mutex&gt;</code>获取共享访问权。我们来看下面例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">#include &lt;boost/thread/shared_mutex.hpp&gt;</span><br><span class="line">class dns_entry;</span><br><span class="line">class dns_cache</span><br><span class="line">&#123;</span><br><span class="line">  std::map&lt;std::string,dns_entry&gt; entries;</span><br><span class="line">  mutable boost::shared_mutex entry_mutex;</span><br><span class="line">public:</span><br><span class="line">  dns_entry find_entry(std::string const&amp; domain) const</span><br><span class="line">  &#123;</span><br><span class="line">    boost::shared_lock&lt;boost::shared_mutex&gt; lk(entry_mutex);</span><br><span class="line">    std::map&lt;std::string,dns_entry&gt;::const_iterator const it=</span><br><span class="line">       entries.find(domain);</span><br><span class="line">    return (it==entries.end())?dns_entry():it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line">  void update_or_add_entry(std::string const&amp; domain,</span><br><span class="line">                           dns_entry const&amp; dns_details)</span><br><span class="line">  &#123;</span><br><span class="line">    std::lock_guard&lt;boost::shared_mutex&gt; lk(entry_mutex);</span><br><span class="line">    entries[domain]=dns_details;</span><br><span class="line">&#125; &#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码，find_entry()使用了<code>boost::shared_lock&lt;&gt;</code>实例来保护器共享和只读权限；update_or_add_entry()使用<code>std::lock_guard&lt;&gt;</code>实例来独占访问权限。</p>
<h2 id="%E5%B5%8C%E5%A5%97%E9%94%81" tabindex="-1">嵌套锁</h2>
<p>对于一个已经上锁的互斥量多次上锁，会出现未定义行为。然而对于嵌套锁<code>std::recursive_mutex</code>来说，多次上锁不会出现问题。</p>
<p>在互斥量锁住其他线程前,你必须释放你拥有的所有 锁,所以当你调用lock()三次时,你也必须调用unlock()三次。正确使<br>
用 std::lock_guard<a class="link"   href="std::recursive_mutex" >std::recursive_mutex<i class="fas fa-external-link-alt"></i></a> 和 std::unique_lock<a class="link"   href="std::recursice_mutex" >std::recursice_mutex<i class="fas fa-external-link-alt"></i></a> 可以帮我们处理这些问题。</p>
<p>大多数情况下，嵌套锁是用在可被多线程并发访问的类上，所以其拥有一个互斥量保护其成员数据。每个公共成员函数 都会对互斥量上锁,然后完成对应的功能,之后再解锁互斥量。不过,有时一个公共成员函 数会调用另一个公共函数作为其操作的一部分。</p>
<p>不过上面提高的方案是不推荐的，推荐的做法是——从中提取出一个函数作为类的私有成员, 并且让所有成员函数都对其进行调用,这个私有成员函数不会对互斥量进行上锁(在调用前必 须获得锁)。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC帧率调整策略</title>
    <url>/develop/webrtc-frame/</url>
    <content><![CDATA[<p>与实时视频相关参数包含：帧率、码率、时延、抖动等。帧率体现了视频的流畅性，要想达到较好的流畅性体验要求——网络视频帧率不低于24帧，视频会议帧率不低于15帧。在实际开发中，我们遇到了不少问题<span id="more"></span>，主要包括：</p>
<ul>
<li>发送端帧率较低</li>
<li>接收端帧率较低</li>
<li>帧率波动较大</li>
</ul>
<p>本文主要研究WebRTC中的帧率调整策略，解决上述实际开发中帧率较低的问题，以期达到较好的流畅性体验。</p>
<h2 id="%E5%B8%A7%E7%8E%87%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95" tabindex="-1">帧率计算方法</h2>
<p>帧率并非恒定值，帧率大小反映的是每秒多少视频帧的统计值。在视频会议中，同一路视频流发送端的帧率和接收端的帧率并不相同。对于发送端帧率，我们需要明确：<strong>发送端输出帧率不等于摄像头采集帧率，编码器实际输入帧率不等于摄像头采集帧率，发送端帧率为编码器输出帧率</strong>。</p>
<h3 id="%E5%8F%91%E9%80%81%E7%AB%AF%E5%B8%A7%E7%8E%87" tabindex="-1">发送端帧率</h3>
<p>摄像头采集帧率决定了发送端输入帧率的最大值。当采集的视频数据传送到编码器时，受制于编码器性能和系统硬件性能，编码器的实际输入帧率并不等于摄像头的采集帧率。摄像头采集帧率和编码器输入帧率共同决定了发送端的帧率。在WebRTC中的统计信息展现的是摄像头的采集帧率（作为输入帧率）和编码器的输出帧率（作为输出帧率）。</p>
<p><strong>1、发送端输入帧率计算</strong></p>
<p>WebRTC在*“webrtc/video/vie_encoder.cc”*文件<strong>EncodeTask</strong>类中统计了摄像头的采集帧率——发送端输入帧率：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Run</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  vie_encoder_-&gt;stats_proxy_-&gt;<span class="built_in">OnIncomingFrame</span>(frame_.<span class="built_in">width</span>(),frame_.<span class="built_in">height</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、编码器输入帧率计算</strong></p>
<p>为了计算编码器的实际输入帧率，WebRTC维持了一个大小为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">kFrameCountHistorySize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span></span></span></span></eq>的数组<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">T_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>，该数组用于保存最新的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">kFrameCountHistorySize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span></span></span></span></eq>个帧放入数组的时间戳信息。帧率计算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">fps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq>公式如下：<br>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi>p</mi><mi>s</mi><mo>=</mo><mfrac><mrow><msub><mi>N</mi><mi>f</mi></msub><mo>×</mo><mn>1000.0</mn><mi>f</mi></mrow><mrow><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>−</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><msub><mi>N</mi><mi>f</mi></msub><mo stretchy="false">]</mo></mrow></mfrac><mspace width="2em"/><mrow><msub><mi>N</mi><mi>f</mi></msub><mo>:</mo><mtext> </mtext><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><msub><mi>N</mi><mi>f</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>M</mi><mi>s</mi></mrow></mrow><annotation encoding="application/x-tex">
fps=\frac{N_f\times 1000.0f}{T_f[0]-T_f[N_f]}  \qquad {N_f:\ max(T_{now}-T_f[N_f])&lt;kFrameHistoryWinMs}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3435em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1000.0</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal" style="margin-right:0.08125em;">eH</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal">Win</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">s</span></span></span></span></span></span></eqn></section><br>
其中，</p>
<ul>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">kFrameCountHistorySize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span></span></span></span></eq>一般取值为90，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">kFrameCountHistorySize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span></span></span></span></eq>一般取值为2000；</li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">N_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>是使<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub><mo>:</mo><mtext> </mtext><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><msub><mi>N</mi><mi>f</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>M</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">N_f:\ max(T_{now}-T_f[N_f])&lt;kFrameHistoryWinMs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal" style="margin-right:0.08125em;">eH</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal">Win</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">s</span></span></span></span></eq>成立的最大序列号；</li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{now}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>为当前时间，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>T</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_f[0]=T_{now}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是数组内newest帧的时间戳，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi>k</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T_f[kFrameCountHistorySize]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">am</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ory</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mclose">]</span></span></span></span></eq>为数组内现存oldest帧的时间戳；</li>
<li>当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">N_f==0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq>时，不执行该公式，帧率保持上一次计算的结果。</li>
</ul>
<p>在WebRTC中，上述公式在*“webrtc/modules/video_coding/media_optimization.cc”*文件<strong>MediaOptimization</strong>类中实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessIncomingFrameRate</span><span class="params">(<span class="type">int64_t</span> now)</span> </span>&#123;</span><br><span class="line">  <span class="type">int32_t</span> num = <span class="number">0</span>, nr_of_frames = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (num = <span class="number">1</span>; num &lt; (kFrameCountHistorySize - <span class="number">1</span>); ++num) &#123;</span><br><span class="line">    <span class="keyword">if</span> (incoming_frame_times_[num] &lt;= <span class="number">0</span> ||</span><br><span class="line">        <span class="comment">/* don&#x27;t use data older than 2 s */</span></span><br><span class="line">        now - incoming_frame_times_[num] &gt; kFrameHistoryWinMs) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      nr_of_frames++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int64_t</span> diff =</span><br><span class="line">        incoming_frame_times_[<span class="number">0</span>] - incoming_frame_times_[num - <span class="number">1</span>];</span><br><span class="line">    incoming_frame_rate_ = <span class="number">0.0</span>;  <span class="comment">/* No frame rate estimate available. */</span></span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      incoming_frame_rate_ = nr_of_frames * <span class="number">1000.0f</span> / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(diff);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、编码器输出帧率计算</strong></p>
<p>为了计算编码器的实际输出帧率，WebRTC维护了一个<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>B</mi><mi>i</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>A</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>M</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">kBitrateAverageWinMs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">Win</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">s</span></span></span></span></eq>时间段内的已编码帧的数组<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">T_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>，依据下列公式来计算实际码率：<br>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi>p</mi><mi>s</mi><mo>=</mo><mfrac><mrow><mn>90000</mn><mo>×</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mfrac><msub><mi>T</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi></mrow></msub><mn>2</mn></mfrac></mrow><msub><mi>T</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">
fps=\frac{90000 \times (sizeof(T_f)-1) + \frac{T_{diff}}{2}}{T_{diff}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.6985em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7264em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.735em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">90000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9914em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5131em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section><br>
其中，</p>
<ul>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo stretchy="false">]</mo><mo>−</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi>f</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T_{diff}=T_f[back]-T_f[front]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">ba</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">]</span></span></span></span></eq>，表示数组<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">T_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>最大的时间间隔，当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi></mrow></msub><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">T_{diff}&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq>时，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>p</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fps=sizeof(T_f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>；</li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sizeof(T_f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>表示数组<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">T_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>的大小，当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sizeof(T_f)&lt;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>时，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>p</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>f</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fps=sizeof(T_f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>。</li>
</ul>
<p>在WebRTC中，上述公式在*“webrtc/modules/video_coding/media_optimization.cc”*文件<strong>MediaOptimization</strong>类中实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MediaOptimization::PurgeOldFrameSamples</span><span class="params">(<span class="type">int64_t</span> now_ms)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!encoded_frame_samples_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (now_ms - encoded_frame_samples_.<span class="built_in">front</span>().time_complete_ms &gt;</span><br><span class="line">        kBitrateAverageWinMs) &#123;</span><br><span class="line">      encoded_frame_samples_.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MediaOptimization::UpdateSentFramerate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (encoded_frame_samples_.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    avg_sent_framerate_ = encoded_frame_samples_.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> denom = encoded_frame_samples_.<span class="built_in">back</span>().timestamp -</span><br><span class="line">              encoded_frame_samples_.<span class="built_in">front</span>().timestamp;</span><br><span class="line">  <span class="keyword">if</span> (denom &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    avg_sent_framerate_ =</span><br><span class="line">        (<span class="number">90000</span> * (encoded_frame_samples_.<span class="built_in">size</span>() - <span class="number">1</span>) + denom / <span class="number">2</span>) / denom;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    avg_sent_framerate_ = encoded_frame_samples_.<span class="built_in">size</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E6%8E%A5%E6%94%B6%E7%AB%AF%E5%B8%A7%E7%8E%87" tabindex="-1">接收端帧率</h3>
<p>在WebRTC中，将接收端帧率分为了三种：网络接收帧率——接收端输入帧率、解码器输出帧率、视频渲染帧率。</p>
<p><strong>1、网络接收帧率</strong></p>
<p>网络接收帧率统计的是接收端接收到网络发送过来的视频帧帧率。在完整接收到一帧数据后，由<strong>FrameBuffer</strong>类调用*ReceiveStatisticsProxy::OnCompleteFrame()*来统计。具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnCompleteFrame</span><span class="params">(<span class="type">bool</span> is_keyframe,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">size_t</span> size_bytes)</span> </span>&#123;</span><br><span class="line">  <span class="type">int64_t</span> now_ms = clock_-&gt;<span class="built_in">TimeInMilliseconds</span>();</span><br><span class="line">  frame_window_.<span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(now_ms, size_bytes));</span><br><span class="line">  <span class="type">int64_t</span> old_frames_ms = now_ms - kRateStatisticsWindowSizeMs;</span><br><span class="line">  <span class="keyword">while</span> (!frame_window_.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">         frame_window_.<span class="built_in">begin</span>()-&gt;first &lt; old_frames_ms) &#123;</span><br><span class="line">    frame_window_accumulated_bytes_ -= frame_window_.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">    frame_window_.<span class="built_in">erase</span>(frame_window_.<span class="built_in">begin</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">size_t</span> framerate =</span><br><span class="line">      (frame_window_.<span class="built_in">size</span>() * <span class="number">1000</span> + <span class="number">500</span>) / kRateStatisticsWindowSizeMs;</span><br><span class="line">  stats_.network_frame_rate = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(framerate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、解码器输出帧率</strong></p>
<p>WebRTC实现了<strong>RateStatistics</strong>来统计解码器输出帧率，在编码结束后由<strong>VideoReceiveStream</strong>调用*ReceiveStatisticsProxy::OnDecodedFrame()*来统计。具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnDecodedFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">uint64_t</span> now = clock_-&gt;<span class="built_in">TimeInMilliseconds</span>();</span><br><span class="line">  <span class="function">rtc::CritScope <span class="title">lock</span><span class="params">(&amp;crit_)</span></span>;</span><br><span class="line">  ++stats_.frames_decoded;</span><br><span class="line">  decode_fps_estimator_.<span class="built_in">Update</span>(<span class="number">1</span>, now);</span><br><span class="line">  stats_.decode_frame_rate = decode_fps_estimator_.<span class="built_in">Rate</span>(now).<span class="built_in">value_or</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、视频渲染帧率</strong></p>
<p>WebRTC实现了<strong>RateStatistics</strong>来统计视频渲染帧率，在视频渲染结束后由<strong>VideoReceiveStream</strong>调用*ReceiveStatisticsProxy::OnRenderedFrame()*来统计。具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRenderedFrame</span><span class="params">(<span class="type">const</span> VideoFrame&amp; frame)</span> </span>&#123;</span><br><span class="line">  <span class="type">uint64_t</span> now = clock_-&gt;<span class="built_in">TimeInMilliseconds</span>();</span><br><span class="line">  <span class="function">rtc::CritScope <span class="title">lock</span><span class="params">(&amp;crit_)</span></span>;</span><br><span class="line">  renders_fps_estimator_.<span class="built_in">Update</span>(<span class="number">1</span>, now);</span><br><span class="line">  stats_.render_frame_rate = renders_fps_estimator_.<span class="built_in">Rate</span>(now).<span class="built_in">value_or</span>(<span class="number">0</span>);</span><br><span class="line">  ++stats_.frames_rendered;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E5%8F%91%E9%80%81%E7%AB%AF%E5%B8%A7%E7%8E%87%E7%AD%96%E7%95%A5" tabindex="-1">发送端帧率策略</h2>
<p>影响发送端帧率的主要因素包含：视频采集（摄像头/桌面）帧率、编码器性能。</p>
<h3 id="%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E5%B8%A7%E7%8E%87%E7%AD%96%E7%95%A5" tabindex="-1">视频采集帧率策略</h3>
<p>摄像头是视频采集的来源，其帧率决定了视频会议帧率的上限。与摄像头采集相关的参数包含：像素格式、帧率和分辨率。下表列出了ThinkPad T440P自带摄像头支持的部分视频格式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">分辨率</th>
<th style="text-align:center">帧率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MJPG</td>
<td style="text-align:center">1280x720</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">MJPG</td>
<td style="text-align:center">640x360</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">YUY2</td>
<td style="text-align:center">1280x720</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">YUY2</td>
<td style="text-align:center">640x360</td>
<td style="text-align:center">30</td>
</tr>
</tbody>
</table>
<p>可以看出对于YUY2格式，1280x720的帧率仅为10帧，要想达到30帧必须要采用MJPG格式。这是因为，同样是1280x720分辨率，30帧YUY2和MJPG格式需要传输的数据量分别为：</p>
<ul>
<li>YUY2：<em>1280x720x30x2x8=421Mbps</em></li>
<li>MJPG：<em>1280x720x30x3x8/20=32Mbps</em></li>
</ul>
<p>YUY2需要的传输带宽过大，所以很多摄像头对于RGB、YUV等格式1280x720仅支持10帧。然而10帧是远远不能够满足视频会议的帧率需求的，因此在选择视频采集规格时，需要注意像素格式、帧率和分辨率的权衡。在实际应用中，我们可以采集MJPG格式1280x720x30视频规格，然后在应用层转换为YUV格式。WebRTC在*“webrtc/modules/video_capture/video_capture_impl.cc”*的<strong>VideoCaptureImpl</strong>类中实现了转换：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (frameInfo.codecType == kVideoCodecUnknown) &#123;</span><br><span class="line">  <span class="comment">/* Not encoded, convert to I420. */</span></span><br><span class="line">  <span class="type">const</span> VideoType commonVideoType =</span><br><span class="line">            <span class="built_in">RawVideoTypeToCommonVideoVideoType</span>(frameInfo.rawType);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frameInfo.rawType != kVideoMJPEG &amp;&amp; <span class="built_in">CalcBufferSize</span>(commonVideoType, width,</span><br><span class="line">                     							<span class="built_in">abs</span>(height)) != videoFrameLength) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> stride_y = width, stride_uv = (width + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> target_width = width, target_height = height;</span><br><span class="line"></span><br><span class="line">  rtc::scoped_refptr&lt;I420Buffer&gt; buffer = I420Buffer::<span class="built_in">Create</span>(</span><br><span class="line">      target_width, <span class="built_in">abs</span>(target_height), stride_y, stride_uv, stride_uv);</span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> conversionResult = <span class="built_in">ConvertToI420</span>(</span><br><span class="line">      commonVideoType, videoFrame, <span class="number">0</span>, <span class="number">0</span>, width, height, videoFrameLength,</span><br><span class="line">      apply_rotation ? _rotateFrame : kVideoRotation_0, buffer.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终得到的YUV格式的视频数据会被送到编码器中被编码，需要注意：不是所有的视频数据都会被编码器编码，详细内容将在下一节介绍。</p>
<h3 id="%E9%87%87%E9%9B%86%E7%BC%96%E7%A0%81%E4%B8%A2%E5%B8%A7%E7%AD%96%E7%95%A5" tabindex="-1">采集编码丢帧策略</h3>
<p>受限于系统硬件性能和编码器性能，视频采集图片的速度有可能比编码器编码速度快，这将导致多余的图片帧在编码器任务队列中累积。由于视频会议需要较低的时延，编码器必须要及时处理最新的帧，此时WebRTC采取丢帧策略——<strong>当有多个帧在编码器任务队列时，只编码最新的一帧</strong>。WebRTC在*“webrtc/video/vie_encoder.cc”*文件<strong>EncodeTask</strong>类中实现了该策略：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Run</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  ++vie_encoder_-&gt;captured_frame_count_;</span><br><span class="line">  <span class="keyword">if</span> (--vie_encoder_-&gt;posted_frames_waiting_for_encode_ == <span class="number">0</span>) &#123;</span><br><span class="line">    vie_encoder_-&gt;<span class="built_in">EncodeVideoFrame</span>(frame_, time_when_posted_us_);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* There is a newer frame in flight. Do not encode this frame. */</span></span><br><span class="line">    <span class="built_in">LOG</span>(LS_VERBOSE) &lt;&lt; <span class="string">&quot;Incoming frame dropped due to that the encoder is blocked.&quot;</span>;</span><br><span class="line">    ++vie_encoder_-&gt;dropped_frame_count_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，由于编码器是阻塞的，如果编码器性能或系统硬件性能较差，编码器会丢掉因阻塞而累积的帧，进而导致发送端帧率降低。在具体使用场景中，这往往会导致两种现象：</p>
<ul>
<li>接收端黑屏：如果发送端一开始就卡死在编码器中，接收端会一直黑屏，直到第一个帧编码完成；</li>
<li>接收端卡顿：如果发送端运行后经常阻塞在编码器中，接收端会卡顿，严重影响视频质量。</li>
</ul>
<p>因此，摄像头采集帧率并不等于编码器的实际输入帧率，<strong>MediaOptimization</strong>类中得到的编码器实际输入帧率，需要在下次编码前设置为编码器的输入帧率。</p>
<h3 id="%E6%81%92%E5%AE%9A%E7%A0%81%E7%8E%87%E4%B8%A2%E5%B8%A7%E7%AD%96%E7%95%A5" tabindex="-1">恒定码率丢帧策略</h3>
<p>除了上文所述的采集编码丢帧策略，WebRTC还实现了一种漏桶算法的变体，用于跟踪何时应该主动丢帧，以避免编码器无法保持其比特率时，产生过高的比特率。<a class="link"   href="https://en.wikipedia.org/wiki/Leaky_bucket" >漏桶算法<i class="fas fa-external-link-alt"></i></a>的示意图如下：</p>
<img    
                       lazyload
                       alt="image"
                       data-src="../../assets/webrtc-leaky-bucket-algorithm.jpg"
                        
                 >
<p><a class="link"   href="https://en.wikipedia.org/wiki/Leaky_bucket" >漏桶算法<i class="fas fa-external-link-alt"></i></a>的实现位于*“webrtc/modules/video_coding/frame_dropper.cc”*中的<strong>FrameDropper</strong>类，其实现了三个关键方法：</p>
<ul>
<li><em>Fill()</em></li>
<li><em>Leak()</em></li>
<li><em>DropFrame()</em></li>
</ul>
<p>从字面上可以看出，这三个方法对应于上图所示漏桶算法的三个操作。这三个方法都在<strong>MediaOptimization</strong>类被调用。</p>
<p>首先，来看看<strong>FrameDropper</strong>类的核心参数：</p>
<ul>
<li>漏桶容积：<em>accumulator_max_</em>，其值为<em>target-bps×kLeakyBucketSizeSeconds</em>，随目标码率改变而改变；</li>
<li>漏桶累积：<em>accumulator_</em>，其表示漏桶累积的字节数，每次<em>Fill()<em>时增加，每次</em>Leak()<em>时减少，其最大值为</em>target-bps×kAccumulatorCapBufferSizeSecs</em>；</li>
<li>丢帧率：<em>drop_ratio_</em>，其为一个指数滤波器，使丢帧率保持一个平滑的变化过程，每次*Leak()*后更新丢帧率；</li>
<li>关键帧率：<em>key_frame_ratio_</em>，其为一个指数滤波器，使关键帧率保持一个平滑的变化过程，每次*Fill()*后更新；</li>
<li>差分帧码率：<em>delta_frame_size_avg_kbits_</em>，其为一个指数滤波器，使关键帧率保持一个平滑的变化过程，每次*Fill()*后更新。</li>
</ul>
<p>其次，为了防止关键帧和较大的差分帧立即溢出，进而导致后续较小的帧出现较高丢帧，关键帧和较大的差分帧是不会被立即在桶中累计。相反，这些较大的帧会在漏桶中累计前，会分成若干小块，进而在*Leak()*操作中逐次累计这些小块，来防止较关键帧和较大的差分帧立即溢出。<strong>FrameDropper</strong>类增加了额外的几个参数来实现该策略：</p>
<ul>
<li><em>large_frame_accumulation_spread_</em>：大帧最大拆分块数，四舍五入取整；</li>
<li><em>large_frame_accumulation_count_</em>：大帧剩余拆分块数，四舍五入取整；</li>
<li><em>large_frame_accumulation_chunk_size_</em>：单个块尺寸，其值为<em>framesize/large_frame_accumulation_count_</em>。</li>
</ul>
<p>最后，来看看<strong>FrameDropper</strong>类的核心操作：</p>
<p><strong>1、<em>Fill()</em></strong></p>
<p>当视频帧被编码后，<strong>MediaOptimization</strong>类会调用<em>Fill()<em>方法来填充漏桶。调用顺序很简单，主要关注</em>Fill()<em>方法的实现——将大帧拆分为</em>large_frame_accumulation_count_<em>个小块，并不累加</em>accumulator_</em>；将小帧直接累计<em>accumulator_</em>。<em>Fill()<em>方法同时需要更新</em>key_frame_ratio_<em>和</em>delta_frame_size_avg_kbits_</em>，用以计算大帧拆分块数和大帧判断。具体实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fill</span><span class="params">(<span class="type">size_t</span> framesize_bytes, <span class="type">bool</span> delta_frame)</span> </span>&#123;</span><br><span class="line">  <span class="type">float</span> framesize_kbits = <span class="number">8.0f</span> * <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(framesize_bytes) / <span class="number">1000.0f</span>;</span><br><span class="line">  <span class="keyword">if</span> (!delta_frame) &#123;</span><br><span class="line">    <span class="keyword">if</span> (large_frame_accumulation_count_ == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key_frame_ratio_.<span class="built_in">filtered</span>() &gt; <span class="number">1e-5</span> &amp;&amp;</span><br><span class="line">          <span class="number">1</span> / key_frame_ratio_.<span class="built_in">filtered</span>() &lt; large_frame_accumulation_spread_) &#123;</span><br><span class="line">        large_frame_accumulation_count_ =</span><br><span class="line">            <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(<span class="number">1</span> / key_frame_ratio_.<span class="built_in">filtered</span>() + <span class="number">0.5</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        large_frame_accumulation_count_ =</span><br><span class="line">            <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(large_frame_accumulation_spread_ + <span class="number">0.5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      large_frame_accumulation_chunk_size_ =</span><br><span class="line">          framesize_kbits / large_frame_accumulation_count_;</span><br><span class="line">      framesize_kbits = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delta_frame_size_avg_kbits_.<span class="built_in">filtered</span>() != <span class="number">-1</span> &amp;&amp;</span><br><span class="line">        (framesize_kbits &gt;</span><br><span class="line">         kLargeDeltaFactor * delta_frame_size_avg_kbits_.<span class="built_in">filtered</span>()) &amp;&amp;</span><br><span class="line">        large_frame_accumulation_count_ == <span class="number">0</span>) &#123;</span><br><span class="line">      large_frame_accumulation_count_ =</span><br><span class="line">          <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(large_frame_accumulation_spread_ + <span class="number">0.5</span>);</span><br><span class="line">      large_frame_accumulation_chunk_size_ =</span><br><span class="line">          framesize_kbits / large_frame_accumulation_count_;</span><br><span class="line">      framesize_kbits = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      delta_frame_size_avg_kbits_.<span class="built_in">Apply</span>(<span class="number">1</span>, framesize_kbits);</span><br><span class="line">    &#125;</span><br><span class="line">    key_frame_ratio_.<span class="built_in">Apply</span>(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  accumulator_ += framesize_kbits;</span><br><span class="line">  <span class="built_in">CapAccumulator</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、<em>Leak()</em></strong></p>
<p><em>Leak()<em>操作按照编码器输入帧率的频率来执行，每次<strong>Leak</strong>的大小为</em>target_bps/input_fps</em>，每次<strong>Leak</strong>时需要判断是否需要累计<em>Fill()<em>方法拆分的块，进而更新</em>drop_ratio_</em>。*drop_ratio_*的更新遵循下列原则：</p>
<ul>
<li>当<em>accumulator_ &gt; 1.3f * accumulator_max_</em>，<em>drop_ratio_<em>基数调整为</em>0.8f</em>，提高丢帧率调整加速度；</li>
<li>当<em>accumulator_ &lt; 1.3f * accumulator_max_</em>，<em>drop_ratio_<em>基数调整为</em>0.9f</em>，降低丢帧率调整加速度。</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Leak</span><span class="params">(<span class="type">uint32_t</span> input_framerate)</span> </span>&#123;</span><br><span class="line">  <span class="type">float</span> expected_bits_per_frame = target_bitrate_ / input_framerate;</span><br><span class="line">  <span class="keyword">if</span> (large_frame_accumulation_count_ &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    expected_bits_per_frame -= large_frame_accumulation_chunk_size_;</span><br><span class="line">    --large_frame_accumulation_count_;</span><br><span class="line">  &#125;</span><br><span class="line">  accumulator_ -= expected_bits_per_frame;</span><br><span class="line">  <span class="keyword">if</span> (accumulator_ &lt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">    accumulator_ = <span class="number">0.0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (accumulator_ &gt; <span class="number">1.3f</span> * accumulator_max_) &#123;</span><br><span class="line">    <span class="comment">/* Too far above accumulator max, react faster */</span></span><br><span class="line">    drop_ratio_.<span class="built_in">UpdateBase</span>(<span class="number">0.8f</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Go back to normal reaction */</span></span><br><span class="line">    drop_ratio_.<span class="built_in">UpdateBase</span>(<span class="number">0.9f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (accumulator_ &gt; accumulator_max_) &#123;</span><br><span class="line">    <span class="comment">/* We are above accumulator max, and should ideally</span></span><br><span class="line"><span class="comment">     * drop a frame. Increase the dropRatio and drop</span></span><br><span class="line"><span class="comment">     * the frame later.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (was_below_max_) &#123;</span><br><span class="line">      drop_next_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    drop_ratio_.<span class="built_in">Apply</span>(<span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    drop_ratio_.<span class="built_in">UpdateBase</span>(<span class="number">0.9f</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    drop_ratio_.<span class="built_in">Apply</span>(<span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  was_below_max_ = accumulator_ &lt; accumulator_max_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、<em>DropFrame()</em></strong></p>
<p><em>DropFrame()<em>操作用来判断是否需要将输入到编码器的这一帧丢弃，其利用</em>drop_ratio_<em>来使丢帧率保持一个平滑的变化过程。当</em>drop_ratio_.filtered() &gt;= 0.5f</em>时，表明连续丢弃多个帧（至少一个帧）；当<em>0.0f &lt; drop_ratio_.filtered() &lt; 0.5f</em>时，表明多个帧才会丢弃一个帧。具体的丢帧策略见实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FrameDropper::DropFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (drop_ratio_.<span class="built_in">filtered</span>() &gt;= <span class="number">0.5f</span>) &#123;</span><br><span class="line">    <span class="type">float</span> denom = <span class="number">1.0f</span> - drop_ratio_.<span class="built_in">filtered</span>();</span><br><span class="line">    <span class="keyword">if</span> (denom &lt; <span class="number">1e-5</span>) &#123;</span><br><span class="line">      denom = <span class="number">1e-5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int32_t</span> limit = <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(<span class="number">1.0f</span> / denom - <span class="number">1.0f</span> + <span class="number">0.5f</span>);</span><br><span class="line">    <span class="type">int</span> max_limit = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(incoming_frame_rate_ * max_drop_duration_secs_);</span><br><span class="line">    <span class="keyword">if</span> (limit &gt; max_limit) &#123;</span><br><span class="line">      limit = max_limit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (drop_count_ &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      drop_count_ = -drop_count_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (drop_count_ &lt; limit) &#123;</span><br><span class="line">      drop_count_++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      drop_count_ = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_ratio_.<span class="built_in">filtered</span>() &gt; <span class="number">0.0f</span> &amp;&amp; drop_ratio_.<span class="built_in">filtered</span>() &lt; <span class="number">0.5f</span>) &#123;</span><br><span class="line">    <span class="type">float</span> denom = drop_ratio_.<span class="built_in">filtered</span>();</span><br><span class="line">    <span class="keyword">if</span> (denom &lt; <span class="number">1e-5</span>) &#123;</span><br><span class="line">      denom = <span class="number">1e-5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int32_t</span> limit = -<span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(<span class="number">1.0f</span> / denom - <span class="number">1.0f</span> + <span class="number">0.5f</span>);</span><br><span class="line">    <span class="keyword">if</span> (drop_count_ &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      drop_count_ = -drop_count_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (drop_count_ &gt; limit) &#123;</span><br><span class="line">      <span class="keyword">if</span> (drop_count_ == <span class="number">0</span>) &#123;</span><br><span class="line">        drop_count_--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        drop_count_--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      drop_count_ = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  drop_count_ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E6%8E%A5%E6%94%B6%E7%AB%AF%E5%B8%A7%E7%8E%87%E7%AD%96%E7%95%A5" tabindex="-1">接收端帧率策略</h2>
<p>影响接收端帧率的主要因素包含：网络状况、解码器性能、渲染速度。</p>
<h3 id="%E7%BD%91%E7%BB%9C%E7%8A%B6%E5%86%B5%E5%AF%BC%E8%87%B4%E4%B8%A2%E5%B8%A7" tabindex="-1">网络状况导致丢帧</h3>
<p>网络因素对实时视频流的影响十分严重，当网络出现拥塞，导致较高的丢包率，明显的现象就是视频接收端帧率降到很低。比较严重时，接收端接收帧率可能只有几帧，导致无法进行正常的视频通话。WebRTC在*“webrtc/modules/video_coding/packet_buffer.cc&quot;<em>的<strong>PacketBuffer</strong>中，将接收到的RTP包组合成一个完整的视频帧。之后，该完整的帧会被送到</em>&quot;webrtc/modules/video_coding/rtp_frame_reference_finder.cc”*的<strong>RtpFrameReferenceFinder</strong>中。一个完整的帧可能是关键帧，也可能是参考帧，<strong>RtpFrameReferenceFinder</strong>类中关键帧直接送到解码器中处理。而对于参考帧，会判断其是否连续，若不连续会一直暂存在队列中，直到连续——送到解码器，或者下一个关键帧来了——从队列中删除。两个类相应的操作见下面两个函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">PacketBuffer::InsertPacket</span><span class="params">(VCMPacket* packet)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RtpFrameReferenceFinder::ManageFrameGeneric</span><span class="params">(std::unique_ptr&lt;RtpFrameObject&gt; frame,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                 <span class="type">int</span> picture_id)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>视频会议软件通常会采用NACK和FEC等手段来降低丢包对视频通话质量的影响。同时，解码器一定时间内，没有收到可解码数据，会向发送端请求I帧，这也就在一定程度上保证帧率不会过于低。这部分代码实现与*“webrtc/video/video_receive_stream.cc”*的<strong>VideoReceiveStream</strong>类中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">VideoReceiveStream::Decode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kMaxWaitForFrameMs = <span class="number">3000</span>;</span><br><span class="line">  std::unique_ptr&lt;video_coding::FrameObject&gt; frame;</span><br><span class="line">  video_coding::FrameBuffer::ReturnReason res =</span><br><span class="line">      frame_buffer_-&gt;<span class="built_in">NextFrame</span>(kMaxWaitForFrameMs, &amp;frame);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res == video_coding::FrameBuffer::ReturnReason::kStopped)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frame) &#123;</span><br><span class="line">    <span class="keyword">if</span> (video_receiver_.<span class="built_in">Decode</span>(frame.<span class="built_in">get</span>()) == VCM_OK)</span><br><span class="line">      rtp_stream_receiver_.<span class="built_in">FrameDecoded</span>(frame-&gt;picture_id);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">RequestKeyFrame</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="%E8%A7%A3%E7%A0%81%E5%AF%BC%E8%87%B4%E4%B8%A2%E5%B8%A7" tabindex="-1">解码导致丢帧</h3>
<p>看一下WebRTC内调用解码模块的代码，就可以看出WebRTC解码导致失败的可能原因。这部分代码位于*“webrtc/modules/video_coding/video_receiver.cc”*，实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int32_t</span> <span class="title">Decode</span><span class="params">(<span class="type">const</span> VCMEncodedFrame&amp; frame)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Decode a frame */</span></span><br><span class="line">  <span class="type">int32_t</span> ret = _decoder-&gt;<span class="built_in">Decode</span>(frame, clock_-&gt;<span class="built_in">TimeInMilliseconds</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Check for failed decoding, run frame type request callback if needed. */</span></span><br><span class="line">  <span class="type">bool</span> request_key_frame = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ret == VCM_ERROR_REQUEST_SLI) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">RequestSliceLossIndication</span>(</span><br><span class="line">          _decodedFrameCallback.<span class="built_in">LastReceivedPictureID</span>() + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      request_key_frame = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == VCM_REQUEST_SLI) &#123;</span><br><span class="line">    ret = <span class="built_in">RequestSliceLossIndication</span>(</span><br><span class="line">        _decodedFrameCallback.<span class="built_in">LastReceivedPictureID</span>() + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!frame.<span class="built_in">Complete</span>() || frame.<span class="built_in">MissingFrame</span>()) &#123;</span><br><span class="line">    request_key_frame = <span class="literal">true</span>;</span><br><span class="line">    ret = VCM_OK;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (request_key_frame) &#123;</span><br><span class="line">    <span class="function">rtc::CritScope <span class="title">cs</span><span class="params">(&amp;process_crit_)</span></span>;</span><br><span class="line">    _scheduleKeyRequest = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面代码可以看出，如果解码器无法将接收到的数据解码，要么发送SLI要么发送PLI，请求重新发送关键帧。从SLI/PLI发出到收到可解码的关键帧这个时间间隔内，接收端的帧率会比正常情况低。</p>
<h3 id="%E6%B8%B2%E6%9F%93%E5%AF%BC%E8%87%B4%E4%B8%A2%E5%B8%A7" tabindex="-1">渲染导致丢帧</h3>
<p>在实际应用中，经过WebRTC处理后显示的帧率较大，但最终的显示效果却比较差，能够感觉到明显的卡顿。这就和应用软件的渲染有关。研究不深，暂不撰写。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>如何设计C++类——《Effective C++》读后感</title>
    <url>/reading/effective-cplusplus-reading/</url>
    <content><![CDATA[<p>一直以来，使用C++面向对象机制，主要是为了其封装和多态特性。往往设计类时，只是为了功能的堆砌，没有考虑的更加深入。</p>
<p>之前也阅读过《Effective C++》，只是那时是在学生时代。如今工作了，重新阅读，有不少新的感悟。最关键的是，能从更高的视角去设计程序，之前杂乱无序的点与点，逐渐连接成一条条线。希望后续能够成面、成立体。<span id="more"></span></p>
<p>回到正题：如何设计C<ins>类？当然，更合理的表述应该是：如何设计高效、优雅的C</ins>类？（菜鸟的思考）</p>
<blockquote>
<p>注意：我们并不是要设计一个程序，或者一个大的模块，我们考虑的更加具体，具体到其中的一点。</p>
</blockquote>
<h2 id="%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD%EF%BC%9F" tabindex="-1">我们需要实现哪些功能？</h2>
<p>“先谋后动”，在设计具体类时，必须要清楚下面几点：</p>
<p>1、设计该类的目的</p>
<p>清晰的概念远比模棱两口的理解，更能帮助我们深入分析问题。有时候我们觉得我就是需要实现这个功能罢了，只要能用就好了。然而，多和产品经理或技术经理沟通，有可能出现意想不到的结果：</p>
<ul>
<li>该功能没有我们想到那么复杂，并不需要自己设计；</li>
<li>该功能比我们想到的更加复杂，我们需要考虑更多正确性、高效性、扩展性、维护性等方面的额问题。</li>
</ul>
<p>2、使用该类的场景</p>
<p>不同的使用场景，相同功能类的设计需求是不一样的。譬如，设计一个视频解码类，如果使用场景为视频播放器，那我们设计的类必须要考虑不同的编码格式；但如果使用场景为视频会议，我们设计的类就不需要考虑太多编码格式的问题，反而需要针对某种格式进行效率优化。</p>
<p>3、潜在的扩展方向</p>
<p>程序不是一成不变的，外界事物不停的变化，催生不同的需求。如果我们的程序不可扩展，那每次需求变更，之前的工作都白费了。类的设计一定要考虑到，未来潜在的扩展方向。如果我们无法确定潜在的扩展方向，至少留下可扩展的接口，不要把一切行为、属性都写死。</p>
<h2 id="%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E3%80%81%E5%A6%82%E4%BD%95%E6%8B%B7%E8%B4%9D%E8%B5%8B%E5%80%BC%EF%BC%9F" tabindex="-1">如何构造析构、如何拷贝赋值？</h2>
<p>C<ins>类的构造析构和拷贝赋值是设计C</ins>类时最基本的要点，有不少细节部分需要考虑：</p>
<ul>
<li>构造函数：合成的默认构造函数、默认构造函数、default关键词、explicit关键字、类型转换、延迟初始化、单例模式</li>
<li>析构函数：默认析构函数、虚析构函数</li>
<li>拷贝构造函数：深拷贝/浅拷贝、禁止拷贝</li>
<li>赋值构造函数：深拷贝/浅拷贝、禁止拷贝</li>
</ul>
<p>除了上面的细节部分，我们需要明确几个准则：</p>
<ul>
<li>除非默认操作非你所需，否则请用<code>=default</code>来定义构造析构函数；</li>
<li>除非编译器合成为你所需，否则请用<code>=delete</code>来定义赋值拷贝函数；</li>
<li>除非类不可能成为基类，否则请将析构函数定义为<code>virtual</code>；</li>
<li>构造与析构过程中，不调用virtual函数、析构函数不能抛出异常。</li>
<li>拷贝构造复制需要处理<code>深拷贝</code>和<code>浅拷贝</code>，赋值操作需要额外考虑<code>自我赋值</code>。</li>
</ul>
<h3 id="%E6%98%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2" tabindex="-1">显式初始化和类型转换</h3>
<blockquote>
<p>首先表明我的立场：<strong>建议单参数构造函数都声明为explicit，拒绝隐式类型转换，除非你有意要隐式转换。</strong></p>
</blockquote>
<p>显式初始化主要针对于单参数构造函数，用<code>explicit</code>关键字来声明构造函数——拒绝隐式类型转换。在C++中，单参数的构造函数主要承担两个功能：对象构造、类型转换。</p>
<p>这儿强调<code>单参数</code>，是由于多个实参的构造函数不能用于执行隐式转换，所以无须将这些构造函数声明为explicit，但你若是非要声明也是可以的。同时，我们只能在类内声明explicit关键词，不能再类外部重复声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">String</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">String::String</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; &#125; <span class="comment">/* error */</span></span><br><span class="line">String str = <span class="number">3</span>; <span class="comment">/* error */</span></span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(<span class="number">3</span>)</span></span>;  <span class="comment">/*  ok   */</span></span><br></pre></td></tr></table></figure>
<p>使用隐式类型转换需要注意的是<strong>编译器只会自动执行一步类型转换</strong>，从《C++ Primer》中摘取一个例子来看看：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SalesData</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesData</span>(<span class="type">const</span> std::string &amp;s);</span><br><span class="line">    <span class="function">SalesData&amp; <span class="title">combine</span><span class="params">(SalesData)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SalesData data;</span><br><span class="line">data.<span class="built_in">combine</span>(<span class="string">&quot;99-99-99-99&quot;</span>); <span class="comment">/* error: cannot transfer &quot;99-99-99-99&quot; to std::string to SalesData at one time*/</span></span><br><span class="line">data.<span class="built_in">combine</span>(std::<span class="built_in">string</span>(<span class="string">&quot;99-99-99-99&quot;</span>)); <span class="comment">/* ok: transfer std::string to SalesData */</span></span><br></pre></td></tr></table></figure>
<p>很多时候，隐式的类型转换逻辑上是合理的，我们设计上需要实现一个隐式转换，是可以接受的。很多编译器会自动将类型转换操作转换成对象构造操作。譬如将整形转换成年龄：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Age</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Age</span>(<span class="type">int</span> age);    </span><br><span class="line">&#125;;</span><br><span class="line">Age age = <span class="number">12</span>; <span class="comment">/* ok, same as Age age(12) */</span></span><br></pre></td></tr></table></figure>
<p>然而大多数隐式类型转换常常会带来逻辑上的错误，而且这种错误一旦发生很难查询，所以并不推荐使用隐式转换——<em>除非你是有意为之，否则都使用显式构造</em>。</p>
<blockquote>
<p><code>explicit</code>之所以被导入到C++，是为了提供程序员一种方法，使他们能够制止”单一参数的constructor”被当作一个conversion运算符。</p>
</blockquote>
<p>《C++ Primer》课后习题中有一题很好的阐述了——何时需要隐式转换、何时需要避免隐式转换：</p>
<blockquote>
<p>std::vector将其单参数构造函数定义成explicit的，而std::string则不是，你觉得原因何在？<br>
std::string接受的单参数是const char*类型，如果我们得到了一个常量指针，则把它看做std::string对象是自然而然的过程，编译器自动把参数类型转换成类类型也非常符合逻辑，因此我们无须指定为explicit。与std::string相反，std::vector接受的单参数是int类型，这个参数的原意是指定std::vector的容量。如果我们在本来需要std::vector的地方提供一个int值并且希望这个int值自动转换成std::vector，则这个过程显得比较牵强，因此把std::vector的单参数构造函数定义成explicit的更加合理。</p>
</blockquote>
<p>C<ins>的标准模板库是学习C</ins>理论实践的好地方，总结下标准库中用explicit修饰的构造函数：</p>
<ul>
<li>接受一个容量参数的std::vector构造函数是explicit的。</li>
<li>接受一个指针参数的std::shared_ptr/std::auto_ptr构造函数是explicit的。</li>
<li>接受一个std::string参数的std::sstream构造函数是explicit的</li>
<li>接受一个std::string或C-String参数的std::fstream构造函数是explicit的</li>
</ul>
<h3 id="%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8" tabindex="-1">虚函数表</h3>
<p>虚函数表在构造函数中建立，在析构函数中销毁，因此构造函数不可能为虚函数，而析构函数可以为虚函数。同时，调用派生类构造函数，首先会出发基类的构造函数，如果基类的构造函数调用了一个虚函数，该虚函数此时并不具备多态特性。也就是——绝不要在构造和析构过程中调用虚函数。</p>
<h3 id="%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0" tabindex="-1">虚析构函数</h3>
<p>带有多态性质的基类应该声明一个virtual析构函数，如果class带有任何virtual函数，其就应该拥有一个virtual析构函数。默认情况下，类的析构函数是非虚函数，如果基类的析构函数是虚函数，则派生类的析构函数也都是虚函数。对于多态性质的基类，如果不声明虚析构函数，则会导致内存泄漏，看看下面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Ball</span>();</span><br><span class="line">    ~<span class="built_in">Ball</span>()</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">uint32_t</span> _circle;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasketBall</span> : <span class="keyword">public</span> Ball &#123;</span><br><span class="line">&#125;</span><br><span class="line">Ball *ball = <span class="keyword">new</span> <span class="built_in">BasketBall</span>();</span><br><span class="line"><span class="keyword">delete</span> ball; <span class="comment">/* 由于Ball的析构函数非虚，ball中属于Ball类部分的成员不会被析构 */</span></span><br></pre></td></tr></table></figure>
<p>当然，如果class一定不会用作基类使用，或者即使是作为基类使用，也不会定义virtual函数，那么是可以不用价格基类声明为virtual的。</p>
<h3 id="%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" tabindex="-1">单例模式</h3>
<p>如果程序中某个类只允许有一个实例，这个时候就需要使用到单例模式。单例模式Wrapper有很多实现，譬如Boost中的singleton，Poco中的SingletonHold。我们来看看Poco中对单例Wrapper的实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">S</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonHolder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SingletonHolder</span>():</span><br><span class="line">        _pS(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SingletonHolder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> _pS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">S* <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">FastMutex::ScopedLock <span class="title">lock</span><span class="params">(_m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!_pS) _pS = <span class="keyword">new</span> S;</span><br><span class="line">        <span class="keyword">return</span> _pS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    S* _pS;</span><br><span class="line">    FastMutex _m;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看看Poco::SingletonHolder的代码，S类型的实例仅仅创建一次。如果我们需要将单例嵌入到自己的代码逻辑中，可以按照下面代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _s;</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>();</span><br><span class="line">    ~<span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Release</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ~<span class="built_in">Release</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> _s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">static</span> Singleton *_s;</span><br><span class="line">    <span class="type">static</span> Release r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::_s = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">Singleton::Release Singleton::r;</span><br></pre></td></tr></table></figure>
<p>下文中延迟初始化那一节也是一种单例模式的实现。</p>
<h3 id="%E6%B7%B1%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D" tabindex="-1">深拷贝、浅拷贝</h3>
<p>如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() : <span class="built_in">p</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(<span class="string">&quot;Test&quot;</span>)) &#123; &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123; <span class="keyword">delete</span> p; &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">const</span> Test&amp; t) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> std::<span class="built_in">string</span>(*t.p); <span class="comment">/* 如果这儿不进行深拷贝，析构时则会有多个对象重复删除p */</span></span><br><span class="line">    &#125;</span><br><span class="line">    Test&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Test t) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(t);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string *p;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="%E7%A6%81%E6%AD%A2%E6%8B%B7%E8%B4%9D" tabindex="-1">禁止拷贝</h3>
<p>如果我们不需要编译器为我们实现默认拷贝构造函数，我们需要主动地驳回编译器这一默认的行为。通常的做法有三种：</p>
<ul>
<li>将相应的成员函数（这里是拷贝构造函数/赋值构造函数）声明为private，并不予实现；</li>
<li>将函数声明为delete；</li>
<li>继承一个不允许该操作的基类。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnCopyable</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">UnCopyable</span>();</span><br><span class="line">    ~<span class="built_in">UnCopyable</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">UnCopyable</span>(<span class="type">const</span> UnCopyable&amp;);</span><br><span class="line">    UnCopyable&amp; <span class="keyword">operator</span>=(<span class="type">const</span> UnCopyable&amp;)；</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Impl</span> : <span class="keyword">public</span> UnCopyable &#123; &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="%E5%BB%B6%E8%BF%9F%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">延迟初始化</h3>
<p>延迟初始化是一个很有用的概念。一个对象的延迟初始化（也称延迟实例化）意味着该对象的创建将会延迟至第一次使用该对象时。延迟初始化主要用于提高性能，避免浪费计算，并减少程序内存要求。</p>
<blockquote>
<p><strong>尽量将对象的定义延迟到第一次使用，甚至是直到能够给它初值实参为止。</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazyInstance</span> &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">LazyInstance&amp; <span class="title">getInstance</span><span class="params">(<span class="type">int</span> param)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> LazyInstance <span class="title">instance</span><span class="params">(param)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，instance实例对象直到getInstance()函数被第一次调用时，才会进行初始化。对比下列代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazyInstance</span> &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> LazyInstance instance;</span><br></pre></td></tr></table></figure>
<p>instance实例对象是静态成员，会在程序一开始调用默认构造函数初始化。</p>
<p>延迟初始化同时也解决了<code>跨编译单元中非局部静态成员的初始化次序不定</code>的问题——函数内局部静态对象会在第一次调用时被初始化。我们通过下列例子来说明该问题（摘自Effective C++）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* FileSystem.cpp */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::<span class="type">size_t</span> <span class="title">numDisks</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> FileSystem tfs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Directory.cpp */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Directory</span>(params);</span><br><span class="line">&#125;;</span><br><span class="line">Directory::<span class="built_in">Directory</span>(params) &#123;</span><br><span class="line">    std::<span class="type">size_t</span> disks = tfs.<span class="built_in">numDisks</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Director <span class="title">dir</span><span class="params">(tfs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>由于FileSystem.cpp和Directory.cpp是两个编译单元，其初始化次序在C++标准中并没有被定义，我们无法确定tsf是否一定在dir初始化之前初始化。解决办法就是采用延迟初始化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;&#125;;</span><br><span class="line"><span class="function">FileSystem&amp; <span class="title">tfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> FileSystem fs;</span><br><span class="line">    <span class="keyword">return</span> fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> &#123;&#125;;</span><br><span class="line">Directory::<span class="built_in">Directory</span>(params) &#123;</span><br><span class="line">    std::<span class="type">size_t</span> disks = <span class="built_in">tfs</span>().<span class="built_in">numDisks</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Directory&amp; <span class="title">dir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> Directory td;</span><br><span class="line">    <span class="keyword">return</span> td;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9F" tabindex="-1">接口设计需要考虑哪些问题？</h2>
<p>接口设计的原则就是<code>易用</code>。为了达到<code>易用</code>的目的，我们需要遵循下面准则，同时也要考虑下面问题：</p>
<h3 id="%E6%8E%A5%E5%8F%A3%E4%B8%80%E8%87%B4%E5%87%86%E5%88%99" tabindex="-1">接口一致准则</h3>
<blockquote>
<p>除非有好理由，否则应该尽量令你的类的行为与内置类型一致。</p>
</blockquote>
<p>接口的一致性，主要体现在两点：</p>
<ul>
<li>相同操作，自定义类型的行为应该与内置类型一致；</li>
<li>相同接口名，在同一自定义类型中，其功能、使用方式也应该一样；</li>
</ul>
<h3 id="%E8%AF%AF%E6%93%8D%E4%BD%9C%E9%98%B2%E5%BE%A1%E5%87%86%E5%88%99" tabindex="-1">误操作防御准则</h3>
<p>考虑客户在使用该接口时，可能出现哪些错误，进行针对性防御设计。（如果防御编程消耗过大，就要仔细权衡了。）</p>
<ul>
<li>参数限定，譬如：
<ul>
<li>如果参数存在上下限、固定值集合（月份值），最好进行限定（新建月份类型）；</li>
<li>如果是值传递，最好是改成常引用传递（内置类型、STL迭代器、函数对象除外）；</li>
<li>如果不想改变参数值，最好声明常参数。</li>
</ul>
</li>
<li>返回值限定，譬如：
<ul>
<li>const限定（防止试图修改返回值）；</li>
<li>智能指针限定（防止内存泄漏）。</li>
</ul>
</li>
</ul>
<h3 id="%E7%A7%81%E6%9C%89%E8%BF%98%E6%98%AF%E5%85%AC%E6%9C%89%EF%BC%9F" tabindex="-1">私有还是公有？</h3>
<p>为什么接口可以是私有呢？因为从广义来说，类的设计者也是类中成员的客户，私有的接口是面向类的设计者的。</p>
<p>对于成员函数，主要分为三种：私有、继承、公有，其安排主要是根据这三者的区别来定，没有什么特殊的地方。</p>
<p>对于数据成员，建议将所有数据成员声明为私有（考虑封装）。不管是类对象访问，还是派生类对象访问，都可以通过对应的getter/setter函数来操作。需要注意的是：protected并不比public更具封装性。</p>
<h3 id="%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%BF%98%E6%98%AF%E9%9D%9E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%EF%BC%9F" tabindex="-1">成员函数还是非成员函数？</h3>
<ul>
<li>
<p>如果接口必须要操作类私有成员，需要将接口声明为成员函数或友元函数。</p>
</li>
<li>
<p>如果接口可以通过访问成员函数来进行所需操作，建议用<code>非成员、非友元函数</code>来替换成员函数。</p>
</li>
</ul>
<p>因为这样做可以增加封装性、包括弹性和机能扩充性。这种<code>非成员、非友元函数</code>被称为便利函数，往往一个类会存在一系列不同的便利函数，功能相关的便利函数会被定义在同一个头文件内。</p>
<ul>
<li>如果接口的所有参数都需要进行类型转换，那么这个函数必须是非成员函数。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> Rational <span class="keyword">operator</span>* (<span class="type">const</span> Rational &amp;rhs) <span class="type">const</span>;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Rational <span class="title">oneEight</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>)</span>, <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">Rational result = oneHalf * oneEight; <span class="comment">/* ok */</span></span><br><span class="line">result = oneHalf * <span class="number">2</span>; <span class="comment">/* ok */</span></span><br><span class="line">result = <span class="number">2</span> * oneHalf; <span class="comment">/* error */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* non-member */</span></span><br><span class="line"><span class="type">const</span> Rational <span class="keyword">operator</span>*(<span class="type">const</span> Rational &amp;lhs, <span class="type">const</span> Rational &amp;rhs);</span><br></pre></td></tr></table></figure>
<h3 id="%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E4%B8%BAinline%E5%87%BD%E6%95%B0%EF%BC%9F" tabindex="-1">是否需要为inline函数？</h3>
<p>需要明确的是：inline只是对编译器的一个申请，并不是强制命令。将函数定义于class定义式内是隐喻inline的，定义于class定义式外需要显式声明为inline。通常inline函数被放置在头文件内。</p>
<p>如果编译器无法将你要求的函数inline化，其通常会给你一个警告信息。下列函数往往是非inline的：</p>
<ul>
<li>函数内部包含循环体；</li>
<li>构造函数/析构函数/虚函数；</li>
<li>存在被改变的可能：内联函数被改变，所有用到内联函数的程序都必须重新编译，而非内联函数只需要连接就行了。</li>
</ul>
<p>对于是否需要为inline函数的建议是：<em>将大多数inline函数限制在小型、被频繁调用的函数身上，同时不要因为函数模板出现在头文件，就将其声明为inline。</em></p>
<h3 id="%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E7%A6%BB" tabindex="-1">接口与实现分离</h3>
<p>接口与实现分离能够将编译依存性最小化，采用Handles Classes和Interface Classes能够很好地实现——相依于声明，不要相依于定义式。<strong>程序库头文件应该以完全且仅有声明式的形式存在，这种做法不论是否涉及template都适用。</strong></p>
<p>如果我们按照一般的C++教材上的方式现实代码，编译依存关系会导致很严重的重新编译和连接：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Person.h*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Data.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Address.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Data&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _name;</span><br><span class="line">    Data        _birth;</span><br><span class="line">    Address     _addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码，如果Data.h中的内容或其依赖的内容有任何改变，所有包含Person.h头文件的源文件都需要重新编译和连接。</p>
<p>Handles Classes利用pimpl idiom（pointer to implementation）思想，利用该思想来重写上面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Person.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Data&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;PersonImpl&gt; pImpl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* PersonImpl.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Data.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Address.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Data&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _name;</span><br><span class="line">    Data        _birth;</span><br><span class="line">    Address     _addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Person.cxx */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PersonImpl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Data&amp; birthday, <span class="type">const</span> Address&amp; addr)</span><br><span class="line">    : <span class="built_in">pImpl</span>(<span class="keyword">new</span> <span class="built_in">PersonImpl</span>(name, birthday, addr)) &#123; &#125;</span><br><span class="line"><span class="function">std::string <span class="title">Person::name</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    retur pImpl-&gt;<span class="built_in">name</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Interface Classes利用抽象基类和多态的特性，将接口定义在接口类中，而具体实现使用具体类，改写Person代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PersonI.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonI</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">PersonI</span>();</span><br><span class="line">    <span class="function"><span class="type">static</span> std::shared_ptr&lt;PersonI&gt; <span class="title">create</span><span class="params">(<span class="type">const</span> std::string &amp;name, <span class="type">const</span> Data &amp;birthday, <span class="type">const</span> Address &amp;addr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* PersonImpl.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PersonI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Data.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Address.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span> : <span class="keyword">public</span> PersonI &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Data&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _name;</span><br><span class="line">    Data        _birth;</span><br><span class="line">    Address     _addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* PersonImpl.cxx */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PersonImpl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;PersonI&gt; <span class="title">create</span><span class="params">(<span class="type">const</span> std::string &amp;name, <span class="type">const</span> Data &amp;birthday, <span class="type">const</span> Address &amp;addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;PersonI&gt;(<span class="keyword">new</span> <span class="built_in">PersonImpl</span>(name, birthday, addr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>两种改写方法都存在一定的代价，一般程序库头文件推荐使用Interface Classes。</p>
</blockquote>
<h2 id="%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9F" tabindex="-1">接口实现需要考虑哪些问题？</h2>
<h3 id="%E8%BF%94%E5%9B%9E%E5%80%BC" tabindex="-1">返回值</h3>
<ul>
<li>绝不要返回指向一个函数局部自动对象的指针或引用。</li>
<li>绝不要返回指向一个函数内部堆对象的引用，除非你能完全杜绝内存泄漏问题。</li>
<li>绝不要返回指向一个函数局部静态对象的指针或引用，如果有可能同时需要多个这样的对象。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getStatic</span><span class="params">(<span class="type">int</span> param)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> test;</span><br><span class="line">    test += param;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getStatic</span>(param1) == <span class="built_in">getStatic</span>(param2)) &#123; ... &#125; <span class="comment">// 总是相等</span></span><br></pre></td></tr></table></figure>
<p>注意：第三种情况，并不是要我们完全不要返回，譬如我们需要某类型的唯一实例，返回函数局部静态变量是可行的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Person&amp; <span class="title">getPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> Person p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>避免返回对象内部成分（私有成员：数据和函数）的句柄（指针或引用），例外：operator[]。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rect</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Point&amp; <span class="title">getPoint</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _point; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Point _point;</span><br><span class="line">&#125;;</span><br><span class="line">Point t;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> Rect r;</span><br><span class="line">    t = r.<span class="built_in">getPoint</span>();</span><br><span class="line">    t.<span class="built_in">setX</span>(<span class="number">100</span>); <span class="comment">/* 我们更改了常对象内部的值 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x = t.<span class="built_in">getX</span>(); <span class="comment">/* r已被析构，t现在为空悬指针了，wops... */</span></span><br></pre></td></tr></table></figure>
<h3 id="%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2" tabindex="-1">类型转换</h3>
<p>优良的C++代码很少使用转型，但是也无法完全摆脱转型。考虑使用转型时，需要遵守下列准则：</p>
<ul>
<li>尝试使用无需转型操作的设计替代转型动作，譬如：使用类的多态特性取代dynamic_cast转型；</li>
<li>将转型操作隐藏在某个函数背后，如果需要转型时，调用该函数，而不是直接将转型操作放进代码内；</li>
<li>使用C++新式转型操作取代旧式转型操作。</li>
</ul>
<p>转型操作有时很难避免，因此我们需要清楚的掌握四种转型操作（static_cast、const_cast、reinterpret_cast、dynamic_cast）的差异与缺陷：</p>
<ul>
<li><code>dynamic_cast</code>：影响程序效率，同时也是程序异常的潜在因素，尽量拒绝使用dynamic_cast转型操作；</li>
<li><code>const_cast</code>：去除常量性，如果需要获取常量性，需要使用static_cast；</li>
<li><code>reinterpret_cast</code>：不可移植，在指针转换的时候可以使用，但是要慎用；</li>
<li><code>static_cast</code>：上面三种转型之外的转型操作都可以由static_cast来负责。</li>
</ul>
<blockquote>
<p>转型操作切记试图揣摩编译器中对象的布局，因为对象的布局是随着不同的编译器而不同的。</p>
</blockquote>
<h3 id="%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE" tabindex="-1">资源释放</h3>
<p>通过良好的接口实现，<strong>接口使用者，无须考虑资源释放等问题</strong>。资源释放问题可以通过智能指针很好的解决。使用std::shared_ptr和删除器，我们能很好的解决资源释放问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Resource&gt; <span class="title">res</span><span class="params">(getResource(), releaseResource)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8" tabindex="-1">异常安全</h3>
<p>当异常被抛出后，异常安全的函数不会泄露任何资源，也不允许数据败坏。异常安全函数能够提供下列三种保证之一：</p>
<ul>
<li>基本承诺：如果异常被抛出，程序内的任何事物都保持在有效状态下（并不保证是原来的状态）。</li>
<li>强烈保证：如果异常被抛出，如果函数成功，就会完全成功，如果函数失败，就会恢复到调用函数之前的状态。</li>
<li>不抛保证：绝不抛出异常，程序总能完成它们原先承诺的功能。</li>
</ul>
<blockquote>
<p>我们推荐：对于C++函数，需要提供强烈保证，尽量不抛保证。</p>
</blockquote>
<p>为了完成异常安全保证，我们需要知道哪些操作不抛异常，哪些操作会抛出异常，哪些操作有助于异常安全保证：</p>
<ul>
<li>作用于内置类型身上的所有操作都是nothrow保证的；</li>
<li>动态内存如果无法找到足够内存以满足需求会抛出bad_alloc异常；</li>
<li>swap函数提供不抛保证，利用<em>copy-and-swap</em>特性能够很轻松的完成强烈异常保证（当然也存在例外）；</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PMImpl</span> &#123;</span><br><span class="line">    std::shared_ptr&lt;Image&gt; _image;</span><br><span class="line">    <span class="type">int</span> imageChanges;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Mutex _mutex;</span><br><span class="line">    std::shared_ptr&lt;PMImpl&gt; _pImpl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Menu::change</span><span class="params">(std::istream&amp; src)</span> </span>&#123;</span><br><span class="line">    <span class="function">Lock <span class="title">m</span><span class="params">(&amp;_mutex)</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;PMImpl&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> PMImpl(*_pImpl);</span></span></span><br><span class="line"><span class="params"><span class="function">    p-&gt;_image.reset(<span class="keyword">new</span> Image(src));</span></span></span><br><span class="line"><span class="params"><span class="function">    ++p-&gt;imageChanges;</span></span></span><br><span class="line"><span class="params"><span class="function">    std::swap(_pImpl, p);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>有时候我们是做不到强烈异常保证的，譬如消耗过大、程序结构复杂、历史代码等，这个时候就需要退而取其次——基本保证。函数提供的异常安全性保证通常最高只等于其所调用的各个函数的异常安全保证中的最弱者。所以，即使我们努力的保证了自己写的代码是强烈异常安全的，我们还是可能调用非此保证的代码。</p>
<blockquote>
<p>标准库版本的swap函数时不抛出异常的，如果我们需要自己实现swap函数，也务必要保证其不抛出异常——因为swap的一个最好的应用是帮助classes提供强烈的异常安全性保证。</p>
</blockquote>
<p>我们还需要注意一定：<strong>构造函数和析构函数一定不能抛出异常，否则会导致资源泄漏。</strong></p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>OOP</tag>
        <tag>BookList</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32 MultiThread Summary——《Win32多线程程序设计》</title>
    <url>/reading/win32-multi-thread/</url>
    <content><![CDATA[<blockquote><p>我们可以为我们的能力自豪，但对于我们的缺点——还有我们的无知和错误——我们必须诚实。</p>
<footer><strong>Andrew Hunt/David Thomas</strong><cite>程序员修炼之道</cite></footer></blockquote>
<p>多线程并不一定是最好的，合适才是最好的。<span id="more"></span></p>
<h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9F" tabindex="-1">为什么多线程？</h2>
<p>多线程主要的优点是价廉物美，启动快、退出快、与其他线程共享核心对象，很容易实现共产主义的伟大梦想。但是其又有不可预期、测试困难的缺点。</p>
<p>多线程往往会和多进程在一起进行比较，进程含有内存和资源：</p>
<ul>
<li>内存：可达到2GB，分为Code（程序的可执行部分，只读性质）、Data（全局变量和静态变量）和Stack（局部变量）</li>
<li>资源：核心对象（file handles和线程）、User资源（如对话框和字符串）、GDI资源（如Device Context和brushes）</li>
</ul>
<p>线程是进程的一个实体，是独立调度和分派的基本单位，不拥有系统资源（只拥有少许运行中必不可少的私有资源），线程可与同属一个进程的其它线程共享进程的全部资源。</p>
<p>总结来说，进程拥有资源，属于这个进程的若干个线程共享进程的资源。进程是资源分配和调度的单位，线程是CPU调度和分配的单位，资源是分配给进程的，线程只拥有很少资源，因而切换代价比进程切换低。但是进程的健壮性远比线程好，如果一个进程死亡，系统中的其他进程还是可以继续执行。</p>
<p>使用好多线程，就是要知道何时应该用多线程，何时不该用。如果应该用多线程，如何解决Race Condition问题？如何共享数据？如何提高效率？如何同步线程和数据？总结起来就是：</p>
<ul>
<li>有始有终，线程的创建和释放都要靠自己</li>
<li>不抛弃不放弃，等一等线程，让它做完自己的工作</li>
<li>文明有序，资源占用无冲突</li>
</ul>
<p>但是有时候却不建议使用多线程：</p>
<ul>
<li>针对于慢速I/O设备，Overlapped I/O更能胜任</li>
<li>程序的健壮性要求很高，值得付出比较多的额外负担，多进程可能更能胜任</li>
</ul>
<h2 id="%E6%93%8D%E4%BD%9C%E7%BA%BF%E7%A8%8B" tabindex="-1">操作线程</h2>
<h3 id="%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%EF%BC%9F" tabindex="-1">如何创建线程？</h3>
<p>如果要写一个多线程程序，第一步就是创建一个线程，我们可以使用<code>CreateThread API</code>函数，也可以使用_beginthreadex C 函数，其实我大多数时候使用的是Boost库上面的boost::thread对象来创建线程对象。如果有兴趣可以看看Boost库，这里暂且不讨论Boost库thread。</p>
<p>如果使用上面两个函数，可以去msdn查看。使用上面两种函数创建线程，其线程函数都必须符合以下格式，当然函数名可以更换：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadFunc</span><span class="params">(LPVOID n)</span></span>;</span><br></pre></td></tr></table></figure>
<p>使用CreateThread API函数或者_beginthreadex函数，可以传回两个值用以识别一个新的线程——返回值Handle（句柄）和输出参数lpThread（线程ID）。为了安全防护的缘故，不能根据一个线程的ID获得其handle。</p>
<h3 id="%E5%A6%82%E4%BD%95%E9%87%8A%E6%94%BE%E7%BA%BF%E7%A8%8B%EF%BC%9F" tabindex="-1">如何释放线程？</h3>
<p>线程和进程一样，都是核心对象。如何释放线程属于如何释放核心对象的问题。CloseHandle函数在这里起了十分重要的作用。CloseHandle函数的功能是将核心对象的引用计数减1。<em>其不能直接用来释放核心对象，核心对象只有在其引用计数为0的时候会被操作系统自动销毁。</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CloseHandle</span><span class="params">(HANDLE hObject)</span></span>;</span><br></pre></td></tr></table></figure>
<p>如果你不调用该函数，即使线程在创建之后执行完毕，引用计数还是不为0，线程无法被销毁。如果一个进程没有在结束之前对它所打开的核心对象调用CloseHandle，操作系统会自动把那些对象的引用计数减一。虽然操作系统会做这个工作，但是他不知道核心对象实际的意义，也就不可能知道解构顺序是否重要。如果你在循环结构创建了核心对象而没有CloseHandle，好吧！你可能会有几十万个句柄没有关闭，你的系统会因此没有可用句柄，然后各种异常现象就出现了。<strong>记住当你完成你的工作，应该调用CloseHandle函数释放核心对象</strong>。</p>
<p>在清理线程产生的核心对象时也要注意这个问题。<strong>不要依赖因线程结束而清理所有被这一线程产生的核心对象</strong>。面对一个打开的对象，区分其拥有者是进程或是线程是很重要的。这决定了系统何时做清理工作。程序员不能选择有进程或者线程拥有对象，一切都得视对象类型而定。如果被线程打开的核心对象被进程拥有，线程结束是无法清理这些核心对象的。</p>
<h3 id="%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BA%BF%E7%A8%8B" tabindex="-1">线程核心对象与线程</h3>
<p>其实这两个是不同的概念。CreateThread函数返回的句柄其实是指向线程核心对象，而不是直接指向线程本身。在创建一个新的线程时，线程本身会开启线程核心对象，引用计数加1，CreateThread函数返回一个线程核心对象句柄，引用计数再加1，所以线程核心对象一开始引用计数就是2。</p>
<p>调用CloseHandle函数，该线程核心对象引用计数减一，线程执行完成之后，引用计数再减一为零，该核心对象被自动销毁。</p>
<blockquote>
<p>不能依赖因线程的结束而清理所有被这一线程产生的核心对象。许多对象，例如文件，是被进程拥有的。</p>
</blockquote>
<h3 id="%E7%BB%93%E6%9D%9F%E4%B8%BB%E7%BA%BF%E7%A8%8B" tabindex="-1">结束主线程</h3>
<p>首先得了解哪个线程是主线程：程序启动后就执行的线程。主线程有两个特点：</p>
<ul>
<li>负责GUI主消息循环</li>
<li>主线程结束时，强迫其他所有线程被迫结束，其他线程没有机会执行清理工作</li>
</ul>
<p>第二个特点也就意味着，如果你不等待其他线程结束，它们没有机会执行完自己的操作，也没有机会做最后的cleanup操作。我遇到过由于没有等待，而出现程序奔溃的情况。反正很危险。</p>
<h3 id="%E7%BB%93%E6%9D%9F%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%8E%B7%E5%8F%96%E5%85%B6%E7%BB%93%E6%9D%9F%E4%BB%A3%E7%A0%81" tabindex="-1">结束线程并获取其结束代码</h3>
<p>这个没什么好说的，可以使用ExitThread函数退出线程，返回一个结束代码。GetExitCodeThread函数获取ExitThread函数或者return语句返回的结束代码。不过想通过GetExitCodeThread来等待线程结束是个很糟糕的注意——CPU被浪费了。下一节提及的WaitForSingleObject才是正道。</p>
<p>获取程序结束代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果线程尚未结束，返回TRUE，lpExitCode值为STILL_ACTIVE */</span></span><br><span class="line">BOOL bResult = <span class="built_in">GetExitCodeThread</span>(hThread, lpExitCode);</span><br></pre></td></tr></table></figure>
<h3 id="%E7%BB%88%E6%AD%A2%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B" tabindex="-1">终止其他线程</h3>
<p>终止其他线程可以使用TerminateThread()函数，也可以使用全局标记。</p>
<p>TerminateThread()函数的缺点是：</p>
<ul>
<li>1、线程没有机会在结束前清理自己，其堆栈也没有被释放掉，出现内存泄露；</li>
<li>2、任何与此线程有附着关系的DLLs也没有机会获得线程解除附着通知；</li>
<li>3、线程进入的Critical Section将永远处于锁定状态（Mutex会返回wait_abandoned状态）。</li>
<li>4、线程正在处理的数据会处于不稳定状态。</li>
</ul>
<p>TerminateThread()唯一可以预期的是：线程handle变成激发状态，并且传回dwExitCode所指定的结束代码。</p>
<p>设立全局标记的优点：保证目标线程在结束之前安全而一致的状态<br>
设立全局标记的缺点：线程需要一个polling机制，时时检查标记值。（可以使用一个<strong>手动重置的event对象</strong>）</p>
<h2 id="%E7%AD%89%E4%B8%80%E7%AD%89%E7%BA%BF%E7%A8%8B" tabindex="-1">等一等线程</h2>
<h3 id="%E7%AD%89%E5%BE%85%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BB%93%E6%9D%9F" tabindex="-1">等待一个线程的结束</h3>
<p>使用WaitForSingleObject最显而易见的好处是你终于可以把以下代码精简成一句了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> rc;</span><br><span class="line">  rc = <span class="built_in">GetExitCodeThread</span>(hThread, &amp;exitCode);</span><br><span class="line">  <span class="keyword">if</span>(!rc &amp;&amp; exitCode != STILL_ACTIVE)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">→ → → → → →</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br></pre></td></tr></table></figure>
<p>其他好处就是：</p>
<ul>
<li>busy loop浪费太多CPU时间</li>
<li>可以设定等待时间</li>
</ul>
<h3 id="%E7%AD%89%E5%BE%85%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BB%93%E6%9D%9F" tabindex="-1">等待多个线程的结束</h3>
<p>WaitForSingleObject函数不好同时判断多个线程的状态，WaitForMultipleObjects可以同时等待多个线程，可以设定是否等待所有线程执行结束还是只要一个线程执行完立马返回。</p>
<h3 id="%E5%9C%A8gui%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%AD%89%E5%BE%85" tabindex="-1">在GUI线程中等待</h3>
<p>在GUI线程中总是要常常回到主消息循环，上述两个wait api函数会阻塞主消息循环。MsgWaitForMultipleObjects函数可以在对象呗激发或者消息到达时被唤醒而返回。</p>
<h3 id="%E7%9B%B8%E5%85%B3%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0" tabindex="-1">相关基本函数</h3>
<p>1、等待一个核心对象被激发（线程结束）</p>
<p>WaitForSingleObject不仅仅能够等待一个线程结束，也能等待一个核心对象变成激发状态。</p>
<p>MSDN中提及：</p>
<blockquote>
<p>If this handle（核心对象） is closed while the wait is still pending, the function’s behavior is undefined.</p>
</blockquote>
<p>会不会奔溃呢？这是个问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 失败返回WAIT_FAILED</span><br><span class="line">/* 成功：</span><br><span class="line">/*    WAIT_OBJECT_0: 等待目标变成激发状态</span><br><span class="line">/*    WAIT_TIMEOUT: 核心对象变成激发状态之前，等待时间终了。</span><br><span class="line">/*    WAIT_ABANDONED: 如果一个拥有mutex互斥器的线程结束之前没有释放mutex</span><br><span class="line">/* dwMilliseconds可以为INFINITE，表示一直等待。也可以为0，表示立即检查handle的状态。</span><br><span class="line">DWORD result = WaitForSingleObject(hThead, dwMilliseconds);</span><br></pre></td></tr></table></figure>
<p>2、等待多个核心对象被激发（线程结束）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* bWaitAll是TRUE，那么返回值将是WAIT_OBJECT_0 */</span><br><span class="line">/* bWaitAll是FALSE，那么将返回值减去WAIT_OBJECT_0，就表示数组中那个handle被激发 */</span><br><span class="line">DWORD result = WaitForMultipleObjects(</span><br><span class="line">                nCount,  /* 最大容量是MAXIMUM_WAIT_OBJECTS（64）*/</span><br><span class="line">                lpHandles,</span><br><span class="line">                bWaitAll,</span><br><span class="line">                dwMilliseconds);</span><br></pre></td></tr></table></figure>
<p>3、等待核心对象被激发或消息到达队列</p>
<p>在一个GUI程序中等待线程结束会导致进程卡死，常常回到主消息循环式很重要的。光使用GetMessage函数和WaitForMultipleObjects无法做到这一点。MsgWaitForMultipleObjects函数能够同时等待核心对象被激发或者消息到达队列。</p>
<p>这块代码详见Win32多线程程序设计P88</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DWORD result = MsgWaitForMultipleObjects(nCount, pHandles, bWaitAll, dwMilliseconds, dwWakeMask);</span><br></pre></td></tr></table></figure>
<h2 id="%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5" tabindex="-1">线程同步</h2>
<p>线程同步主要有Critical Sections、Mutex、Semaphores、Event，除了Critical Section是存在于进程<code>内存空间</code>内，其他都是<code>核心对象</code>。</p>
<h3 id="critical-sections" tabindex="-1">Critical Sections</h3>
<p>Critical Section用来实现排他性占有，适用范围时单一进程的各个线程之间。临界区并非核心对象，一旦线程进入一个临界区，他就能够一再的<code>重复</code>进入该临界区。但是必须保证，<strong>每一个进入操作都有一个对应的离开操作</strong>。</p>
<p>Critical Section的一个缺点就是，没有办法获知进入critical section中的那个线程是生是死。这样的话，如果线程挂了还没有离开临界区，系统没有办法将该临界区清楚。</p>
<p>同时，临界区由于context switching也会发生死锁（DeadLock）现象——每个线程都抓住了部分资源，而都在等待对方线程的资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRITICAL_SECTION g_criticalSection;</span><br><span class="line">InitializeCriticalSection(&amp;g_criticalSection);</span><br><span class="line">EnterCriticalSection(g_criticalSection);</span><br><span class="line">LeaveCriticalSection(g_criticalSection);</span><br><span class="line">DeleteCriticalSection(&amp;g_criticalSection);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>千万不要再一个critical section之中调用Sleep()或任何Wait() API函数。</p>
</blockquote>
<p>Critical Sections注意事项：</p>
<ul>
<li>一旦线程进入一个Critical Section，再调用LeaveCriticalSection函数之前，就能一直重复的进入该Critical Section。</li>
<li>千万不要在一个Critical section之中调用Sleep()或者任何Wait… API函数。</li>
<li>如果进入Critical section的那个线程结束了或者当掉了，而没有调用LeaveCriticalSection函数，系统就没有办法将该Critical Section清除。</li>
</ul>
<p>Critical Section的优点：</p>
<ul>
<li>相对于Mutex来说，其速度很快。锁住一个未被拥有的mutex要比锁住一个未被拥有的critical section，需要花费几乎100倍时间。（critical section不需要进入操作系统核心）</li>
</ul>
<p>Critical Section的缺陷：</p>
<ul>
<li>Critical Section不是核心对象，无法WaitForSingleObject，没有办法解决<code>死锁</code>问题（一个著名的死锁问题：哲学家进餐问题）</li>
<li>Critical Section不可<code>跨进程</code></li>
<li>无法指定等待结束的时间长度</li>
<li>不能够同时有一个Critical section被等待</li>
<li>无法侦测是否已被某个线程放弃</li>
</ul>
<h3 id="mutex" tabindex="-1">Mutex</h3>
<p>Mutex可以在不同的线程之间实现排他性占有，甚至即使那些线程属于不同进程。Mutex和临界区类似，但是它牺牲速度以增加弹性。两者区别：</p>
<ul>
<li>锁住一个未被拥有的Mutex，比锁住一个未被拥有的critical section，需要花费几乎100倍的时间（临界区非核心对象，不需要进去操作系统核心，只要在用户态进行操作即可）。</li>
<li>Mutex可以跨进程，而临界区只能在同一进程使用</li>
<li>等待一个Mutex，可以指定结束等待的时间长度。</li>
</ul>
<p>Mutex的激发状态：当没有任何线程拥有该Mutex而且有一个线程正以Wait…()等待该Mutex，该mutex就会短暂的出现激发状态。</p>
<p>如果线程拥有一个mutex而在结束前没有调用ReleaseMutex函数，mutex不会被摧毁，取而代之的是，该mutex会被视为未拥有以及未被激发。而下一个等待的线程会被以WAIT_ABANDONED_0通知。</p>
<p>使用示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">HANDLE hMutex ; <span class="comment">/* global attributes */</span></span><br><span class="line">hMutex = <span class="built_in">CreateMutex</span> (</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">/* default event attributes */</span></span><br><span class="line">        <span class="literal">false</span>, <span class="comment">/* default not initially owned */</span></span><br><span class="line">        <span class="literal">NULL</span> <span class="comment">/* unnamed */</span>);</span><br><span class="line">DWORD dwWaitResult = <span class="built_in">WaitForSingleObject</span> (hMutex , INFINITE );</span><br><span class="line"><span class="keyword">if</span> (dwWaitResult == WAIT_OBJECT_0 ) &#123;</span><br><span class="line">    <span class="comment">/* wait succeed, do what you want */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex );</span><br></pre></td></tr></table></figure>
<p>示例解释：</p>
<p>1、HMutex在创建时为<code>未被拥有</code>和<code>未激发</code>状态；<br>
2、调用Wait…()函数，线程获得hMutex的拥有权，HMutex短暂变成激发状态，然后Wait…()函数返回，此时HMutex的状态是<code>被拥有</code>和<code>未激发</code>；<br>
3、ReleaseMutex之后，HMutex的状态变为<code>未被拥有</code>和<code>未激发</code>状态</p>
<p>Mutex注意事项：</p>
<ul>
<li>Mutex的拥有权并非属于哪个产生它的哪个线程，而是那个最后对此mutex进行Wait…()操作并且尚未进行ReleaseMutex()操作的线程。</li>
<li>如果线程拥有一个mutex而在结束前没有调用ReleaseMutex()，mutex不会被摧毁，取而代之，该mutex会被视为“未被拥有”以及“未被激发”，而下一个等待中的线程会被以WAIT_ABANDONED_0通知。</li>
<li>Wait…()函数在Mutex处于<code>未被拥有</code>和<code>未被激发</code>状态时返回。</li>
<li>将CreateMutex的第二个参数设为true，可以阻止race condition，否则调用CreateMutex的线程还未拥有Mutex，发生了context switch，就被别的线程拥有了。</li>
</ul>
<p>Mutex优点</p>
<ul>
<li>核心对象，可以调用Wait…() API函数</li>
<li>跨线程、跨进程、跨用户（将CreateMutex的第三个参数前加上&quot;Global//&quot;）</li>
<li>可以具名，可以被其他进程开启</li>
<li>只能被拥有它的哪个线程释放</li>
</ul>
<p>Mutex缺点</p>
<ul>
<li>等待代价比较大</li>
</ul>
<h3 id="semaphores" tabindex="-1">Semaphores</h3>
<p>Semaphore被用来追踪有限的资源。</p>
<p>和Mutex的对比</p>
<ul>
<li>mutex是semaphore的退化，令semahpore的最大值为1，那就是一个mutex</li>
<li>semaphore没有拥有权的概念，也没有<code>wait_abandoned</code>状态，一个线程可以反复调用Wait…()函数以产生锁定，而拥有mutex的线程不论在调用多少次Wait…()函数也不会被阻塞。</li>
<li>在许多系统中都有semaphore的概念，而mutex则不一定。</li>
<li>调用ReleaseSemaphore()的那个线程并不一定是调用Wait…()的那个线程，<strong>任何线程都可以在任何时间调用ReleaseSemaphore，解除被任何线程锁定的Semaphore。</strong></li>
</ul>
<p>Semaphore优点：</p>
<ul>
<li>核心对象</li>
<li>可以具名，可以被其他进程开启</li>
<li>可以被任何一个线程释放</li>
</ul>
<p>Semaphore缺点</p>
<h3 id="event" tabindex="-1">Event</h3>
<p>Event通常用于overlapped I/O，或者用来设计某些自定义的同步对象。</p>
<p>使用示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">HANDLE hEvent ; <span class="comment">/* global attributes */</span></span><br><span class="line">hEvent = <span class="built_in">CreateEvent</span> (</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">/* default event attributes */</span></span><br><span class="line">        <span class="literal">true</span>, <span class="comment">/* mannual reset */</span></span><br><span class="line">        <span class="literal">false</span>, <span class="comment">/* nonsignaled */</span></span><br><span class="line">        <span class="literal">NULL</span> <span class="comment">/* unnamed */</span></span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(hEvent);</span><br><span class="line"><span class="built_in">PulseEvent</span>(hEvent);</span><br><span class="line">DWORD dwWaitResult = <span class="built_in">WaitForSingleObject</span> (hEvent , INFINITE );</span><br><span class="line"><span class="built_in">ResetEvent</span>(hEvent);</span><br><span class="line"><span class="keyword">if</span> (dwWaitResult == WAIT_OBJECT_0 )</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* wait succeed, do what you want */</span></span><br><span class="line">       ...</span><br><span class="line">        <span class="built_in">ResetEvent</span>(hEvent );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例解释：</p>
<p>1、CreateEvent默认为非激发状态、手动重置<br>
2、SetEvent把hEvent设为激发状态<br>
3、在手动重置情况下（bManualReset=true），PulseEvent把event对象设为激发状态，然而唤醒<code>所有</code>等待中的线程，然后恢复为非激发状态；<br>
4、在自动重置情况下（bManualReset=false），PulseEvent把event对象设为激发状态，然而唤醒<code>一个</code>等待中的线程，然后恢复为非激发状态；<br>
5、ResetEvent将hEvent设为未激发状态</p>
<p>Event注意事项：</p>
<ul>
<li>CreateEvent函数的第二个参数bManualReset若为false，event会在变成激发状态（因而唤醒一个线程）之后，自动重置为非激发状态；</li>
<li>CreateEvent函数的第二个参数bManualReset若为true，event会在变成激发状态（因而唤醒一个线程）之后，不会自动重置为非激发状态，必须要手动ResetEvent；</li>
</ul>
<p>Event优点：</p>
<ul>
<li>核心对象</li>
<li>其状态完全由程序来控制，其状态不会因为Wait…()函数的调用而改变。</li>
<li>适用于设计新的同步对象</li>
<li>可以具名，可以被其他进程开启</li>
</ul>
<p>Event缺点：</p>
<ul>
<li>要求苏醒的请求并不会被存储起来，可能会遗失掉。如果一个AutoReset event对象调用SetEvent或PulseEvent，而此时并没有线程在等待，这个event会被遗失。如Wait…()函数还没来得及调用就发生了Context Switch，这个时候SetEvent，这个要求苏醒的请求会被遗失，然后调用Wait…()函数线程卡死。</li>
</ul>
<h2 id="%E6%9B%BF%E4%BB%A3%E5%A4%9A%E7%BA%BF%E7%A8%8B" tabindex="-1">替代多线程</h2>
<h3 id="overlapped-i%2Fo" tabindex="-1">Overlapped I/O</h3>
<p>Win32之中三个基本的I/O函数：CreateFile()、ReadFile()和WriteFile()。</p>
<ul>
<li>设置CreateFile()函数的dwFlagsAndAttributes参数为FILE_FLAG_OVERLAPPED，那么对文件的每一个操作都将是Overlapped。此时可以同时读写文件的许多部分，没有目前的文件位置的概念，每一次读写都要包含其文件位置。</li>
<li>如果发出许多Overlapped请求，那么执行顺序无法保证。</li>
<li>Overlapped I/O不能使用C Runtime Library中的stdio.h函数，只能使用ReadFile()和WriteFile()来执行I/O。</li>
</ul>
<p>Overlapped I/O函数使用OVERLAPPED结构来识别每一个目前正在进行的Overlapped操作，同时在程序和操作系统之间提供了一个共享区域，参数可以在该区域双向传递。</p>
<h3 id="%E5%A4%9A%E8%BF%9B%E7%A8%8B" tabindex="-1">多进程</h3>
<p>如果一个进程死亡，系统中的其他进程还是可以继续执行。多进程程序的健壮性远胜于多线程。因为如果多个线程在同一个进程中运行，那么一个误入歧途的线程就可能把整个进程给毁了。</p>
<p>另一个使用多重进程的理由是，当一个程序从一个作业平台被移植到另一个作业平台，譬如Unix（不支持线程，但进程的产生与结束的代价并不昂贵），Unix应用程序往往使用多个进程，如果移植成为多线程模式，可能需要大改。</p>
<h2 id="%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%88%90%E5%8A%9F%E7%A7%98%E8%AF%80" tabindex="-1">多线程程序设计成功秘诀</h2>
<ul>
<li>各线程的数据要分离开来，避免使用全局变量</li>
<li>不要再线程之间共享GDI对象</li>
<li>确定你知道你的线程状态，不要径自结束程序而不等待它们结束</li>
<li>让主线程处理用户界面（UI）</li>
</ul>
<h2 id="%E9%99%84%E5%BD%95%E4%B8%80%EF%BC%9Acontext-switching%E3%80%81race-condition%E3%80%81atomic-operations" tabindex="-1">附录一：Context Switching、Race Condition、Atomic Operations</h2>
<p>注意几个核心概念：</p>
<ul>
<li>Context Switching</li>
</ul>
<blockquote>
<p>线程中断时，CPU把当前线程的寄存器内容拷贝到堆栈中，再把它从堆栈中拷贝到一个CONTEXT结构中，来存储当前线程的状态。要切换不同的线程，操作系统应先切换隶属之进程的内存，然后恢复该线程放在Context结构中的寄存器值。</p>
</blockquote>
<ul>
<li>Race Condition</li>
</ul>
<blockquote>
<p>抢占性多任务系统，两个线程的执行次序不可预期，可能造成竟态条件。至于原子操作，是指一个操作能够不受中断地完成。由于一句代码能够扩展成很多句机器指令，在多线程的情况下，原子操作可以防止简单的一句代码被中断，产生竟态条件。</p>
</blockquote>
<ul>
<li>Atomic Operations</li>
</ul>
<blockquote>
<p>Atomic Operation可以更加广义一点，指一些列操作不受Context Switching导致的Race Conditions的影响，能够正确的执行的操作。</p>
</blockquote>
<h2 id="%E9%99%84%E5%BD%95%E4%BA%8C%EF%BC%9A%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%89%88%E6%9C%ACc-runtime-library" tabindex="-1">附录二：单线程和多线程版本C Runtime Library</h2>
<p>在编译的时候使用/MD或/MDd选项，表示使用多线程版本的C runtime library。多线程版函数确保你的输出不会中断。</p>
<p>区别</p>
<ul>
<li>如errno之类的变量，在多线程版本里每个线程各拥有一个</li>
<li>多线程版本中的数据结构以同步机制加以保护</li>
</ul>
<p>VS2013中有如下Runtime Library</p>
<ul>
<li>Multi-threaded (/MT): multithread, static version</li>
<li>Multi-threaded Debug (/MTd): multithread, static debug version</li>
<li>Multi-threaded DLL (/MD): multithread- and DLL-specific version</li>
<li>Multi-threaded Debug DLL (/MDd):multithread- and DLL-specific debug version</li>
</ul>
<p>/MD和/MDd将是潮流所趋，/ML和/MLd方式请及时放弃，其问题主要如下：</p>
<ul>
<li>最终生成的二进制代码因链入庞大的运行时库实现而变得非常臃肿。</li>
<li>当某项目以静态链接库的形式嵌入到多个项目，则可能造成运行时库的内存管理有多份，最终将导致致命的“Invalid Address specified to RtlValidateHeap”问题。</li>
</ul>
<p>注意：MFC程序必须使用多线程版本的C Runtime Library，否则会在链接时获得”undefined function“的错误消息。</p>
<h2 id="%E9%99%84%E5%BD%95%E4%B8%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8D%E5%90%8C" tabindex="-1">附录三：线程对象和线程的不同</h2>
<p>线程的handle是指向线程核心对象，而不是指向线程本身。线程对象的默认计数为2，当你调用CloseHandle时，引用计数下降1，当线程结束时，引用计数再降1。只有当两件事情都发生时，这个对象才会被真正清除。</p>
<h2 id="%E9%99%84%E5%BD%95%E5%9B%9B%EF%BC%9Agdi%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1" tabindex="-1">附录四：GDI对象和核心对象</h2>
<p>包括：进程、线程、文件、事件、信号量、互斥器、管道</p>
<p>不同：</p>
<ul>
<li>GDI对象有单一拥有者，核心对象有一个以上的拥有者。核心对象保持一个引用计数，以记录有多少handles对应到此对象。</li>
</ul>
<p>程序员不能选择由进程或线程拥有对象，一切都得视对象类型而定，区分一个对象拥有者是进程或线程是很重要的，因为会决定系统什么时候做清除善后工作。由于引用计数的设计，对象有可能在产生该对象之进程结束之后，还继续幸存。</p>
<h2 id="%E9%99%84%E5%BD%95%E4%BA%94%EF%BC%9A%E8%A2%AB%E6%BF%80%E5%8F%91%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%88signaled-objects%EF%BC%89" tabindex="-1">附录五：被激发的对象（Signaled Objects）</h2>
<p>可被WaitForSingleObject使用的核心对象有两种状态：激发与未激发，WaitForSingleObject会在目标物变成激活的时候返回。</p>
<p>1、线程、进程</p>
<p>当线程正在执行时，线程对象出于未激发状态，当线程结束时，线程对象就被激发了。</p>
<p>进程类似。</p>
<p>2、Event</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SetEvent()</span><br><span class="line">PulseEvent()</span><br><span class="line">ResetEvent()</span><br></pre></td></tr></table></figure>
<p>3、Mutex</p>
<p>如果Mutex没有被任何线程拥有，他就是出于激发状态。一旦一个等待mutex的函数返回了，mutex就自动重置为未激发状态。</p>
<p>4、Semaphore</p>
<p>Semaphore有一个计数器，当计数器内容大于0时，Semaphore出于激发状态，当计数器内容等于0时，Semaphore处于未激发状态。</p>
<h2 id="%E9%99%84%E5%BD%95%E5%85%AD%EF%BC%9A%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9_beginthreadex()-and-createthread()" tabindex="-1">附录六：如何选择_beginthreadex() and CreateThread()</h2>
<p>其实你只要记住这句：</p>
<blockquote>
<p>如果你写一个多线程程序，而且没有使用MFC，那么你应该总是和多线程版本的C run-time Library链接，并且总是以beginthreadex()和endthreadex()取代CreateThread()和ExitThread()。</p>
</blockquote>
<p>_beginthreadex()函数的设计是为了保证多线程情况下的安全，其相对于CreateThread()函数多了层外包，其必须为每一个由它开启和结束的线程做一些簿记工作。</p>
<p>但是为什么要增加一些簿记工作？Win32多线程编程貌似没有讲清楚。后面会深入学习。</p>
<p>至于什么时候使用单线程版本的Runtime Library和CreateProcess()，不建议考虑这个问题，弄混乱了就不好了。只要记住上面的那句话就行了。</p>
<p>使用_beginthreadex()函数需要注意以下：</p>
<ul>
<li>_beginthreadex()函数传回的线程handle，必须被强制转换类型为HANDLE后才能使用。</li>
<li>同时必须对着_beginthreadex()的传回值调用CloseHandle()函数。</li>
<li>绝对不要在一个“以beginthreadex()启动的线程&quot;中调用ExitThread()，必须使用endthreadex()，否则C Runtime Library就没有机会释放”为该线程而配置的资源“。</li>
</ul>
<p>避免_beginthread()是出于：beginthread()传回的HANLDE也许可用，也许不可用。被beginthread()产生出来的线程所做的第一件事就是关闭自己的handle。这样做是为了隐藏Win32的实现细节，但其传回来的handle可能在当时是不可用的。</p>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css">
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Win32</tag>
        <tag>Thread</tag>
        <tag>BookList</tag>
      </tags>
  </entry>
</search>
